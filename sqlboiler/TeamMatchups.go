// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamMatchup is an object representing the database table.
type TeamMatchup struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoundID       null.Int  `boil:"round_id" json:"round_id,omitempty" toml:"round_id" yaml:"round_id,omitempty"`
	HomeTeam      null.Int  `boil:"home_team" json:"home_team,omitempty" toml:"home_team" yaml:"home_team,omitempty"`
	AwayTeam      null.Int  `boil:"away_team" json:"away_team,omitempty" toml:"away_team" yaml:"away_team,omitempty"`
	HomeTeamScore null.Int  `boil:"home_team_score" json:"home_team_score,omitempty" toml:"home_team_score" yaml:"home_team_score,omitempty"`
	AwayTeamScore null.Int  `boil:"away_team_score" json:"away_team_score,omitempty" toml:"away_team_score" yaml:"away_team_score,omitempty"`
	Winner        null.Int  `boil:"winner" json:"winner,omitempty" toml:"winner" yaml:"winner,omitempty"`
	Status        null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt     time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *teamMatchupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamMatchupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamMatchupColumns = struct {
	ID            string
	RoundID       string
	HomeTeam      string
	AwayTeam      string
	HomeTeamScore string
	AwayTeamScore string
	Winner        string
	Status        string
	CreatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	RoundID:       "round_id",
	HomeTeam:      "home_team",
	AwayTeam:      "away_team",
	HomeTeamScore: "home_team_score",
	AwayTeamScore: "away_team_score",
	Winner:        "winner",
	Status:        "status",
	CreatedAt:     "created_at",
	DeletedAt:     "deleted_at",
}

// Generated where

var TeamMatchupWhere = struct {
	ID            whereHelperint
	RoundID       whereHelpernull_Int
	HomeTeam      whereHelpernull_Int
	AwayTeam      whereHelpernull_Int
	HomeTeamScore whereHelpernull_Int
	AwayTeamScore whereHelpernull_Int
	Winner        whereHelpernull_Int
	Status        whereHelpernull_Int
	CreatedAt     whereHelpertime_Time
	DeletedAt     whereHelpertime_Time
}{
	ID:            whereHelperint{field: "`TeamMatchups`.`id`"},
	RoundID:       whereHelpernull_Int{field: "`TeamMatchups`.`round_id`"},
	HomeTeam:      whereHelpernull_Int{field: "`TeamMatchups`.`home_team`"},
	AwayTeam:      whereHelpernull_Int{field: "`TeamMatchups`.`away_team`"},
	HomeTeamScore: whereHelpernull_Int{field: "`TeamMatchups`.`home_team_score`"},
	AwayTeamScore: whereHelpernull_Int{field: "`TeamMatchups`.`away_team_score`"},
	Winner:        whereHelpernull_Int{field: "`TeamMatchups`.`winner`"},
	Status:        whereHelpernull_Int{field: "`TeamMatchups`.`status`"},
	CreatedAt:     whereHelpertime_Time{field: "`TeamMatchups`.`created_at`"},
	DeletedAt:     whereHelpertime_Time{field: "`TeamMatchups`.`deleted_at`"},
}

// TeamMatchupRels is where relationship names are stored.
var TeamMatchupRels = struct {
	Round        string
	HomeTeamTeam string
	AwayTeamTeam string
	WinnerTeam   string
}{
	Round:        "Round",
	HomeTeamTeam: "HomeTeamTeam",
	AwayTeamTeam: "AwayTeamTeam",
	WinnerTeam:   "WinnerTeam",
}

// teamMatchupR is where relationships are stored.
type teamMatchupR struct {
	Round        *Round `boil:"Round" json:"Round" toml:"Round" yaml:"Round"`
	HomeTeamTeam *Team  `boil:"HomeTeamTeam" json:"HomeTeamTeam" toml:"HomeTeamTeam" yaml:"HomeTeamTeam"`
	AwayTeamTeam *Team  `boil:"AwayTeamTeam" json:"AwayTeamTeam" toml:"AwayTeamTeam" yaml:"AwayTeamTeam"`
	WinnerTeam   *Team  `boil:"WinnerTeam" json:"WinnerTeam" toml:"WinnerTeam" yaml:"WinnerTeam"`
}

// NewStruct creates a new relationship struct
func (*teamMatchupR) NewStruct() *teamMatchupR {
	return &teamMatchupR{}
}

// teamMatchupL is where Load methods for each relationship are stored.
type teamMatchupL struct{}

var (
	teamMatchupAllColumns            = []string{"id", "round_id", "home_team", "away_team", "home_team_score", "away_team_score", "winner", "status", "created_at", "deleted_at"}
	teamMatchupColumnsWithoutDefault = []string{"round_id", "home_team", "away_team", "home_team_score", "away_team_score", "winner", "status"}
	teamMatchupColumnsWithDefault    = []string{"id", "created_at", "deleted_at"}
	teamMatchupPrimaryKeyColumns     = []string{"id"}
)

type (
	// TeamMatchupSlice is an alias for a slice of pointers to TeamMatchup.
	// This should generally be used opposed to []TeamMatchup.
	TeamMatchupSlice []*TeamMatchup
	// TeamMatchupHook is the signature for custom TeamMatchup hook methods
	TeamMatchupHook func(boil.Executor, *TeamMatchup) error

	teamMatchupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamMatchupType                 = reflect.TypeOf(&TeamMatchup{})
	teamMatchupMapping              = queries.MakeStructMapping(teamMatchupType)
	teamMatchupPrimaryKeyMapping, _ = queries.BindMapping(teamMatchupType, teamMatchupMapping, teamMatchupPrimaryKeyColumns)
	teamMatchupInsertCacheMut       sync.RWMutex
	teamMatchupInsertCache          = make(map[string]insertCache)
	teamMatchupUpdateCacheMut       sync.RWMutex
	teamMatchupUpdateCache          = make(map[string]updateCache)
	teamMatchupUpsertCacheMut       sync.RWMutex
	teamMatchupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamMatchupBeforeInsertHooks []TeamMatchupHook
var teamMatchupBeforeUpdateHooks []TeamMatchupHook
var teamMatchupBeforeDeleteHooks []TeamMatchupHook
var teamMatchupBeforeUpsertHooks []TeamMatchupHook

var teamMatchupAfterInsertHooks []TeamMatchupHook
var teamMatchupAfterSelectHooks []TeamMatchupHook
var teamMatchupAfterUpdateHooks []TeamMatchupHook
var teamMatchupAfterDeleteHooks []TeamMatchupHook
var teamMatchupAfterUpsertHooks []TeamMatchupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamMatchup) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamMatchup) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamMatchup) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamMatchup) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamMatchup) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamMatchup) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamMatchup) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamMatchup) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamMatchup) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamMatchupAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamMatchupHook registers your hook function for all future operations.
func AddTeamMatchupHook(hookPoint boil.HookPoint, teamMatchupHook TeamMatchupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teamMatchupBeforeInsertHooks = append(teamMatchupBeforeInsertHooks, teamMatchupHook)
	case boil.BeforeUpdateHook:
		teamMatchupBeforeUpdateHooks = append(teamMatchupBeforeUpdateHooks, teamMatchupHook)
	case boil.BeforeDeleteHook:
		teamMatchupBeforeDeleteHooks = append(teamMatchupBeforeDeleteHooks, teamMatchupHook)
	case boil.BeforeUpsertHook:
		teamMatchupBeforeUpsertHooks = append(teamMatchupBeforeUpsertHooks, teamMatchupHook)
	case boil.AfterInsertHook:
		teamMatchupAfterInsertHooks = append(teamMatchupAfterInsertHooks, teamMatchupHook)
	case boil.AfterSelectHook:
		teamMatchupAfterSelectHooks = append(teamMatchupAfterSelectHooks, teamMatchupHook)
	case boil.AfterUpdateHook:
		teamMatchupAfterUpdateHooks = append(teamMatchupAfterUpdateHooks, teamMatchupHook)
	case boil.AfterDeleteHook:
		teamMatchupAfterDeleteHooks = append(teamMatchupAfterDeleteHooks, teamMatchupHook)
	case boil.AfterUpsertHook:
		teamMatchupAfterUpsertHooks = append(teamMatchupAfterUpsertHooks, teamMatchupHook)
	}
}

// One returns a single teamMatchup record from the query.
func (q teamMatchupQuery) One(exec boil.Executor) (*TeamMatchup, error) {
	o := &TeamMatchup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for TeamMatchups")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamMatchup records from the query.
func (q teamMatchupQuery) All(exec boil.Executor) (TeamMatchupSlice, error) {
	var o []*TeamMatchup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to TeamMatchup slice")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamMatchup records in the query.
func (q teamMatchupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count TeamMatchups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamMatchupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if TeamMatchups exists")
	}

	return count > 0, nil
}

// Round pointed to by the foreign key.
func (o *TeamMatchup) Round(mods ...qm.QueryMod) roundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoundID),
	}

	queryMods = append(queryMods, mods...)

	query := Rounds(queryMods...)
	queries.SetFrom(query.Query, "`Round`")

	return query
}

// HomeTeamTeam pointed to by the foreign key.
func (o *TeamMatchup) HomeTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.HomeTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`Teams`")

	return query
}

// AwayTeamTeam pointed to by the foreign key.
func (o *TeamMatchup) AwayTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AwayTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`Teams`")

	return query
}

// WinnerTeam pointed to by the foreign key.
func (o *TeamMatchup) WinnerTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.Winner),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`Teams`")

	return query
}

// LoadRound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamMatchupL) LoadRound(e boil.Executor, singular bool, maybeTeamMatchup interface{}, mods queries.Applicator) error {
	var slice []*TeamMatchup
	var object *TeamMatchup

	if singular {
		object = maybeTeamMatchup.(*TeamMatchup)
	} else {
		slice = *maybeTeamMatchup.(*[]*TeamMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamMatchupR{}
		}
		if !queries.IsNil(object.RoundID) {
			args = append(args, object.RoundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoundID) {
				args = append(args, obj.RoundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Round`),
		qm.WhereIn(`Round.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Round")
	}

	var resultSlice []*Round
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Round")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Round")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Round")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Round = foreign
		if foreign.R == nil {
			foreign.R = &roundR{}
		}
		foreign.R.RoundTeamMatchups = append(foreign.R.RoundTeamMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoundID, foreign.ID) {
				local.R.Round = foreign
				if foreign.R == nil {
					foreign.R = &roundR{}
				}
				foreign.R.RoundTeamMatchups = append(foreign.R.RoundTeamMatchups, local)
				break
			}
		}
	}

	return nil
}

// LoadHomeTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamMatchupL) LoadHomeTeamTeam(e boil.Executor, singular bool, maybeTeamMatchup interface{}, mods queries.Applicator) error {
	var slice []*TeamMatchup
	var object *TeamMatchup

	if singular {
		object = maybeTeamMatchup.(*TeamMatchup)
	} else {
		slice = *maybeTeamMatchup.(*[]*TeamMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamMatchupR{}
		}
		if !queries.IsNil(object.HomeTeam) {
			args = append(args, object.HomeTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HomeTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HomeTeam) {
				args = append(args, obj.HomeTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HomeTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.HomeTeamTeamMatchups = append(foreign.R.HomeTeamTeamMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HomeTeam, foreign.ID) {
				local.R.HomeTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.HomeTeamTeamMatchups = append(foreign.R.HomeTeamTeamMatchups, local)
				break
			}
		}
	}

	return nil
}

// LoadAwayTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamMatchupL) LoadAwayTeamTeam(e boil.Executor, singular bool, maybeTeamMatchup interface{}, mods queries.Applicator) error {
	var slice []*TeamMatchup
	var object *TeamMatchup

	if singular {
		object = maybeTeamMatchup.(*TeamMatchup)
	} else {
		slice = *maybeTeamMatchup.(*[]*TeamMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamMatchupR{}
		}
		if !queries.IsNil(object.AwayTeam) {
			args = append(args, object.AwayTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AwayTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AwayTeam) {
				args = append(args, obj.AwayTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AwayTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.AwayTeamTeamMatchups = append(foreign.R.AwayTeamTeamMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AwayTeam, foreign.ID) {
				local.R.AwayTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.AwayTeamTeamMatchups = append(foreign.R.AwayTeamTeamMatchups, local)
				break
			}
		}
	}

	return nil
}

// LoadWinnerTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamMatchupL) LoadWinnerTeam(e boil.Executor, singular bool, maybeTeamMatchup interface{}, mods queries.Applicator) error {
	var slice []*TeamMatchup
	var object *TeamMatchup

	if singular {
		object = maybeTeamMatchup.(*TeamMatchup)
	} else {
		slice = *maybeTeamMatchup.(*[]*TeamMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamMatchupR{}
		}
		if !queries.IsNil(object.Winner) {
			args = append(args, object.Winner)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.Winner) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.Winner) {
				args = append(args, obj.Winner)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.WinnerTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.WinnerTeamMatchups = append(foreign.R.WinnerTeamMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.Winner, foreign.ID) {
				local.R.WinnerTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.WinnerTeamMatchups = append(foreign.R.WinnerTeamMatchups, local)
				break
			}
		}
	}

	return nil
}

// SetRound of the teamMatchup to the related item.
// Sets o.R.Round to related.
// Adds o to related.R.RoundTeamMatchups.
func (o *TeamMatchup) SetRound(exec boil.Executor, insert bool, related *Round) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TeamMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"round_id"}),
		strmangle.WhereClause("`", "`", 0, teamMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoundID, related.ID)
	if o.R == nil {
		o.R = &teamMatchupR{
			Round: related,
		}
	} else {
		o.R.Round = related
	}

	if related.R == nil {
		related.R = &roundR{
			RoundTeamMatchups: TeamMatchupSlice{o},
		}
	} else {
		related.R.RoundTeamMatchups = append(related.R.RoundTeamMatchups, o)
	}

	return nil
}

// RemoveRound relationship.
// Sets o.R.Round to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamMatchup) RemoveRound(exec boil.Executor, related *Round) error {
	var err error

	queries.SetScanner(&o.RoundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("round_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Round = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoundTeamMatchups {
		if queries.Equal(o.RoundID, ri.RoundID) {
			continue
		}

		ln := len(related.R.RoundTeamMatchups)
		if ln > 1 && i < ln-1 {
			related.R.RoundTeamMatchups[i] = related.R.RoundTeamMatchups[ln-1]
		}
		related.R.RoundTeamMatchups = related.R.RoundTeamMatchups[:ln-1]
		break
	}
	return nil
}

// SetHomeTeamTeam of the teamMatchup to the related item.
// Sets o.R.HomeTeamTeam to related.
// Adds o to related.R.HomeTeamTeamMatchups.
func (o *TeamMatchup) SetHomeTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TeamMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"home_team"}),
		strmangle.WhereClause("`", "`", 0, teamMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HomeTeam, related.ID)
	if o.R == nil {
		o.R = &teamMatchupR{
			HomeTeamTeam: related,
		}
	} else {
		o.R.HomeTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			HomeTeamTeamMatchups: TeamMatchupSlice{o},
		}
	} else {
		related.R.HomeTeamTeamMatchups = append(related.R.HomeTeamTeamMatchups, o)
	}

	return nil
}

// RemoveHomeTeamTeam relationship.
// Sets o.R.HomeTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamMatchup) RemoveHomeTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.HomeTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("home_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.HomeTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HomeTeamTeamMatchups {
		if queries.Equal(o.HomeTeam, ri.HomeTeam) {
			continue
		}

		ln := len(related.R.HomeTeamTeamMatchups)
		if ln > 1 && i < ln-1 {
			related.R.HomeTeamTeamMatchups[i] = related.R.HomeTeamTeamMatchups[ln-1]
		}
		related.R.HomeTeamTeamMatchups = related.R.HomeTeamTeamMatchups[:ln-1]
		break
	}
	return nil
}

// SetAwayTeamTeam of the teamMatchup to the related item.
// Sets o.R.AwayTeamTeam to related.
// Adds o to related.R.AwayTeamTeamMatchups.
func (o *TeamMatchup) SetAwayTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TeamMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"away_team"}),
		strmangle.WhereClause("`", "`", 0, teamMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AwayTeam, related.ID)
	if o.R == nil {
		o.R = &teamMatchupR{
			AwayTeamTeam: related,
		}
	} else {
		o.R.AwayTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			AwayTeamTeamMatchups: TeamMatchupSlice{o},
		}
	} else {
		related.R.AwayTeamTeamMatchups = append(related.R.AwayTeamTeamMatchups, o)
	}

	return nil
}

// RemoveAwayTeamTeam relationship.
// Sets o.R.AwayTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamMatchup) RemoveAwayTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.AwayTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("away_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AwayTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AwayTeamTeamMatchups {
		if queries.Equal(o.AwayTeam, ri.AwayTeam) {
			continue
		}

		ln := len(related.R.AwayTeamTeamMatchups)
		if ln > 1 && i < ln-1 {
			related.R.AwayTeamTeamMatchups[i] = related.R.AwayTeamTeamMatchups[ln-1]
		}
		related.R.AwayTeamTeamMatchups = related.R.AwayTeamTeamMatchups[:ln-1]
		break
	}
	return nil
}

// SetWinnerTeam of the teamMatchup to the related item.
// Sets o.R.WinnerTeam to related.
// Adds o to related.R.WinnerTeamMatchups.
func (o *TeamMatchup) SetWinnerTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TeamMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"winner"}),
		strmangle.WhereClause("`", "`", 0, teamMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.Winner, related.ID)
	if o.R == nil {
		o.R = &teamMatchupR{
			WinnerTeam: related,
		}
	} else {
		o.R.WinnerTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			WinnerTeamMatchups: TeamMatchupSlice{o},
		}
	} else {
		related.R.WinnerTeamMatchups = append(related.R.WinnerTeamMatchups, o)
	}

	return nil
}

// RemoveWinnerTeam relationship.
// Sets o.R.WinnerTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamMatchup) RemoveWinnerTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.Winner, nil)
	if _, err = o.Update(exec, boil.Whitelist("winner")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.WinnerTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.WinnerTeamMatchups {
		if queries.Equal(o.Winner, ri.Winner) {
			continue
		}

		ln := len(related.R.WinnerTeamMatchups)
		if ln > 1 && i < ln-1 {
			related.R.WinnerTeamMatchups[i] = related.R.WinnerTeamMatchups[ln-1]
		}
		related.R.WinnerTeamMatchups = related.R.WinnerTeamMatchups[:ln-1]
		break
	}
	return nil
}

// TeamMatchups retrieves all the records using an executor.
func TeamMatchups(mods ...qm.QueryMod) teamMatchupQuery {
	mods = append(mods, qm.From("`TeamMatchups`"))
	return teamMatchupQuery{NewQuery(mods...)}
}

// FindTeamMatchup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamMatchup(exec boil.Executor, iD int, selectCols ...string) (*TeamMatchup, error) {
	teamMatchupObj := &TeamMatchup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TeamMatchups` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, teamMatchupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from TeamMatchups")
	}

	return teamMatchupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamMatchup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TeamMatchups provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamMatchupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamMatchupInsertCacheMut.RLock()
	cache, cached := teamMatchupInsertCache[key]
	teamMatchupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamMatchupAllColumns,
			teamMatchupColumnsWithDefault,
			teamMatchupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamMatchupType, teamMatchupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamMatchupType, teamMatchupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TeamMatchups` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TeamMatchups` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TeamMatchups` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, teamMatchupPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into TeamMatchups")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == teamMatchupMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for TeamMatchups")
	}

CacheNoHooks:
	if !cached {
		teamMatchupInsertCacheMut.Lock()
		teamMatchupInsertCache[key] = cache
		teamMatchupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TeamMatchup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamMatchup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamMatchupUpdateCacheMut.RLock()
	cache, cached := teamMatchupUpdateCache[key]
	teamMatchupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamMatchupAllColumns,
			teamMatchupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update TeamMatchups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TeamMatchups` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, teamMatchupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamMatchupType, teamMatchupMapping, append(wl, teamMatchupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update TeamMatchups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for TeamMatchups")
	}

	if !cached {
		teamMatchupUpdateCacheMut.Lock()
		teamMatchupUpdateCache[key] = cache
		teamMatchupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamMatchupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for TeamMatchups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for TeamMatchups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamMatchupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamMatchupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TeamMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamMatchupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in teamMatchup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all teamMatchup")
	}
	return rowsAff, nil
}

var mySQLTeamMatchupUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamMatchup) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TeamMatchups provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamMatchupColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTeamMatchupUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamMatchupUpsertCacheMut.RLock()
	cache, cached := teamMatchupUpsertCache[key]
	teamMatchupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamMatchupAllColumns,
			teamMatchupColumnsWithDefault,
			teamMatchupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamMatchupAllColumns,
			teamMatchupPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert TeamMatchups, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`TeamMatchups`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TeamMatchups` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(teamMatchupType, teamMatchupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamMatchupType, teamMatchupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for TeamMatchups")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == teamMatchupMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(teamMatchupType, teamMatchupMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for TeamMatchups")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for TeamMatchups")
	}

CacheNoHooks:
	if !cached {
		teamMatchupUpsertCacheMut.Lock()
		teamMatchupUpsertCache[key] = cache
		teamMatchupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TeamMatchup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamMatchup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no TeamMatchup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamMatchupPrimaryKeyMapping)
	sql := "DELETE FROM `TeamMatchups` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from TeamMatchups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for TeamMatchups")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamMatchupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no teamMatchupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from TeamMatchups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TeamMatchups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamMatchupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamMatchupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamMatchupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TeamMatchups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamMatchupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from teamMatchup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TeamMatchups")
	}

	if len(teamMatchupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamMatchup) Reload(exec boil.Executor) error {
	ret, err := FindTeamMatchup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamMatchupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamMatchupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamMatchupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TeamMatchups`.* FROM `TeamMatchups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamMatchupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in TeamMatchupSlice")
	}

	*o = slice

	return nil
}

// TeamMatchupExists checks if the TeamMatchup row exists.
func TeamMatchupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TeamMatchups` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if TeamMatchups exists")
	}

	return exists, nil
}
