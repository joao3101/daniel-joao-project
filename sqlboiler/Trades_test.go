// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTrades(t *testing.T) {
	t.Parallel()

	query := Trades()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTradesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Trades().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TradeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Trade exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TradeExists to return true, but got false.")
	}
}

func testTradesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tradeFound, err := FindTrade(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tradeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTradesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Trades().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTradesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Trades().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTradesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradeOne := &Trade{}
	tradeTwo := &Trade{}
	if err = randomize.Struct(seed, tradeOne, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeTwo, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = tradeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Trades().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTradesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tradeOne := &Trade{}
	tradeTwo := &Trade{}
	if err = randomize.Struct(seed, tradeOne, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}
	if err = randomize.Struct(seed, tradeTwo, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = tradeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tradeBeforeInsertHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeAfterInsertHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeAfterSelectHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeBeforeUpdateHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeAfterUpdateHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeBeforeDeleteHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeAfterDeleteHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeBeforeUpsertHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func tradeAfterUpsertHook(e boil.Executor, o *Trade) error {
	*o = Trade{}
	return nil
}

func testTradesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Trade{}
	o := &Trade{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tradeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Trade object: %s", err)
	}

	AddTradeHook(boil.BeforeInsertHook, tradeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tradeBeforeInsertHooks = []TradeHook{}

	AddTradeHook(boil.AfterInsertHook, tradeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tradeAfterInsertHooks = []TradeHook{}

	AddTradeHook(boil.AfterSelectHook, tradeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tradeAfterSelectHooks = []TradeHook{}

	AddTradeHook(boil.BeforeUpdateHook, tradeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tradeBeforeUpdateHooks = []TradeHook{}

	AddTradeHook(boil.AfterUpdateHook, tradeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tradeAfterUpdateHooks = []TradeHook{}

	AddTradeHook(boil.BeforeDeleteHook, tradeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tradeBeforeDeleteHooks = []TradeHook{}

	AddTradeHook(boil.AfterDeleteHook, tradeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tradeAfterDeleteHooks = []TradeHook{}

	AddTradeHook(boil.BeforeUpsertHook, tradeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tradeBeforeUpsertHooks = []TradeHook{}

	AddTradeHook(boil.AfterUpsertHook, tradeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tradeAfterUpsertHooks = []TradeHook{}
}

func testTradesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(tradeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradeToManyTradeTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b, c TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TradeID, a.ID)
	queries.Assign(&c.TradeID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TradeTradePlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TradeID, b.TradeID) {
			bFound = true
		}
		if queries.Equal(v.TradeID, c.TradeID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TradeSlice{&a}
	if err = a.L.LoadTradeTradePlayers(tx, false, (*[]*Trade)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TradeTradePlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TradeTradePlayers = nil
	if err = a.L.LoadTradeTradePlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TradeTradePlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTradeToManyAddOpTradeTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TradePlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTradeTradePlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TradeID) {
			t.Error("foreign key was wrong value", a.ID, first.TradeID)
		}
		if !queries.Equal(a.ID, second.TradeID) {
			t.Error("foreign key was wrong value", a.ID, second.TradeID)
		}

		if first.R.Trade != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Trade != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TradeTradePlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TradeTradePlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TradeTradePlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTradeToManySetOpTradeTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTradeTradePlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TradeTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTradeTradePlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TradeTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TradeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TradeID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TradeID) {
		t.Error("foreign key was wrong value", a.ID, d.TradeID)
	}
	if !queries.Equal(a.ID, e.TradeID) {
		t.Error("foreign key was wrong value", a.ID, e.TradeID)
	}

	if b.R.Trade != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Trade != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Trade != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Trade != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TradeTradePlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TradeTradePlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTradeToManyRemoveOpTradeTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTradeTradePlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TradeTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTradeTradePlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TradeTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TradeID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TradeID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Trade != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Trade != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Trade != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Trade != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TradeTradePlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TradeTradePlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TradeTradePlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTradeToOneTeamUsingFromTeamTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Trade
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FromTeam, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FromTeamTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeSlice{&local}
	if err = local.L.LoadFromTeamTeam(tx, false, (*[]*Trade)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FromTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FromTeamTeam = nil
	if err = local.L.LoadFromTeamTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FromTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeToOneTeamUsingToTeamTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Trade
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ToTeam, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ToTeamTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradeSlice{&local}
	if err = local.L.LoadToTeamTeam(tx, false, (*[]*Trade)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ToTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ToTeamTeam = nil
	if err = local.L.LoadToTeamTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ToTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradeToOneSetOpTeamUsingFromTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetFromTeamTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FromTeamTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FromTeamTrades[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FromTeam, x.ID) {
			t.Error("foreign key was wrong value", a.FromTeam)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FromTeam))
		reflect.Indirect(reflect.ValueOf(&a.FromTeam)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FromTeam, x.ID) {
			t.Error("foreign key was wrong value", a.FromTeam, x.ID)
		}
	}
}

func testTradeToOneRemoveOpTeamUsingFromTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFromTeamTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFromTeamTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FromTeamTeam().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FromTeamTeam != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FromTeam) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FromTeamTrades) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTradeToOneSetOpTeamUsingToTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetToTeamTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ToTeamTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ToTeamTrades[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ToTeam, x.ID) {
			t.Error("foreign key was wrong value", a.ToTeam)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ToTeam))
		reflect.Indirect(reflect.ValueOf(&a.ToTeam)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ToTeam, x.ID) {
			t.Error("foreign key was wrong value", a.ToTeam, x.ID)
		}
	}
}

func testTradeToOneRemoveOpTeamUsingToTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Trade
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetToTeamTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveToTeamTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ToTeamTeam().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ToTeamTeam != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ToTeam) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ToTeamTrades) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTradesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTradesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTradesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Trades().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tradeDBTypes = map[string]string{`ID`: `integer`, `FromTeam`: `integer`, `ToTeam`: `integer`, `Status`: `integer`, `CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_            = bytes.MinRead
)

func testTradesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tradePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tradeAllColumns) == len(tradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTradesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tradeAllColumns) == len(tradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Trade{}
	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradeDBTypes, true, tradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tradeAllColumns, tradePrimaryKeyColumns) {
		fields = tradeAllColumns
	} else {
		fields = strmangle.SetComplement(
			tradeAllColumns,
			tradePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TradeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTradesUpsert(t *testing.T) {
	t.Parallel()

	if len(tradeAllColumns) == len(tradePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Trade{}
	if err = randomize.Struct(seed, &o, tradeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Trade: %s", err)
	}

	count, err := Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tradeDBTypes, false, tradePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Trade: %s", err)
	}

	count, err = Trades().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
