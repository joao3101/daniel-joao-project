// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTeamRounds(t *testing.T) {
	t.Parallel()

	query := TeamRounds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTeamRoundsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamRoundsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TeamRounds().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamRoundsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamRoundSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamRoundsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TeamRoundExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TeamRound exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeamRoundExists to return true, but got false.")
	}
}

func testTeamRoundsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	teamRoundFound, err := FindTeamRound(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if teamRoundFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTeamRoundsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TeamRounds().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTeamRoundsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TeamRounds().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeamRoundsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teamRoundOne := &TeamRound{}
	teamRoundTwo := &TeamRound{}
	if err = randomize.Struct(seed, teamRoundOne, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}
	if err = randomize.Struct(seed, teamRoundTwo, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamRoundOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamRoundTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TeamRounds().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeamRoundsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teamRoundOne := &TeamRound{}
	teamRoundTwo := &TeamRound{}
	if err = randomize.Struct(seed, teamRoundOne, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}
	if err = randomize.Struct(seed, teamRoundTwo, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamRoundOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamRoundTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func teamRoundBeforeInsertHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundAfterInsertHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundAfterSelectHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundBeforeUpdateHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundAfterUpdateHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundBeforeDeleteHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundAfterDeleteHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundBeforeUpsertHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func teamRoundAfterUpsertHook(e boil.Executor, o *TeamRound) error {
	*o = TeamRound{}
	return nil
}

func testTeamRoundsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TeamRound{}
	o := &TeamRound{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teamRoundDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TeamRound object: %s", err)
	}

	AddTeamRoundHook(boil.BeforeInsertHook, teamRoundBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teamRoundBeforeInsertHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.AfterInsertHook, teamRoundAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teamRoundAfterInsertHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.AfterSelectHook, teamRoundAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teamRoundAfterSelectHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.BeforeUpdateHook, teamRoundBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teamRoundBeforeUpdateHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.AfterUpdateHook, teamRoundAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teamRoundAfterUpdateHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.BeforeDeleteHook, teamRoundBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teamRoundBeforeDeleteHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.AfterDeleteHook, teamRoundAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teamRoundAfterDeleteHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.BeforeUpsertHook, teamRoundBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teamRoundBeforeUpsertHooks = []TeamRoundHook{}

	AddTeamRoundHook(boil.AfterUpsertHook, teamRoundAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teamRoundAfterUpsertHooks = []TeamRoundHook{}
}

func testTeamRoundsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamRoundsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(teamRoundColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamRoundToManyTeamRoundTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b, c TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamRoundPlayerDBTypes, false, teamRoundPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamRoundPlayerDBTypes, false, teamRoundPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamRoundID, a.ID)
	queries.Assign(&c.TeamRoundID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamRoundTeamRoundPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamRoundID, b.TeamRoundID) {
			bFound = true
		}
		if queries.Equal(v.TeamRoundID, c.TeamRoundID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamRoundSlice{&a}
	if err = a.L.LoadTeamRoundTeamRoundPlayers(tx, false, (*[]*TeamRound)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamRoundTeamRoundPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamRoundTeamRoundPlayers = nil
	if err = a.L.LoadTeamRoundTeamRoundPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamRoundTeamRoundPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamRoundToManyAddOpTeamRoundTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b, c, d, e TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRoundPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundPlayerDBTypes, false, strmangle.SetComplement(teamRoundPlayerPrimaryKeyColumns, teamRoundPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamRoundPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamRoundTeamRoundPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamRoundID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamRoundID)
		}
		if !queries.Equal(a.ID, second.TeamRoundID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamRoundID)
		}

		if first.R.TeamRound != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TeamRound != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamRoundTeamRoundPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamRoundTeamRoundPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamRoundTeamRoundPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamRoundToManySetOpTeamRoundTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b, c, d, e TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRoundPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundPlayerDBTypes, false, strmangle.SetComplement(teamRoundPlayerPrimaryKeyColumns, teamRoundPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTeamRoundTeamRoundPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamRoundTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTeamRoundTeamRoundPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamRoundTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamRoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamRoundID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamRoundID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamRoundID)
	}
	if !queries.Equal(a.ID, e.TeamRoundID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamRoundID)
	}

	if b.R.TeamRound != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TeamRound != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TeamRound != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TeamRound != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TeamRoundTeamRoundPlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TeamRoundTeamRoundPlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamRoundToManyRemoveOpTeamRoundTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b, c, d, e TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRoundPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundPlayerDBTypes, false, strmangle.SetComplement(teamRoundPlayerPrimaryKeyColumns, teamRoundPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTeamRoundTeamRoundPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamRoundTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTeamRoundTeamRoundPlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamRoundTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamRoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamRoundID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TeamRound != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TeamRound != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TeamRound != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TeamRound != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TeamRoundTeamRoundPlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TeamRoundTeamRoundPlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TeamRoundTeamRoundPlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamRoundToOneRoundUsingRound(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TeamRound
	var foreign Round

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.RoundID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Round().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamRoundSlice{&local}
	if err = local.L.LoadRound(tx, false, (*[]*TeamRound)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Round == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Round = nil
	if err = local.L.LoadRound(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Round == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeamRoundToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TeamRound
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TeamID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamRoundSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*TeamRound)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeamRoundToOneSetOpRoundUsingRound(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b, c Round

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Round{&b, &c} {
		err = a.SetRound(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Round != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoundTeamRounds[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.RoundID, x.ID) {
			t.Error("foreign key was wrong value", a.RoundID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.RoundID))
		reflect.Indirect(reflect.ValueOf(&a.RoundID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.RoundID, x.ID) {
			t.Error("foreign key was wrong value", a.RoundID, x.ID)
		}
	}
}

func testTeamRoundToOneRemoveOpRoundUsingRound(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b Round

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetRound(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveRound(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Round().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Round != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.RoundID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.RoundTeamRounds) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTeamRoundToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TeamTeamRounds[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TeamID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testTeamRoundToOneRemoveOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamRound
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Team().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Team != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TeamID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TeamTeamRounds) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTeamRoundsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTeamRoundsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamRoundSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTeamRoundsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TeamRounds().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teamRoundDBTypes = map[string]string{`ID`: `integer`, `RoundID`: `integer`, `TeamID`: `integer`, `Score`: `integer`, `CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_                = bytes.MinRead
)

func testTeamRoundsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(teamRoundPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(teamRoundAllColumns) == len(teamRoundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTeamRoundsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teamRoundAllColumns) == len(teamRoundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TeamRound{}
	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamRoundDBTypes, true, teamRoundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teamRoundAllColumns, teamRoundPrimaryKeyColumns) {
		fields = teamRoundAllColumns
	} else {
		fields = strmangle.SetComplement(
			teamRoundAllColumns,
			teamRoundPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TeamRoundSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTeamRoundsUpsert(t *testing.T) {
	t.Parallel()

	if len(teamRoundAllColumns) == len(teamRoundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TeamRound{}
	if err = randomize.Struct(seed, &o, teamRoundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TeamRound: %s", err)
	}

	count, err := TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, teamRoundDBTypes, false, teamRoundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamRound struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TeamRound: %s", err)
	}

	count, err = TeamRounds().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
