// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRounds(t *testing.T) {
	t.Parallel()

	query := Rounds()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoundsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoundsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Rounds().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoundsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoundSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoundsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoundExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Round exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoundExists to return true, but got false.")
	}
}

func testRoundsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roundFound, err := FindRound(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if roundFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoundsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Rounds().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoundsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Rounds().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoundsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roundOne := &Round{}
	roundTwo := &Round{}
	if err = randomize.Struct(seed, roundOne, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}
	if err = randomize.Struct(seed, roundTwo, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = roundOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roundTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rounds().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoundsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roundOne := &Round{}
	roundTwo := &Round{}
	if err = randomize.Struct(seed, roundOne, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}
	if err = randomize.Struct(seed, roundTwo, roundDBTypes, false, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = roundOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roundTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roundBeforeInsertHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterInsertHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterSelectHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundBeforeUpdateHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterUpdateHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundBeforeDeleteHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterDeleteHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundBeforeUpsertHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func roundAfterUpsertHook(e boil.Executor, o *Round) error {
	*o = Round{}
	return nil
}

func testRoundsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Round{}
	o := &Round{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roundDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Round object: %s", err)
	}

	AddRoundHook(boil.BeforeInsertHook, roundBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roundBeforeInsertHooks = []RoundHook{}

	AddRoundHook(boil.AfterInsertHook, roundAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roundAfterInsertHooks = []RoundHook{}

	AddRoundHook(boil.AfterSelectHook, roundAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roundAfterSelectHooks = []RoundHook{}

	AddRoundHook(boil.BeforeUpdateHook, roundBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roundBeforeUpdateHooks = []RoundHook{}

	AddRoundHook(boil.AfterUpdateHook, roundAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roundAfterUpdateHooks = []RoundHook{}

	AddRoundHook(boil.BeforeDeleteHook, roundBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roundBeforeDeleteHooks = []RoundHook{}

	AddRoundHook(boil.AfterDeleteHook, roundAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roundAfterDeleteHooks = []RoundHook{}

	AddRoundHook(boil.BeforeUpsertHook, roundBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roundBeforeUpsertHooks = []RoundHook{}

	AddRoundHook(boil.AfterUpsertHook, roundAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roundAfterUpsertHooks = []RoundHook{}
}

func testRoundsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoundsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(roundColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoundToManyRoundClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, clubMatchupDBTypes, false, clubMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubMatchupDBTypes, false, clubMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RoundID, a.ID)
	queries.Assign(&c.RoundID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoundClubMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RoundID, b.RoundID) {
			bFound = true
		}
		if queries.Equal(v.RoundID, c.RoundID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoundSlice{&a}
	if err = a.L.LoadRoundClubMatchups(tx, false, (*[]*Round)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundClubMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoundClubMatchups = nil
	if err = a.L.LoadRoundClubMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundClubMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoundToManyRoundPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playerRoundDBTypes, false, playerRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerRoundDBTypes, false, playerRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RoundID, a.ID)
	queries.Assign(&c.RoundID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoundPlayerRounds().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RoundID, b.RoundID) {
			bFound = true
		}
		if queries.Equal(v.RoundID, c.RoundID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoundSlice{&a}
	if err = a.L.LoadRoundPlayerRounds(tx, false, (*[]*Round)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundPlayerRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoundPlayerRounds = nil
	if err = a.L.LoadRoundPlayerRounds(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundPlayerRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoundToManyRoundTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RoundID, a.ID)
	queries.Assign(&c.RoundID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoundTeamMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RoundID, b.RoundID) {
			bFound = true
		}
		if queries.Equal(v.RoundID, c.RoundID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoundSlice{&a}
	if err = a.L.LoadRoundTeamMatchups(tx, false, (*[]*Round)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoundTeamMatchups = nil
	if err = a.L.LoadRoundTeamMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoundToManyRoundTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.RoundID, a.ID)
	queries.Assign(&c.RoundID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.RoundTeamRounds().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.RoundID, b.RoundID) {
			bFound = true
		}
		if queries.Equal(v.RoundID, c.RoundID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := RoundSlice{&a}
	if err = a.L.LoadRoundTeamRounds(tx, false, (*[]*Round)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundTeamRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.RoundTeamRounds = nil
	if err = a.L.LoadRoundTeamRounds(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.RoundTeamRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testRoundToManyAddOpRoundClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ClubMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoundClubMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RoundID) {
			t.Error("foreign key was wrong value", a.ID, first.RoundID)
		}
		if !queries.Equal(a.ID, second.RoundID) {
			t.Error("foreign key was wrong value", a.ID, second.RoundID)
		}

		if first.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoundClubMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoundClubMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoundClubMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoundToManySetOpRoundClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoundClubMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoundClubMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RoundID) {
		t.Error("foreign key was wrong value", a.ID, d.RoundID)
	}
	if !queries.Equal(a.ID, e.RoundID) {
		t.Error("foreign key was wrong value", a.ID, e.RoundID)
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoundClubMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoundClubMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoundToManyRemoveOpRoundClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoundClubMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoundClubMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoundClubMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoundClubMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoundClubMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoundToManyAddOpRoundPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerRoundDBTypes, false, strmangle.SetComplement(playerRoundPrimaryKeyColumns, playerRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlayerRound{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoundPlayerRounds(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RoundID) {
			t.Error("foreign key was wrong value", a.ID, first.RoundID)
		}
		if !queries.Equal(a.ID, second.RoundID) {
			t.Error("foreign key was wrong value", a.ID, second.RoundID)
		}

		if first.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoundPlayerRounds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoundPlayerRounds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoundPlayerRounds().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoundToManySetOpRoundPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerRoundDBTypes, false, strmangle.SetComplement(playerRoundPrimaryKeyColumns, playerRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoundPlayerRounds(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoundPlayerRounds(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RoundID) {
		t.Error("foreign key was wrong value", a.ID, d.RoundID)
	}
	if !queries.Equal(a.ID, e.RoundID) {
		t.Error("foreign key was wrong value", a.ID, e.RoundID)
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoundPlayerRounds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoundPlayerRounds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoundToManyRemoveOpRoundPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerRoundDBTypes, false, strmangle.SetComplement(playerRoundPrimaryKeyColumns, playerRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoundPlayerRounds(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoundPlayerRounds(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoundPlayerRounds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoundPlayerRounds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoundPlayerRounds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoundToManyAddOpRoundTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoundTeamMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RoundID) {
			t.Error("foreign key was wrong value", a.ID, first.RoundID)
		}
		if !queries.Equal(a.ID, second.RoundID) {
			t.Error("foreign key was wrong value", a.ID, second.RoundID)
		}

		if first.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoundTeamMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoundTeamMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoundTeamMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoundToManySetOpRoundTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoundTeamMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoundTeamMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RoundID) {
		t.Error("foreign key was wrong value", a.ID, d.RoundID)
	}
	if !queries.Equal(a.ID, e.RoundID) {
		t.Error("foreign key was wrong value", a.ID, e.RoundID)
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoundTeamMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoundTeamMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoundToManyRemoveOpRoundTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoundTeamMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoundTeamMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoundTeamMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoundTeamMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoundTeamMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoundToManyAddOpRoundTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamRound{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRoundTeamRounds(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.RoundID) {
			t.Error("foreign key was wrong value", a.ID, first.RoundID)
		}
		if !queries.Equal(a.ID, second.RoundID) {
			t.Error("foreign key was wrong value", a.ID, second.RoundID)
		}

		if first.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Round != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.RoundTeamRounds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.RoundTeamRounds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RoundTeamRounds().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testRoundToManySetOpRoundTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetRoundTeamRounds(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRoundTeamRounds(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.RoundID) {
		t.Error("foreign key was wrong value", a.ID, d.RoundID)
	}
	if !queries.Equal(a.ID, e.RoundID) {
		t.Error("foreign key was wrong value", a.ID, e.RoundID)
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Round != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.RoundTeamRounds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.RoundTeamRounds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testRoundToManyRemoveOpRoundTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Round
	var b, c, d, e TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roundDBTypes, false, strmangle.SetComplement(roundPrimaryKeyColumns, roundColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddRoundTeamRounds(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RoundTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRoundTeamRounds(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RoundTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.RoundID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.RoundID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Round != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Round != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.RoundTeamRounds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.RoundTeamRounds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.RoundTeamRounds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testRoundsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testRoundsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoundSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testRoundsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Rounds().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roundDBTypes = map[string]string{`ID`: `int`, `RoundName`: `varchar`, `RoundNumber`: `int`, `StartDate`: `timestamp`, `EndDate`: `timestamp`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_            = bytes.MinRead
)

func testRoundsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roundAllColumns) == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roundDBTypes, true, roundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoundsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roundAllColumns) == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Round{}
	if err = randomize.Struct(seed, o, roundDBTypes, true, roundColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roundDBTypes, true, roundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roundAllColumns, roundPrimaryKeyColumns) {
		fields = roundAllColumns
	} else {
		fields = strmangle.SetComplement(
			roundAllColumns,
			roundPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoundSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoundsUpsert(t *testing.T) {
	t.Parallel()

	if len(roundAllColumns) == len(roundPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLRoundUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Round{}
	if err = randomize.Struct(seed, &o, roundDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Round: %s", err)
	}

	count, err := Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roundDBTypes, false, roundPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Round struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Round: %s", err)
	}

	count, err = Rounds().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
