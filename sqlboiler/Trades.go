// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Trade is an object representing the database table.
type Trade struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FromTeam  null.Int  `boil:"from_team" json:"from_team,omitempty" toml:"from_team" yaml:"from_team,omitempty"`
	ToTeam    null.Int  `boil:"to_team" json:"to_team,omitempty" toml:"to_team" yaml:"to_team,omitempty"`
	Status    null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *tradeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradeColumns = struct {
	ID        string
	FromTeam  string
	ToTeam    string
	Status    string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	FromTeam:  "from_team",
	ToTeam:    "to_team",
	Status:    "status",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

var TradeWhere = struct {
	ID        whereHelperint
	FromTeam  whereHelpernull_Int
	ToTeam    whereHelpernull_Int
	Status    whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"Trades\".\"id\""},
	FromTeam:  whereHelpernull_Int{field: "\"Trades\".\"from_team\""},
	ToTeam:    whereHelpernull_Int{field: "\"Trades\".\"to_team\""},
	Status:    whereHelpernull_Int{field: "\"Trades\".\"status\""},
	CreatedAt: whereHelpertime_Time{field: "\"Trades\".\"created_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"Trades\".\"deleted_at\""},
}

// TradeRels is where relationship names are stored.
var TradeRels = struct {
	FromTeamTeam      string
	ToTeamTeam        string
	TradeTradePlayers string
}{
	FromTeamTeam:      "FromTeamTeam",
	ToTeamTeam:        "ToTeamTeam",
	TradeTradePlayers: "TradeTradePlayers",
}

// tradeR is where relationships are stored.
type tradeR struct {
	FromTeamTeam      *Team            `boil:"FromTeamTeam" json:"FromTeamTeam" toml:"FromTeamTeam" yaml:"FromTeamTeam"`
	ToTeamTeam        *Team            `boil:"ToTeamTeam" json:"ToTeamTeam" toml:"ToTeamTeam" yaml:"ToTeamTeam"`
	TradeTradePlayers TradePlayerSlice `boil:"TradeTradePlayers" json:"TradeTradePlayers" toml:"TradeTradePlayers" yaml:"TradeTradePlayers"`
}

// NewStruct creates a new relationship struct
func (*tradeR) NewStruct() *tradeR {
	return &tradeR{}
}

// tradeL is where Load methods for each relationship are stored.
type tradeL struct{}

var (
	tradeAllColumns            = []string{"id", "from_team", "to_team", "status", "created_at", "deleted_at"}
	tradeColumnsWithoutDefault = []string{"from_team", "to_team", "status", "created_at", "deleted_at"}
	tradeColumnsWithDefault    = []string{"id"}
	tradePrimaryKeyColumns     = []string{"id"}
)

type (
	// TradeSlice is an alias for a slice of pointers to Trade.
	// This should generally be used opposed to []Trade.
	TradeSlice []*Trade
	// TradeHook is the signature for custom Trade hook methods
	TradeHook func(boil.Executor, *Trade) error

	tradeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradeType                 = reflect.TypeOf(&Trade{})
	tradeMapping              = queries.MakeStructMapping(tradeType)
	tradePrimaryKeyMapping, _ = queries.BindMapping(tradeType, tradeMapping, tradePrimaryKeyColumns)
	tradeInsertCacheMut       sync.RWMutex
	tradeInsertCache          = make(map[string]insertCache)
	tradeUpdateCacheMut       sync.RWMutex
	tradeUpdateCache          = make(map[string]updateCache)
	tradeUpsertCacheMut       sync.RWMutex
	tradeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tradeBeforeInsertHooks []TradeHook
var tradeBeforeUpdateHooks []TradeHook
var tradeBeforeDeleteHooks []TradeHook
var tradeBeforeUpsertHooks []TradeHook

var tradeAfterInsertHooks []TradeHook
var tradeAfterSelectHooks []TradeHook
var tradeAfterUpdateHooks []TradeHook
var tradeAfterDeleteHooks []TradeHook
var tradeAfterUpsertHooks []TradeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Trade) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Trade) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Trade) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Trade) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Trade) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Trade) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Trade) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Trade) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Trade) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTradeHook registers your hook function for all future operations.
func AddTradeHook(hookPoint boil.HookPoint, tradeHook TradeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tradeBeforeInsertHooks = append(tradeBeforeInsertHooks, tradeHook)
	case boil.BeforeUpdateHook:
		tradeBeforeUpdateHooks = append(tradeBeforeUpdateHooks, tradeHook)
	case boil.BeforeDeleteHook:
		tradeBeforeDeleteHooks = append(tradeBeforeDeleteHooks, tradeHook)
	case boil.BeforeUpsertHook:
		tradeBeforeUpsertHooks = append(tradeBeforeUpsertHooks, tradeHook)
	case boil.AfterInsertHook:
		tradeAfterInsertHooks = append(tradeAfterInsertHooks, tradeHook)
	case boil.AfterSelectHook:
		tradeAfterSelectHooks = append(tradeAfterSelectHooks, tradeHook)
	case boil.AfterUpdateHook:
		tradeAfterUpdateHooks = append(tradeAfterUpdateHooks, tradeHook)
	case boil.AfterDeleteHook:
		tradeAfterDeleteHooks = append(tradeAfterDeleteHooks, tradeHook)
	case boil.AfterUpsertHook:
		tradeAfterUpsertHooks = append(tradeAfterUpsertHooks, tradeHook)
	}
}

// One returns a single trade record from the query.
func (q tradeQuery) One(exec boil.Executor) (*Trade, error) {
	o := &Trade{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Trades")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Trade records from the query.
func (q tradeQuery) All(exec boil.Executor) (TradeSlice, error) {
	var o []*Trade

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Trade slice")
	}

	if len(tradeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Trade records in the query.
func (q tradeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Trades rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Trades exists")
	}

	return count > 0, nil
}

// FromTeamTeam pointed to by the foreign key.
func (o *Trade) FromTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "\"Teams\"")

	return query
}

// ToTeamTeam pointed to by the foreign key.
func (o *Trade) ToTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "\"Teams\"")

	return query
}

// TradeTradePlayers retrieves all the TradePlayer's TradePlayers with an executor via trade_id column.
func (o *Trade) TradeTradePlayers(mods ...qm.QueryMod) tradePlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TradePlayers\".\"trade_id\"=?", o.ID),
	)

	query := TradePlayers(queryMods...)
	queries.SetFrom(query.Query, "\"TradePlayers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TradePlayers\".*"})
	}

	return query
}

// LoadFromTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeL) LoadFromTeamTeam(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		if !queries.IsNil(object.FromTeam) {
			args = append(args, object.FromTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FromTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FromTeam) {
				args = append(args, obj.FromTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(tradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.FromTeamTrades = append(foreign.R.FromTeamTrades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FromTeam, foreign.ID) {
				local.R.FromTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.FromTeamTrades = append(foreign.R.FromTeamTrades, local)
				break
			}
		}
	}

	return nil
}

// LoadToTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradeL) LoadToTeamTeam(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		if !queries.IsNil(object.ToTeam) {
			args = append(args, object.ToTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ToTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ToTeam) {
				args = append(args, obj.ToTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(tradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.ToTeamTrades = append(foreign.R.ToTeamTrades, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ToTeam, foreign.ID) {
				local.R.ToTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.ToTeamTrades = append(foreign.R.ToTeamTrades, local)
				break
			}
		}
	}

	return nil
}

// LoadTradeTradePlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tradeL) LoadTradeTradePlayers(e boil.Executor, singular bool, maybeTrade interface{}, mods queries.Applicator) error {
	var slice []*Trade
	var object *Trade

	if singular {
		object = maybeTrade.(*Trade)
	} else {
		slice = *maybeTrade.(*[]*Trade)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradeR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TradePlayers`),
		qm.WhereIn(`TradePlayers.trade_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TradePlayers")
	}

	var resultSlice []*TradePlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TradePlayers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TradePlayers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TradePlayers")
	}

	if len(tradePlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TradeTradePlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tradePlayerR{}
			}
			foreign.R.Trade = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TradeID) {
				local.R.TradeTradePlayers = append(local.R.TradeTradePlayers, foreign)
				if foreign.R == nil {
					foreign.R = &tradePlayerR{}
				}
				foreign.R.Trade = local
				break
			}
		}
	}

	return nil
}

// SetFromTeamTeam of the trade to the related item.
// Sets o.R.FromTeamTeam to related.
// Adds o to related.R.FromTeamTrades.
func (o *Trade) SetFromTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Trades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_team"}),
		strmangle.WhereClause("\"", "\"", 2, tradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FromTeam, related.ID)
	if o.R == nil {
		o.R = &tradeR{
			FromTeamTeam: related,
		}
	} else {
		o.R.FromTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			FromTeamTrades: TradeSlice{o},
		}
	} else {
		related.R.FromTeamTrades = append(related.R.FromTeamTrades, o)
	}

	return nil
}

// RemoveFromTeamTeam relationship.
// Sets o.R.FromTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Trade) RemoveFromTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.FromTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("from_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FromTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FromTeamTrades {
		if queries.Equal(o.FromTeam, ri.FromTeam) {
			continue
		}

		ln := len(related.R.FromTeamTrades)
		if ln > 1 && i < ln-1 {
			related.R.FromTeamTrades[i] = related.R.FromTeamTrades[ln-1]
		}
		related.R.FromTeamTrades = related.R.FromTeamTrades[:ln-1]
		break
	}
	return nil
}

// SetToTeamTeam of the trade to the related item.
// Sets o.R.ToTeamTeam to related.
// Adds o to related.R.ToTeamTrades.
func (o *Trade) SetToTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Trades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_team"}),
		strmangle.WhereClause("\"", "\"", 2, tradePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ToTeam, related.ID)
	if o.R == nil {
		o.R = &tradeR{
			ToTeamTeam: related,
		}
	} else {
		o.R.ToTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			ToTeamTrades: TradeSlice{o},
		}
	} else {
		related.R.ToTeamTrades = append(related.R.ToTeamTrades, o)
	}

	return nil
}

// RemoveToTeamTeam relationship.
// Sets o.R.ToTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Trade) RemoveToTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.ToTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("to_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ToTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ToTeamTrades {
		if queries.Equal(o.ToTeam, ri.ToTeam) {
			continue
		}

		ln := len(related.R.ToTeamTrades)
		if ln > 1 && i < ln-1 {
			related.R.ToTeamTrades[i] = related.R.ToTeamTrades[ln-1]
		}
		related.R.ToTeamTrades = related.R.ToTeamTrades[:ln-1]
		break
	}
	return nil
}

// AddTradeTradePlayers adds the given related objects to the existing relationships
// of the Trade, optionally inserting them as new records.
// Appends related to o.R.TradeTradePlayers.
// Sets related.R.Trade appropriately.
func (o *Trade) AddTradeTradePlayers(exec boil.Executor, insert bool, related ...*TradePlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TradeID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TradePlayers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"trade_id"}),
				strmangle.WhereClause("\"", "\"", 2, tradePlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TradeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &tradeR{
			TradeTradePlayers: related,
		}
	} else {
		o.R.TradeTradePlayers = append(o.R.TradeTradePlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tradePlayerR{
				Trade: o,
			}
		} else {
			rel.R.Trade = o
		}
	}
	return nil
}

// SetTradeTradePlayers removes all previously related items of the
// Trade replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Trade's TradeTradePlayers accordingly.
// Replaces o.R.TradeTradePlayers with related.
// Sets related.R.Trade's TradeTradePlayers accordingly.
func (o *Trade) SetTradeTradePlayers(exec boil.Executor, insert bool, related ...*TradePlayer) error {
	query := "update \"TradePlayers\" set \"trade_id\" = null where \"trade_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TradeTradePlayers {
			queries.SetScanner(&rel.TradeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Trade = nil
		}

		o.R.TradeTradePlayers = nil
	}
	return o.AddTradeTradePlayers(exec, insert, related...)
}

// RemoveTradeTradePlayers relationships from objects passed in.
// Removes related items from R.TradeTradePlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.Trade.
func (o *Trade) RemoveTradeTradePlayers(exec boil.Executor, related ...*TradePlayer) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TradeID, nil)
		if rel.R != nil {
			rel.R.Trade = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("trade_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TradeTradePlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.TradeTradePlayers)
			if ln > 1 && i < ln-1 {
				o.R.TradeTradePlayers[i] = o.R.TradeTradePlayers[ln-1]
			}
			o.R.TradeTradePlayers = o.R.TradeTradePlayers[:ln-1]
			break
		}
	}

	return nil
}

// Trades retrieves all the records using an executor.
func Trades(mods ...qm.QueryMod) tradeQuery {
	mods = append(mods, qm.From("\"Trades\""))
	return tradeQuery{NewQuery(mods...)}
}

// FindTrade retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTrade(exec boil.Executor, iD int, selectCols ...string) (*Trade, error) {
	tradeObj := &Trade{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Trades\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tradeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Trades")
	}

	return tradeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Trade) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Trades provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradeInsertCacheMut.RLock()
	cache, cached := tradeInsertCache[key]
	tradeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradeAllColumns,
			tradeColumnsWithDefault,
			tradeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradeType, tradeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradeType, tradeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Trades\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Trades\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Trades")
	}

	if !cached {
		tradeInsertCacheMut.Lock()
		tradeInsertCache[key] = cache
		tradeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Trade.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Trade) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tradeUpdateCacheMut.RLock()
	cache, cached := tradeUpdateCache[key]
	tradeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradeAllColumns,
			tradePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Trades, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Trades\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tradePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradeType, tradeMapping, append(wl, tradePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Trades row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Trades")
	}

	if !cached {
		tradeUpdateCacheMut.Lock()
		tradeUpdateCache[key] = cache
		tradeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tradeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Trades")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Trades\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tradePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in trade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all trade")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Trade) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Trades provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradeUpsertCacheMut.RLock()
	cache, cached := tradeUpsertCache[key]
	tradeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tradeAllColumns,
			tradeColumnsWithDefault,
			tradeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tradeAllColumns,
			tradePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Trades, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tradePrimaryKeyColumns))
			copy(conflict, tradePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Trades\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(tradeType, tradeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradeType, tradeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert Trades")
	}

	if !cached {
		tradeUpsertCacheMut.Lock()
		tradeUpsertCache[key] = cache
		tradeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Trade record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Trade) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Trade provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradePrimaryKeyMapping)
	sql := "DELETE FROM \"Trades\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Trades")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no tradeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Trades")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Trades")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tradeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Trades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from trade slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Trades")
	}

	if len(tradeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Trade) Reload(exec boil.Executor) error {
	ret, err := FindTrade(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Trades\".* FROM \"Trades\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tradePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in TradeSlice")
	}

	*o = slice

	return nil
}

// TradeExists checks if the Trade row exists.
func TradeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Trades\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Trades exists")
	}

	return exists, nil
}
