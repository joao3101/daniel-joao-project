// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTeams(t *testing.T) {
	t.Parallel()

	query := Teams()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTeamsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Teams().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TeamExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Team exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeamExists to return true, but got false.")
	}
}

func testTeamsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	teamFound, err := FindTeam(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if teamFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTeamsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Teams().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTeamsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Teams().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeamsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teamOne := &Team{}
	teamTwo := &Team{}
	if err = randomize.Struct(seed, teamOne, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err = randomize.Struct(seed, teamTwo, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Teams().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeamsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teamOne := &Team{}
	teamTwo := &Team{}
	if err = randomize.Struct(seed, teamOne, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err = randomize.Struct(seed, teamTwo, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func teamBeforeInsertHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterInsertHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterSelectHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamBeforeUpdateHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterUpdateHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamBeforeDeleteHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterDeleteHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamBeforeUpsertHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func teamAfterUpsertHook(e boil.Executor, o *Team) error {
	*o = Team{}
	return nil
}

func testTeamsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Team{}
	o := &Team{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Team object: %s", err)
	}

	AddTeamHook(boil.BeforeInsertHook, teamBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teamBeforeInsertHooks = []TeamHook{}

	AddTeamHook(boil.AfterInsertHook, teamAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teamAfterInsertHooks = []TeamHook{}

	AddTeamHook(boil.AfterSelectHook, teamAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teamAfterSelectHooks = []TeamHook{}

	AddTeamHook(boil.BeforeUpdateHook, teamBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teamBeforeUpdateHooks = []TeamHook{}

	AddTeamHook(boil.AfterUpdateHook, teamAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teamAfterUpdateHooks = []TeamHook{}

	AddTeamHook(boil.BeforeDeleteHook, teamBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teamBeforeDeleteHooks = []TeamHook{}

	AddTeamHook(boil.AfterDeleteHook, teamAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teamAfterDeleteHooks = []TeamHook{}

	AddTeamHook(boil.BeforeUpsertHook, teamBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teamBeforeUpsertHooks = []TeamHook{}

	AddTeamHook(boil.AfterUpsertHook, teamAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teamAfterUpsertHooks = []TeamHook{}
}

func testTeamsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(teamColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamToManyHomeTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.HomeTeam, a.ID)
	queries.Assign(&c.HomeTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.HomeTeamTeamMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.HomeTeam, b.HomeTeam) {
			bFound = true
		}
		if queries.Equal(v.HomeTeam, c.HomeTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadHomeTeamTeamMatchups(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeTeamTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.HomeTeamTeamMatchups = nil
	if err = a.L.LoadHomeTeamTeamMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeTeamTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyAwayTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AwayTeam, a.ID)
	queries.Assign(&c.AwayTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AwayTeamTeamMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AwayTeam, b.AwayTeam) {
			bFound = true
		}
		if queries.Equal(v.AwayTeam, c.AwayTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadAwayTeamTeamMatchups(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AwayTeamTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AwayTeamTeamMatchups = nil
	if err = a.L.LoadAwayTeamTeamMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AwayTeamTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyWinnerTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamMatchupDBTypes, false, teamMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.Winner, a.ID)
	queries.Assign(&c.Winner, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.WinnerTeamMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.Winner, b.Winner) {
			bFound = true
		}
		if queries.Equal(v.Winner, c.Winner) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadWinnerTeamMatchups(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WinnerTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WinnerTeamMatchups = nil
	if err = a.L.LoadWinnerTeamMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WinnerTeamMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyTeamTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TeamID = a.ID
	c.TeamID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamTeamPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.TeamID == b.TeamID {
			bFound = true
		}
		if v.TeamID == c.TeamID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadTeamTeamPlayers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamTeamPlayers = nil
	if err = a.L.LoadTeamTeamPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyTeamTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamRoundDBTypes, false, teamRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamID, a.ID)
	queries.Assign(&c.TeamID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamTeamRounds().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamID, b.TeamID) {
			bFound = true
		}
		if queries.Equal(v.TeamID, c.TeamID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadTeamTeamRounds(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamTeamRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamTeamRounds = nil
	if err = a.L.LoadTeamTeamRounds(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamTeamRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyCurrentTeamTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CurrentTeam, a.ID)
	queries.Assign(&c.CurrentTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CurrentTeamTradePlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CurrentTeam, b.CurrentTeam) {
			bFound = true
		}
		if queries.Equal(v.CurrentTeam, c.CurrentTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadCurrentTeamTradePlayers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrentTeamTradePlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CurrentTeamTradePlayers = nil
	if err = a.L.LoadCurrentTeamTradePlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CurrentTeamTradePlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyFromTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FromTeam, a.ID)
	queries.Assign(&c.FromTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FromTeamTrades().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FromTeam, b.FromTeam) {
			bFound = true
		}
		if queries.Equal(v.FromTeam, c.FromTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadFromTeamTrades(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromTeamTrades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FromTeamTrades = nil
	if err = a.L.LoadFromTeamTrades(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromTeamTrades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyToTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ToTeam, a.ID)
	queries.Assign(&c.ToTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ToTeamTrades().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ToTeam, b.ToTeam) {
			bFound = true
		}
		if queries.Equal(v.ToTeam, c.ToTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadToTeamTrades(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToTeamTrades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ToTeamTrades = nil
	if err = a.L.LoadToTeamTrades(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToTeamTrades); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyFromTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FromTeam, a.ID)
	queries.Assign(&c.FromTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FromTeamWaivers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FromTeam, b.FromTeam) {
			bFound = true
		}
		if queries.Equal(v.FromTeam, c.FromTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadFromTeamWaivers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromTeamWaivers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FromTeamWaivers = nil
	if err = a.L.LoadFromTeamWaivers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromTeamWaivers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyToTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ToTeam, a.ID)
	queries.Assign(&c.ToTeam, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ToTeamWaivers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ToTeam, b.ToTeam) {
			bFound = true
		}
		if queries.Equal(v.ToTeam, c.ToTeam) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamSlice{&a}
	if err = a.L.LoadToTeamWaivers(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToTeamWaivers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ToTeamWaivers = nil
	if err = a.L.LoadToTeamWaivers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToTeamWaivers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamToManyAddOpHomeTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHomeTeamTeamMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.HomeTeam) {
			t.Error("foreign key was wrong value", a.ID, first.HomeTeam)
		}
		if !queries.Equal(a.ID, second.HomeTeam) {
			t.Error("foreign key was wrong value", a.ID, second.HomeTeam)
		}

		if first.R.HomeTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HomeTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.HomeTeamTeamMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.HomeTeamTeamMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.HomeTeamTeamMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpHomeTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetHomeTeamTeamMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.HomeTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetHomeTeamTeamMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.HomeTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.HomeTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.HomeTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.HomeTeam) {
		t.Error("foreign key was wrong value", a.ID, d.HomeTeam)
	}
	if !queries.Equal(a.ID, e.HomeTeam) {
		t.Error("foreign key was wrong value", a.ID, e.HomeTeam)
	}

	if b.R.HomeTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.HomeTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.HomeTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.HomeTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.HomeTeamTeamMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.HomeTeamTeamMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpHomeTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddHomeTeamTeamMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.HomeTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveHomeTeamTeamMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.HomeTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.HomeTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.HomeTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.HomeTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.HomeTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.HomeTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.HomeTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.HomeTeamTeamMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.HomeTeamTeamMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.HomeTeamTeamMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpAwayTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAwayTeamTeamMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AwayTeam) {
			t.Error("foreign key was wrong value", a.ID, first.AwayTeam)
		}
		if !queries.Equal(a.ID, second.AwayTeam) {
			t.Error("foreign key was wrong value", a.ID, second.AwayTeam)
		}

		if first.R.AwayTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AwayTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AwayTeamTeamMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AwayTeamTeamMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AwayTeamTeamMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpAwayTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAwayTeamTeamMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AwayTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAwayTeamTeamMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AwayTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AwayTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AwayTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AwayTeam) {
		t.Error("foreign key was wrong value", a.ID, d.AwayTeam)
	}
	if !queries.Equal(a.ID, e.AwayTeam) {
		t.Error("foreign key was wrong value", a.ID, e.AwayTeam)
	}

	if b.R.AwayTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AwayTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AwayTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AwayTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AwayTeamTeamMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AwayTeamTeamMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpAwayTeamTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAwayTeamTeamMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AwayTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAwayTeamTeamMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AwayTeamTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AwayTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AwayTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AwayTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AwayTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AwayTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AwayTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AwayTeamTeamMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AwayTeamTeamMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AwayTeamTeamMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpWinnerTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWinnerTeamMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.Winner) {
			t.Error("foreign key was wrong value", a.ID, first.Winner)
		}
		if !queries.Equal(a.ID, second.Winner) {
			t.Error("foreign key was wrong value", a.ID, second.Winner)
		}

		if first.R.WinnerTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.WinnerTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WinnerTeamMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WinnerTeamMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WinnerTeamMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpWinnerTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetWinnerTeamMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WinnerTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetWinnerTeamMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WinnerTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Winner) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Winner) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.Winner) {
		t.Error("foreign key was wrong value", a.ID, d.Winner)
	}
	if !queries.Equal(a.ID, e.Winner) {
		t.Error("foreign key was wrong value", a.ID, e.Winner)
	}

	if b.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WinnerTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.WinnerTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.WinnerTeamMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.WinnerTeamMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpWinnerTeamMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamMatchupDBTypes, false, strmangle.SetComplement(teamMatchupPrimaryKeyColumns, teamMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddWinnerTeamMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.WinnerTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveWinnerTeamMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.WinnerTeamMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.Winner) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.Winner) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.WinnerTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.WinnerTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.WinnerTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.WinnerTeamMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.WinnerTeamMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.WinnerTeamMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpTeamTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamTeamPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TeamID {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if a.ID != second.TeamID {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamTeamPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTeamToManyAddOpTeamTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamRound{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamTeamRounds(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamID)
		}
		if !queries.Equal(a.ID, second.TeamID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamID)
		}

		if first.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Team != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamTeamRounds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamTeamRounds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamTeamRounds().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpTeamTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTeamTeamRounds(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTeamTeamRounds(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamID)
	}
	if !queries.Equal(a.ID, e.TeamID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamID)
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Team != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TeamTeamRounds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TeamTeamRounds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpTeamTeamRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TeamRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundDBTypes, false, strmangle.SetComplement(teamRoundPrimaryKeyColumns, teamRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTeamTeamRounds(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTeamTeamRounds(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamTeamRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Team != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Team != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TeamTeamRounds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TeamTeamRounds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TeamTeamRounds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpCurrentTeamTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TradePlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCurrentTeamTradePlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CurrentTeam) {
			t.Error("foreign key was wrong value", a.ID, first.CurrentTeam)
		}
		if !queries.Equal(a.ID, second.CurrentTeam) {
			t.Error("foreign key was wrong value", a.ID, second.CurrentTeam)
		}

		if first.R.CurrentTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CurrentTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CurrentTeamTradePlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CurrentTeamTradePlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CurrentTeamTradePlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpCurrentTeamTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCurrentTeamTradePlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CurrentTeamTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCurrentTeamTradePlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CurrentTeamTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CurrentTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CurrentTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CurrentTeam) {
		t.Error("foreign key was wrong value", a.ID, d.CurrentTeam)
	}
	if !queries.Equal(a.ID, e.CurrentTeam) {
		t.Error("foreign key was wrong value", a.ID, e.CurrentTeam)
	}

	if b.R.CurrentTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CurrentTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CurrentTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CurrentTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CurrentTeamTradePlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CurrentTeamTradePlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpCurrentTeamTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCurrentTeamTradePlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CurrentTeamTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCurrentTeamTradePlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CurrentTeamTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CurrentTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CurrentTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CurrentTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CurrentTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CurrentTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CurrentTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CurrentTeamTradePlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CurrentTeamTradePlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CurrentTeamTradePlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpFromTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Trade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Trade{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFromTeamTrades(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FromTeam) {
			t.Error("foreign key was wrong value", a.ID, first.FromTeam)
		}
		if !queries.Equal(a.ID, second.FromTeam) {
			t.Error("foreign key was wrong value", a.ID, second.FromTeam)
		}

		if first.R.FromTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FromTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FromTeamTrades[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FromTeamTrades[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FromTeamTrades().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpFromTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Trade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFromTeamTrades(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FromTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFromTeamTrades(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FromTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FromTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FromTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FromTeam) {
		t.Error("foreign key was wrong value", a.ID, d.FromTeam)
	}
	if !queries.Equal(a.ID, e.FromTeam) {
		t.Error("foreign key was wrong value", a.ID, e.FromTeam)
	}

	if b.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FromTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FromTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FromTeamTrades[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FromTeamTrades[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpFromTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Trade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFromTeamTrades(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FromTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFromTeamTrades(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FromTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FromTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FromTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FromTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FromTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FromTeamTrades) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FromTeamTrades[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FromTeamTrades[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpToTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Trade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Trade{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddToTeamTrades(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ToTeam) {
			t.Error("foreign key was wrong value", a.ID, first.ToTeam)
		}
		if !queries.Equal(a.ID, second.ToTeam) {
			t.Error("foreign key was wrong value", a.ID, second.ToTeam)
		}

		if first.R.ToTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ToTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ToTeamTrades[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ToTeamTrades[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ToTeamTrades().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpToTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Trade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetToTeamTrades(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ToTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetToTeamTrades(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ToTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ToTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ToTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ToTeam) {
		t.Error("foreign key was wrong value", a.ID, d.ToTeam)
	}
	if !queries.Equal(a.ID, e.ToTeam) {
		t.Error("foreign key was wrong value", a.ID, e.ToTeam)
	}

	if b.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ToTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ToTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ToTeamTrades[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ToTeamTrades[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpToTeamTrades(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Trade{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddToTeamTrades(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ToTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveToTeamTrades(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ToTeamTrades().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ToTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ToTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ToTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ToTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ToTeamTrades) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ToTeamTrades[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ToTeamTrades[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpFromTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Waiver{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFromTeamWaivers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FromTeam) {
			t.Error("foreign key was wrong value", a.ID, first.FromTeam)
		}
		if !queries.Equal(a.ID, second.FromTeam) {
			t.Error("foreign key was wrong value", a.ID, second.FromTeam)
		}

		if first.R.FromTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FromTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FromTeamWaivers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FromTeamWaivers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FromTeamWaivers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpFromTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFromTeamWaivers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FromTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFromTeamWaivers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FromTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FromTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FromTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FromTeam) {
		t.Error("foreign key was wrong value", a.ID, d.FromTeam)
	}
	if !queries.Equal(a.ID, e.FromTeam) {
		t.Error("foreign key was wrong value", a.ID, e.FromTeam)
	}

	if b.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FromTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FromTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FromTeamWaivers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FromTeamWaivers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpFromTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFromTeamWaivers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FromTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFromTeamWaivers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FromTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FromTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FromTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FromTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FromTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FromTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FromTeamWaivers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FromTeamWaivers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FromTeamWaivers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToManyAddOpToTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Waiver{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddToTeamWaivers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ToTeam) {
			t.Error("foreign key was wrong value", a.ID, first.ToTeam)
		}
		if !queries.Equal(a.ID, second.ToTeam) {
			t.Error("foreign key was wrong value", a.ID, second.ToTeam)
		}

		if first.R.ToTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ToTeamTeam != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ToTeamWaivers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ToTeamWaivers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ToTeamWaivers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamToManySetOpToTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetToTeamWaivers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ToTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetToTeamWaivers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ToTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ToTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ToTeam) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ToTeam) {
		t.Error("foreign key was wrong value", a.ID, d.ToTeam)
	}
	if !queries.Equal(a.ID, e.ToTeam) {
		t.Error("foreign key was wrong value", a.ID, e.ToTeam)
	}

	if b.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ToTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ToTeamTeam != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ToTeamWaivers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ToTeamWaivers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamToManyRemoveOpToTeamWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddToTeamWaivers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ToTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveToTeamWaivers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ToTeamWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ToTeam) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ToTeam) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ToTeamTeam != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ToTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ToTeamTeam != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ToTeamWaivers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ToTeamWaivers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ToTeamWaivers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamToOneUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Team
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeamToOneLeagueUsingLeague(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Team
	var foreign League

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, leagueDBTypes, false, leagueColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize League struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.LeagueID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.League().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamSlice{&local}
	if err = local.L.LoadLeague(tx, false, (*[]*Team)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.League == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.League = nil
	if err = local.L.LoadLeague(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.League == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeamToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserTeams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}
func testTeamToOneSetOpLeagueUsingLeague(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Team
	var b, c League

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, leagueDBTypes, false, strmangle.SetComplement(leaguePrimaryKeyColumns, leagueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, leagueDBTypes, false, strmangle.SetComplement(leaguePrimaryKeyColumns, leagueColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*League{&b, &c} {
		err = a.SetLeague(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.League != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.LeagueTeams[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.LeagueID != x.ID {
			t.Error("foreign key was wrong value", a.LeagueID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.LeagueID))
		reflect.Indirect(reflect.ValueOf(&a.LeagueID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.LeagueID != x.ID {
			t.Error("foreign key was wrong value", a.LeagueID, x.ID)
		}
	}
}

func testTeamsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTeamsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTeamsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Teams().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teamDBTypes = map[string]string{`ID`: `int`, `Name`: `varchar`, `UserID`: `int`, `LeagueID`: `int`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_           = bytes.MinRead
)

func testTeamsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamDBTypes, true, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTeamsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Team{}
	if err = randomize.Struct(seed, o, teamDBTypes, true, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamDBTypes, true, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teamAllColumns, teamPrimaryKeyColumns) {
		fields = teamAllColumns
	} else {
		fields = strmangle.SetComplement(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TeamSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTeamsUpsert(t *testing.T) {
	t.Parallel()

	if len(teamAllColumns) == len(teamPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTeamUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Team{}
	if err = randomize.Struct(seed, &o, teamDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Team: %s", err)
	}

	count, err := Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, teamDBTypes, false, teamPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Team: %s", err)
	}

	count, err = Teams().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
