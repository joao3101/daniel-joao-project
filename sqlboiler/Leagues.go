// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// League is an object representing the database table.
type League struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *leagueR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L leagueL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LeagueColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

var LeagueWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`Leagues`.`id`"},
	Name:      whereHelperstring{field: "`Leagues`.`name`"},
	CreatedAt: whereHelpertime_Time{field: "`Leagues`.`created_at`"},
	DeletedAt: whereHelpertime_Time{field: "`Leagues`.`deleted_at`"},
}

// LeagueRels is where relationship names are stored.
var LeagueRels = struct {
	LeagueTeams string
}{
	LeagueTeams: "LeagueTeams",
}

// leagueR is where relationships are stored.
type leagueR struct {
	LeagueTeams TeamSlice `boil:"LeagueTeams" json:"LeagueTeams" toml:"LeagueTeams" yaml:"LeagueTeams"`
}

// NewStruct creates a new relationship struct
func (*leagueR) NewStruct() *leagueR {
	return &leagueR{}
}

// leagueL is where Load methods for each relationship are stored.
type leagueL struct{}

var (
	leagueAllColumns            = []string{"id", "name", "created_at", "deleted_at"}
	leagueColumnsWithoutDefault = []string{"name"}
	leagueColumnsWithDefault    = []string{"id", "created_at", "deleted_at"}
	leaguePrimaryKeyColumns     = []string{"id"}
)

type (
	// LeagueSlice is an alias for a slice of pointers to League.
	// This should generally be used opposed to []League.
	LeagueSlice []*League
	// LeagueHook is the signature for custom League hook methods
	LeagueHook func(boil.Executor, *League) error

	leagueQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	leagueType                 = reflect.TypeOf(&League{})
	leagueMapping              = queries.MakeStructMapping(leagueType)
	leaguePrimaryKeyMapping, _ = queries.BindMapping(leagueType, leagueMapping, leaguePrimaryKeyColumns)
	leagueInsertCacheMut       sync.RWMutex
	leagueInsertCache          = make(map[string]insertCache)
	leagueUpdateCacheMut       sync.RWMutex
	leagueUpdateCache          = make(map[string]updateCache)
	leagueUpsertCacheMut       sync.RWMutex
	leagueUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var leagueBeforeInsertHooks []LeagueHook
var leagueBeforeUpdateHooks []LeagueHook
var leagueBeforeDeleteHooks []LeagueHook
var leagueBeforeUpsertHooks []LeagueHook

var leagueAfterInsertHooks []LeagueHook
var leagueAfterSelectHooks []LeagueHook
var leagueAfterUpdateHooks []LeagueHook
var leagueAfterDeleteHooks []LeagueHook
var leagueAfterUpsertHooks []LeagueHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *League) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *League) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *League) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *League) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *League) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *League) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *League) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *League) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *League) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range leagueAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLeagueHook registers your hook function for all future operations.
func AddLeagueHook(hookPoint boil.HookPoint, leagueHook LeagueHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		leagueBeforeInsertHooks = append(leagueBeforeInsertHooks, leagueHook)
	case boil.BeforeUpdateHook:
		leagueBeforeUpdateHooks = append(leagueBeforeUpdateHooks, leagueHook)
	case boil.BeforeDeleteHook:
		leagueBeforeDeleteHooks = append(leagueBeforeDeleteHooks, leagueHook)
	case boil.BeforeUpsertHook:
		leagueBeforeUpsertHooks = append(leagueBeforeUpsertHooks, leagueHook)
	case boil.AfterInsertHook:
		leagueAfterInsertHooks = append(leagueAfterInsertHooks, leagueHook)
	case boil.AfterSelectHook:
		leagueAfterSelectHooks = append(leagueAfterSelectHooks, leagueHook)
	case boil.AfterUpdateHook:
		leagueAfterUpdateHooks = append(leagueAfterUpdateHooks, leagueHook)
	case boil.AfterDeleteHook:
		leagueAfterDeleteHooks = append(leagueAfterDeleteHooks, leagueHook)
	case boil.AfterUpsertHook:
		leagueAfterUpsertHooks = append(leagueAfterUpsertHooks, leagueHook)
	}
}

// One returns a single league record from the query.
func (q leagueQuery) One(exec boil.Executor) (*League, error) {
	o := &League{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Leagues")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all League records from the query.
func (q leagueQuery) All(exec boil.Executor) (LeagueSlice, error) {
	var o []*League

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to League slice")
	}

	if len(leagueAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all League records in the query.
func (q leagueQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Leagues rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q leagueQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Leagues exists")
	}

	return count > 0, nil
}

// LeagueTeams retrieves all the Team's Teams with an executor via league_id column.
func (o *League) LeagueTeams(mods ...qm.QueryMod) teamQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Teams`.`league_id`=?", o.ID),
	)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`Teams`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Teams`.*"})
	}

	return query
}

// LoadLeagueTeams allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (leagueL) LoadLeagueTeams(e boil.Executor, singular bool, maybeLeague interface{}, mods queries.Applicator) error {
	var slice []*League
	var object *League

	if singular {
		object = maybeLeague.(*League)
	} else {
		slice = *maybeLeague.(*[]*League)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &leagueR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &leagueR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.league_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Teams")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Teams")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.LeagueTeams = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamR{}
			}
			foreign.R.League = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.LeagueID {
				local.R.LeagueTeams = append(local.R.LeagueTeams, foreign)
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.League = local
				break
			}
		}
	}

	return nil
}

// AddLeagueTeams adds the given related objects to the existing relationships
// of the League, optionally inserting them as new records.
// Appends related to o.R.LeagueTeams.
// Sets related.R.League appropriately.
func (o *League) AddLeagueTeams(exec boil.Executor, insert bool, related ...*Team) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.LeagueID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Teams` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"league_id"}),
				strmangle.WhereClause("`", "`", 0, teamPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.LeagueID = o.ID
		}
	}

	if o.R == nil {
		o.R = &leagueR{
			LeagueTeams: related,
		}
	} else {
		o.R.LeagueTeams = append(o.R.LeagueTeams, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamR{
				League: o,
			}
		} else {
			rel.R.League = o
		}
	}
	return nil
}

// Leagues retrieves all the records using an executor.
func Leagues(mods ...qm.QueryMod) leagueQuery {
	mods = append(mods, qm.From("`Leagues`"))
	return leagueQuery{NewQuery(mods...)}
}

// FindLeague retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLeague(exec boil.Executor, iD int, selectCols ...string) (*League, error) {
	leagueObj := &League{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Leagues` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, leagueObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Leagues")
	}

	return leagueObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *League) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Leagues provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leagueColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	leagueInsertCacheMut.RLock()
	cache, cached := leagueInsertCache[key]
	leagueInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			leagueAllColumns,
			leagueColumnsWithDefault,
			leagueColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(leagueType, leagueMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(leagueType, leagueMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Leagues` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Leagues` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Leagues` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, leaguePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Leagues")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == leagueMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for Leagues")
	}

CacheNoHooks:
	if !cached {
		leagueInsertCacheMut.Lock()
		leagueInsertCache[key] = cache
		leagueInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the League.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *League) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	leagueUpdateCacheMut.RLock()
	cache, cached := leagueUpdateCache[key]
	leagueUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			leagueAllColumns,
			leaguePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Leagues, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Leagues` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, leaguePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(leagueType, leagueMapping, append(wl, leaguePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Leagues row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Leagues")
	}

	if !cached {
		leagueUpdateCacheMut.Lock()
		leagueUpdateCache[key] = cache
		leagueUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q leagueQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Leagues")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Leagues")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LeagueSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaguePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Leagues` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, leaguePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in league slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all league")
	}
	return rowsAff, nil
}

var mySQLLeagueUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *League) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Leagues provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(leagueColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLeagueUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	leagueUpsertCacheMut.RLock()
	cache, cached := leagueUpsertCache[key]
	leagueUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			leagueAllColumns,
			leagueColumnsWithDefault,
			leagueColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			leagueAllColumns,
			leaguePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Leagues, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`Leagues`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Leagues` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(leagueType, leagueMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(leagueType, leagueMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for Leagues")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == leagueMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(leagueType, leagueMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for Leagues")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for Leagues")
	}

CacheNoHooks:
	if !cached {
		leagueUpsertCacheMut.Lock()
		leagueUpsertCache[key] = cache
		leagueUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single League record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *League) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no League provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), leaguePrimaryKeyMapping)
	sql := "DELETE FROM `Leagues` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Leagues")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Leagues")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q leagueQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no leagueQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Leagues")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Leagues")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LeagueSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(leagueBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaguePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Leagues` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, leaguePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from league slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Leagues")
	}

	if len(leagueAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *League) Reload(exec boil.Executor) error {
	ret, err := FindLeague(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LeagueSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LeagueSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), leaguePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Leagues`.* FROM `Leagues` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, leaguePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in LeagueSlice")
	}

	*o = slice

	return nil
}

// LeagueExists checks if the League row exists.
func LeagueExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Leagues` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Leagues exists")
	}

	return exists, nil
}
