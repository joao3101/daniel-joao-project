// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// PlayerRound is an object representing the database table.
type PlayerRound struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	PlayerID  null.Int  `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	RoundID   null.Int  `boil:"round_id" json:"round_id,omitempty" toml:"round_id" yaml:"round_id,omitempty"`
	Status    null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	Score     null.Int  `boil:"score" json:"score,omitempty" toml:"score" yaml:"score,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *playerRoundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L playerRoundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var PlayerRoundColumns = struct {
	ID        string
	PlayerID  string
	RoundID   string
	Status    string
	Score     string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	PlayerID:  "player_id",
	RoundID:   "round_id",
	Status:    "status",
	Score:     "score",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

var PlayerRoundWhere = struct {
	ID        whereHelperint
	PlayerID  whereHelpernull_Int
	RoundID   whereHelpernull_Int
	Status    whereHelpernull_Int
	Score     whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"PlayerRounds\".\"id\""},
	PlayerID:  whereHelpernull_Int{field: "\"PlayerRounds\".\"player_id\""},
	RoundID:   whereHelpernull_Int{field: "\"PlayerRounds\".\"round_id\""},
	Status:    whereHelpernull_Int{field: "\"PlayerRounds\".\"status\""},
	Score:     whereHelpernull_Int{field: "\"PlayerRounds\".\"score\""},
	CreatedAt: whereHelpertime_Time{field: "\"PlayerRounds\".\"created_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"PlayerRounds\".\"deleted_at\""},
}

// PlayerRoundRels is where relationship names are stored.
var PlayerRoundRels = struct {
	Player string
	Round  string
}{
	Player: "Player",
	Round:  "Round",
}

// playerRoundR is where relationships are stored.
type playerRoundR struct {
	Player *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	Round  *Round  `boil:"Round" json:"Round" toml:"Round" yaml:"Round"`
}

// NewStruct creates a new relationship struct
func (*playerRoundR) NewStruct() *playerRoundR {
	return &playerRoundR{}
}

// playerRoundL is where Load methods for each relationship are stored.
type playerRoundL struct{}

var (
	playerRoundAllColumns            = []string{"id", "player_id", "round_id", "status", "score", "created_at", "deleted_at"}
	playerRoundColumnsWithoutDefault = []string{"player_id", "round_id", "status", "score", "created_at", "deleted_at"}
	playerRoundColumnsWithDefault    = []string{"id"}
	playerRoundPrimaryKeyColumns     = []string{"id"}
)

type (
	// PlayerRoundSlice is an alias for a slice of pointers to PlayerRound.
	// This should generally be used opposed to []PlayerRound.
	PlayerRoundSlice []*PlayerRound
	// PlayerRoundHook is the signature for custom PlayerRound hook methods
	PlayerRoundHook func(boil.Executor, *PlayerRound) error

	playerRoundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	playerRoundType                 = reflect.TypeOf(&PlayerRound{})
	playerRoundMapping              = queries.MakeStructMapping(playerRoundType)
	playerRoundPrimaryKeyMapping, _ = queries.BindMapping(playerRoundType, playerRoundMapping, playerRoundPrimaryKeyColumns)
	playerRoundInsertCacheMut       sync.RWMutex
	playerRoundInsertCache          = make(map[string]insertCache)
	playerRoundUpdateCacheMut       sync.RWMutex
	playerRoundUpdateCache          = make(map[string]updateCache)
	playerRoundUpsertCacheMut       sync.RWMutex
	playerRoundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var playerRoundBeforeInsertHooks []PlayerRoundHook
var playerRoundBeforeUpdateHooks []PlayerRoundHook
var playerRoundBeforeDeleteHooks []PlayerRoundHook
var playerRoundBeforeUpsertHooks []PlayerRoundHook

var playerRoundAfterInsertHooks []PlayerRoundHook
var playerRoundAfterSelectHooks []PlayerRoundHook
var playerRoundAfterUpdateHooks []PlayerRoundHook
var playerRoundAfterDeleteHooks []PlayerRoundHook
var playerRoundAfterUpsertHooks []PlayerRoundHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *PlayerRound) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *PlayerRound) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *PlayerRound) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *PlayerRound) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *PlayerRound) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *PlayerRound) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *PlayerRound) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *PlayerRound) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *PlayerRound) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range playerRoundAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPlayerRoundHook registers your hook function for all future operations.
func AddPlayerRoundHook(hookPoint boil.HookPoint, playerRoundHook PlayerRoundHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		playerRoundBeforeInsertHooks = append(playerRoundBeforeInsertHooks, playerRoundHook)
	case boil.BeforeUpdateHook:
		playerRoundBeforeUpdateHooks = append(playerRoundBeforeUpdateHooks, playerRoundHook)
	case boil.BeforeDeleteHook:
		playerRoundBeforeDeleteHooks = append(playerRoundBeforeDeleteHooks, playerRoundHook)
	case boil.BeforeUpsertHook:
		playerRoundBeforeUpsertHooks = append(playerRoundBeforeUpsertHooks, playerRoundHook)
	case boil.AfterInsertHook:
		playerRoundAfterInsertHooks = append(playerRoundAfterInsertHooks, playerRoundHook)
	case boil.AfterSelectHook:
		playerRoundAfterSelectHooks = append(playerRoundAfterSelectHooks, playerRoundHook)
	case boil.AfterUpdateHook:
		playerRoundAfterUpdateHooks = append(playerRoundAfterUpdateHooks, playerRoundHook)
	case boil.AfterDeleteHook:
		playerRoundAfterDeleteHooks = append(playerRoundAfterDeleteHooks, playerRoundHook)
	case boil.AfterUpsertHook:
		playerRoundAfterUpsertHooks = append(playerRoundAfterUpsertHooks, playerRoundHook)
	}
}

// One returns a single playerRound record from the query.
func (q playerRoundQuery) One(exec boil.Executor) (*PlayerRound, error) {
	o := &PlayerRound{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for PlayerRounds")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all PlayerRound records from the query.
func (q playerRoundQuery) All(exec boil.Executor) (PlayerRoundSlice, error) {
	var o []*PlayerRound

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to PlayerRound slice")
	}

	if len(playerRoundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all PlayerRound records in the query.
func (q playerRoundQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count PlayerRounds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q playerRoundQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if PlayerRounds exists")
	}

	return count > 0, nil
}

// Player pointed to by the foreign key.
func (o *PlayerRound) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"Players\"")

	return query
}

// Round pointed to by the foreign key.
func (o *PlayerRound) Round(mods ...qm.QueryMod) roundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoundID),
	}

	queryMods = append(queryMods, mods...)

	query := Rounds(queryMods...)
	queries.SetFrom(query.Query, "\"Round\"")

	return query
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerRoundL) LoadPlayer(e boil.Executor, singular bool, maybePlayerRound interface{}, mods queries.Applicator) error {
	var slice []*PlayerRound
	var object *PlayerRound

	if singular {
		object = maybePlayerRound.(*PlayerRound)
	} else {
		slice = *maybePlayerRound.(*[]*PlayerRound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerRoundR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args = append(args, object.PlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerRoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlayerID) {
				args = append(args, obj.PlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Players`),
		qm.WhereIn(`Players.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Players")
	}

	if len(playerRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerPlayerRounds = append(foreign.R.PlayerPlayerRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.ID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerPlayerRounds = append(foreign.R.PlayerPlayerRounds, local)
				break
			}
		}
	}

	return nil
}

// LoadRound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (playerRoundL) LoadRound(e boil.Executor, singular bool, maybePlayerRound interface{}, mods queries.Applicator) error {
	var slice []*PlayerRound
	var object *PlayerRound

	if singular {
		object = maybePlayerRound.(*PlayerRound)
	} else {
		slice = *maybePlayerRound.(*[]*PlayerRound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &playerRoundR{}
		}
		if !queries.IsNil(object.RoundID) {
			args = append(args, object.RoundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &playerRoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoundID) {
				args = append(args, obj.RoundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Round`),
		qm.WhereIn(`Round.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Round")
	}

	var resultSlice []*Round
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Round")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Round")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Round")
	}

	if len(playerRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Round = foreign
		if foreign.R == nil {
			foreign.R = &roundR{}
		}
		foreign.R.RoundPlayerRounds = append(foreign.R.RoundPlayerRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoundID, foreign.ID) {
				local.R.Round = foreign
				if foreign.R == nil {
					foreign.R = &roundR{}
				}
				foreign.R.RoundPlayerRounds = append(foreign.R.RoundPlayerRounds, local)
				break
			}
		}
	}

	return nil
}

// SetPlayer of the playerRound to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerPlayerRounds.
func (o *PlayerRound) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"PlayerRounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerRoundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.ID)
	if o.R == nil {
		o.R = &playerRoundR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerPlayerRounds: PlayerRoundSlice{o},
		}
	} else {
		related.R.PlayerPlayerRounds = append(related.R.PlayerPlayerRounds, o)
	}

	return nil
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PlayerRound) RemovePlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlayerPlayerRounds {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.PlayerPlayerRounds)
		if ln > 1 && i < ln-1 {
			related.R.PlayerPlayerRounds[i] = related.R.PlayerPlayerRounds[ln-1]
		}
		related.R.PlayerPlayerRounds = related.R.PlayerPlayerRounds[:ln-1]
		break
	}
	return nil
}

// SetRound of the playerRound to the related item.
// Sets o.R.Round to related.
// Adds o to related.R.RoundPlayerRounds.
func (o *PlayerRound) SetRound(exec boil.Executor, insert bool, related *Round) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"PlayerRounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"round_id"}),
		strmangle.WhereClause("\"", "\"", 2, playerRoundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoundID, related.ID)
	if o.R == nil {
		o.R = &playerRoundR{
			Round: related,
		}
	} else {
		o.R.Round = related
	}

	if related.R == nil {
		related.R = &roundR{
			RoundPlayerRounds: PlayerRoundSlice{o},
		}
	} else {
		related.R.RoundPlayerRounds = append(related.R.RoundPlayerRounds, o)
	}

	return nil
}

// RemoveRound relationship.
// Sets o.R.Round to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *PlayerRound) RemoveRound(exec boil.Executor, related *Round) error {
	var err error

	queries.SetScanner(&o.RoundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("round_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Round = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoundPlayerRounds {
		if queries.Equal(o.RoundID, ri.RoundID) {
			continue
		}

		ln := len(related.R.RoundPlayerRounds)
		if ln > 1 && i < ln-1 {
			related.R.RoundPlayerRounds[i] = related.R.RoundPlayerRounds[ln-1]
		}
		related.R.RoundPlayerRounds = related.R.RoundPlayerRounds[:ln-1]
		break
	}
	return nil
}

// PlayerRounds retrieves all the records using an executor.
func PlayerRounds(mods ...qm.QueryMod) playerRoundQuery {
	mods = append(mods, qm.From("\"PlayerRounds\""))
	return playerRoundQuery{NewQuery(mods...)}
}

// FindPlayerRound retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindPlayerRound(exec boil.Executor, iD int, selectCols ...string) (*PlayerRound, error) {
	playerRoundObj := &PlayerRound{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"PlayerRounds\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, playerRoundObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from PlayerRounds")
	}

	return playerRoundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *PlayerRound) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no PlayerRounds provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerRoundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	playerRoundInsertCacheMut.RLock()
	cache, cached := playerRoundInsertCache[key]
	playerRoundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			playerRoundAllColumns,
			playerRoundColumnsWithDefault,
			playerRoundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(playerRoundType, playerRoundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(playerRoundType, playerRoundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"PlayerRounds\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"PlayerRounds\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into PlayerRounds")
	}

	if !cached {
		playerRoundInsertCacheMut.Lock()
		playerRoundInsertCache[key] = cache
		playerRoundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the PlayerRound.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *PlayerRound) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	playerRoundUpdateCacheMut.RLock()
	cache, cached := playerRoundUpdateCache[key]
	playerRoundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			playerRoundAllColumns,
			playerRoundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update PlayerRounds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"PlayerRounds\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, playerRoundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(playerRoundType, playerRoundMapping, append(wl, playerRoundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update PlayerRounds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for PlayerRounds")
	}

	if !cached {
		playerRoundUpdateCacheMut.Lock()
		playerRoundUpdateCache[key] = cache
		playerRoundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q playerRoundQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for PlayerRounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for PlayerRounds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PlayerRoundSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"PlayerRounds\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, playerRoundPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in playerRound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all playerRound")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *PlayerRound) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no PlayerRounds provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(playerRoundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	playerRoundUpsertCacheMut.RLock()
	cache, cached := playerRoundUpsertCache[key]
	playerRoundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			playerRoundAllColumns,
			playerRoundColumnsWithDefault,
			playerRoundColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			playerRoundAllColumns,
			playerRoundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert PlayerRounds, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(playerRoundPrimaryKeyColumns))
			copy(conflict, playerRoundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"PlayerRounds\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(playerRoundType, playerRoundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(playerRoundType, playerRoundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert PlayerRounds")
	}

	if !cached {
		playerRoundUpsertCacheMut.Lock()
		playerRoundUpsertCache[key] = cache
		playerRoundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single PlayerRound record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *PlayerRound) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no PlayerRound provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), playerRoundPrimaryKeyMapping)
	sql := "DELETE FROM \"PlayerRounds\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from PlayerRounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for PlayerRounds")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q playerRoundQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no playerRoundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from PlayerRounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for PlayerRounds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PlayerRoundSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(playerRoundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"PlayerRounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerRoundPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from playerRound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for PlayerRounds")
	}

	if len(playerRoundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *PlayerRound) Reload(exec boil.Executor) error {
	ret, err := FindPlayerRound(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PlayerRoundSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := PlayerRoundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), playerRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"PlayerRounds\".* FROM \"PlayerRounds\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, playerRoundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in PlayerRoundSlice")
	}

	*o = slice

	return nil
}

// PlayerRoundExists checks if the PlayerRound row exists.
func PlayerRoundExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"PlayerRounds\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if PlayerRounds exists")
	}

	return exists, nil
}
