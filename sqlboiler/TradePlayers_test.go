// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTradePlayers(t *testing.T) {
	t.Parallel()

	query := TradePlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTradePlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradePlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TradePlayers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradePlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradePlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTradePlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TradePlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TradePlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TradePlayerExists to return true, but got false.")
	}
}

func testTradePlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	tradePlayerFound, err := FindTradePlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if tradePlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTradePlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TradePlayers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTradePlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TradePlayers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTradePlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	tradePlayerOne := &TradePlayer{}
	tradePlayerTwo := &TradePlayer{}
	if err = randomize.Struct(seed, tradePlayerOne, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, tradePlayerTwo, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = tradePlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradePlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TradePlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTradePlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	tradePlayerOne := &TradePlayer{}
	tradePlayerTwo := &TradePlayer{}
	if err = randomize.Struct(seed, tradePlayerOne, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, tradePlayerTwo, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = tradePlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = tradePlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func tradePlayerBeforeInsertHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerAfterInsertHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerAfterSelectHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerBeforeUpdateHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerAfterUpdateHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerBeforeDeleteHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerAfterDeleteHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerBeforeUpsertHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func tradePlayerAfterUpsertHook(e boil.Executor, o *TradePlayer) error {
	*o = TradePlayer{}
	return nil
}

func testTradePlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TradePlayer{}
	o := &TradePlayer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TradePlayer object: %s", err)
	}

	AddTradePlayerHook(boil.BeforeInsertHook, tradePlayerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	tradePlayerBeforeInsertHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.AfterInsertHook, tradePlayerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	tradePlayerAfterInsertHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.AfterSelectHook, tradePlayerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	tradePlayerAfterSelectHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.BeforeUpdateHook, tradePlayerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	tradePlayerBeforeUpdateHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.AfterUpdateHook, tradePlayerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	tradePlayerAfterUpdateHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.BeforeDeleteHook, tradePlayerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	tradePlayerBeforeDeleteHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.AfterDeleteHook, tradePlayerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	tradePlayerAfterDeleteHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.BeforeUpsertHook, tradePlayerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	tradePlayerBeforeUpsertHooks = []TradePlayerHook{}

	AddTradePlayerHook(boil.AfterUpsertHook, tradePlayerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	tradePlayerAfterUpsertHooks = []TradePlayerHook{}
}

func testTradePlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradePlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(tradePlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTradePlayerToOneTeamPlayerUsingTeamPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TradePlayer
	var foreign TeamPlayer

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TeamPlayerID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.TeamPlayer().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradePlayerSlice{&local}
	if err = local.L.LoadTeamPlayer(tx, false, (*[]*TradePlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TeamPlayer == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.TeamPlayer = nil
	if err = local.L.LoadTeamPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.TeamPlayer == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradePlayerToOneTradeUsingTrade(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TradePlayer
	var foreign Trade

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, tradeDBTypes, false, tradeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Trade struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TradeID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Trade().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradePlayerSlice{&local}
	if err = local.L.LoadTrade(tx, false, (*[]*TradePlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Trade = nil
	if err = local.L.LoadTrade(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Trade == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradePlayerToOneTeamUsingCurrentTeamTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TradePlayer
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CurrentTeam, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CurrentTeamTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TradePlayerSlice{&local}
	if err = local.L.LoadCurrentTeamTeam(tx, false, (*[]*TradePlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CurrentTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CurrentTeamTeam = nil
	if err = local.L.LoadCurrentTeamTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CurrentTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTradePlayerToOneSetOpTeamPlayerUsingTeamPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradePlayer
	var b, c TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*TeamPlayer{&b, &c} {
		err = a.SetTeamPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.TeamPlayer != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TeamPlayerTradePlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TeamPlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamPlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamPlayerID))
		reflect.Indirect(reflect.ValueOf(&a.TeamPlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TeamPlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.TeamPlayerID, x.ID)
		}
	}
}

func testTradePlayerToOneRemoveOpTeamPlayerUsingTeamPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradePlayer
	var b TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTeamPlayer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTeamPlayer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.TeamPlayer().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.TeamPlayer != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TeamPlayerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TeamPlayerTradePlayers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTradePlayerToOneSetOpTradeUsingTrade(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradePlayer
	var b, c Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Trade{&b, &c} {
		err = a.SetTrade(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Trade != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TradeTradePlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TradeID, x.ID) {
			t.Error("foreign key was wrong value", a.TradeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TradeID))
		reflect.Indirect(reflect.ValueOf(&a.TradeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TradeID, x.ID) {
			t.Error("foreign key was wrong value", a.TradeID, x.ID)
		}
	}
}

func testTradePlayerToOneRemoveOpTradeUsingTrade(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradePlayer
	var b Trade

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, tradeDBTypes, false, strmangle.SetComplement(tradePrimaryKeyColumns, tradeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTrade(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTrade(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Trade().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Trade != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TradeID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TradeTradePlayers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTradePlayerToOneSetOpTeamUsingCurrentTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradePlayer
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetCurrentTeamTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CurrentTeamTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CurrentTeamTradePlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CurrentTeam, x.ID) {
			t.Error("foreign key was wrong value", a.CurrentTeam)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CurrentTeam))
		reflect.Indirect(reflect.ValueOf(&a.CurrentTeam)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CurrentTeam, x.ID) {
			t.Error("foreign key was wrong value", a.CurrentTeam, x.ID)
		}
	}
}

func testTradePlayerToOneRemoveOpTeamUsingCurrentTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TradePlayer
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCurrentTeamTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCurrentTeamTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CurrentTeamTeam().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CurrentTeamTeam != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CurrentTeam) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CurrentTeamTradePlayers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTradePlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTradePlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TradePlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTradePlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TradePlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	tradePlayerDBTypes = map[string]string{`ID`: `int`, `TeamPlayerID`: `int`, `TradeID`: `int`, `CurrentTeam`: `int`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                  = bytes.MinRead
)

func testTradePlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(tradePlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(tradePlayerAllColumns) == len(tradePlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTradePlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(tradePlayerAllColumns) == len(tradePlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TradePlayer{}
	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, tradePlayerDBTypes, true, tradePlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(tradePlayerAllColumns, tradePlayerPrimaryKeyColumns) {
		fields = tradePlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			tradePlayerAllColumns,
			tradePlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TradePlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTradePlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(tradePlayerAllColumns) == len(tradePlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTradePlayerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TradePlayer{}
	if err = randomize.Struct(seed, &o, tradePlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TradePlayer: %s", err)
	}

	count, err := TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, tradePlayerDBTypes, false, tradePlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TradePlayer struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TradePlayer: %s", err)
	}

	count, err = TradePlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
