// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Club is an object representing the database table.
type Club struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *clubR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clubL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClubColumns = struct {
	ID        string
	Name      string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ClubWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`Clubs`.`id`"},
	Name:      whereHelperstring{field: "`Clubs`.`name`"},
	CreatedAt: whereHelpertime_Time{field: "`Clubs`.`created_at`"},
	DeletedAt: whereHelpertime_Time{field: "`Clubs`.`deleted_at`"},
}

// ClubRels is where relationship names are stored.
var ClubRels = struct {
	HomeClubClubMatchups string
	AwayClubClubMatchups string
	ClubPlayers          string
}{
	HomeClubClubMatchups: "HomeClubClubMatchups",
	AwayClubClubMatchups: "AwayClubClubMatchups",
	ClubPlayers:          "ClubPlayers",
}

// clubR is where relationships are stored.
type clubR struct {
	HomeClubClubMatchups ClubMatchupSlice `boil:"HomeClubClubMatchups" json:"HomeClubClubMatchups" toml:"HomeClubClubMatchups" yaml:"HomeClubClubMatchups"`
	AwayClubClubMatchups ClubMatchupSlice `boil:"AwayClubClubMatchups" json:"AwayClubClubMatchups" toml:"AwayClubClubMatchups" yaml:"AwayClubClubMatchups"`
	ClubPlayers          PlayerSlice      `boil:"ClubPlayers" json:"ClubPlayers" toml:"ClubPlayers" yaml:"ClubPlayers"`
}

// NewStruct creates a new relationship struct
func (*clubR) NewStruct() *clubR {
	return &clubR{}
}

// clubL is where Load methods for each relationship are stored.
type clubL struct{}

var (
	clubAllColumns            = []string{"id", "name", "created_at", "deleted_at"}
	clubColumnsWithoutDefault = []string{"name"}
	clubColumnsWithDefault    = []string{"id", "created_at", "deleted_at"}
	clubPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClubSlice is an alias for a slice of pointers to Club.
	// This should generally be used opposed to []Club.
	ClubSlice []*Club
	// ClubHook is the signature for custom Club hook methods
	ClubHook func(boil.Executor, *Club) error

	clubQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clubType                 = reflect.TypeOf(&Club{})
	clubMapping              = queries.MakeStructMapping(clubType)
	clubPrimaryKeyMapping, _ = queries.BindMapping(clubType, clubMapping, clubPrimaryKeyColumns)
	clubInsertCacheMut       sync.RWMutex
	clubInsertCache          = make(map[string]insertCache)
	clubUpdateCacheMut       sync.RWMutex
	clubUpdateCache          = make(map[string]updateCache)
	clubUpsertCacheMut       sync.RWMutex
	clubUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clubBeforeInsertHooks []ClubHook
var clubBeforeUpdateHooks []ClubHook
var clubBeforeDeleteHooks []ClubHook
var clubBeforeUpsertHooks []ClubHook

var clubAfterInsertHooks []ClubHook
var clubAfterSelectHooks []ClubHook
var clubAfterUpdateHooks []ClubHook
var clubAfterDeleteHooks []ClubHook
var clubAfterUpsertHooks []ClubHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Club) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Club) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Club) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Club) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Club) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Club) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Club) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Club) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Club) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClubHook registers your hook function for all future operations.
func AddClubHook(hookPoint boil.HookPoint, clubHook ClubHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clubBeforeInsertHooks = append(clubBeforeInsertHooks, clubHook)
	case boil.BeforeUpdateHook:
		clubBeforeUpdateHooks = append(clubBeforeUpdateHooks, clubHook)
	case boil.BeforeDeleteHook:
		clubBeforeDeleteHooks = append(clubBeforeDeleteHooks, clubHook)
	case boil.BeforeUpsertHook:
		clubBeforeUpsertHooks = append(clubBeforeUpsertHooks, clubHook)
	case boil.AfterInsertHook:
		clubAfterInsertHooks = append(clubAfterInsertHooks, clubHook)
	case boil.AfterSelectHook:
		clubAfterSelectHooks = append(clubAfterSelectHooks, clubHook)
	case boil.AfterUpdateHook:
		clubAfterUpdateHooks = append(clubAfterUpdateHooks, clubHook)
	case boil.AfterDeleteHook:
		clubAfterDeleteHooks = append(clubAfterDeleteHooks, clubHook)
	case boil.AfterUpsertHook:
		clubAfterUpsertHooks = append(clubAfterUpsertHooks, clubHook)
	}
}

// One returns a single club record from the query.
func (q clubQuery) One(exec boil.Executor) (*Club, error) {
	o := &Club{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Clubs")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Club records from the query.
func (q clubQuery) All(exec boil.Executor) (ClubSlice, error) {
	var o []*Club

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Club slice")
	}

	if len(clubAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Club records in the query.
func (q clubQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Clubs rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clubQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Clubs exists")
	}

	return count > 0, nil
}

// HomeClubClubMatchups retrieves all the ClubMatchup's ClubMatchups with an executor via home_club column.
func (o *Club) HomeClubClubMatchups(mods ...qm.QueryMod) clubMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ClubMatchups`.`home_club`=?", o.ID),
	)

	query := ClubMatchups(queryMods...)
	queries.SetFrom(query.Query, "`ClubMatchups`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ClubMatchups`.*"})
	}

	return query
}

// AwayClubClubMatchups retrieves all the ClubMatchup's ClubMatchups with an executor via away_club column.
func (o *Club) AwayClubClubMatchups(mods ...qm.QueryMod) clubMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`ClubMatchups`.`away_club`=?", o.ID),
	)

	query := ClubMatchups(queryMods...)
	queries.SetFrom(query.Query, "`ClubMatchups`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`ClubMatchups`.*"})
	}

	return query
}

// ClubPlayers retrieves all the Player's Players with an executor via club_id column.
func (o *Club) ClubPlayers(mods ...qm.QueryMod) playerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`Players`.`club_id`=?", o.ID),
	)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "`Players`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`Players`.*"})
	}

	return query
}

// LoadHomeClubClubMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadHomeClubClubMatchups(e boil.Executor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ClubMatchups`),
		qm.WhereIn(`ClubMatchups.home_club in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ClubMatchups")
	}

	var resultSlice []*ClubMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ClubMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ClubMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ClubMatchups")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HomeClubClubMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clubMatchupR{}
			}
			foreign.R.HomeClubClub = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HomeClub) {
				local.R.HomeClubClubMatchups = append(local.R.HomeClubClubMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &clubMatchupR{}
				}
				foreign.R.HomeClubClub = local
				break
			}
		}
	}

	return nil
}

// LoadAwayClubClubMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadAwayClubClubMatchups(e boil.Executor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ClubMatchups`),
		qm.WhereIn(`ClubMatchups.away_club in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ClubMatchups")
	}

	var resultSlice []*ClubMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ClubMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ClubMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ClubMatchups")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AwayClubClubMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clubMatchupR{}
			}
			foreign.R.AwayClubClub = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AwayClub) {
				local.R.AwayClubClubMatchups = append(local.R.AwayClubClubMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &clubMatchupR{}
				}
				foreign.R.AwayClubClub = local
				break
			}
		}
	}

	return nil
}

// LoadClubPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clubL) LoadClubPlayers(e boil.Executor, singular bool, maybeClub interface{}, mods queries.Applicator) error {
	var slice []*Club
	var object *Club

	if singular {
		object = maybeClub.(*Club)
	} else {
		slice = *maybeClub.(*[]*Club)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Players`),
		qm.WhereIn(`Players.club_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Players")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Players")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Players")
	}

	if len(playerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ClubPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerR{}
			}
			foreign.R.Club = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ClubID) {
				local.R.ClubPlayers = append(local.R.ClubPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.Club = local
				break
			}
		}
	}

	return nil
}

// AddHomeClubClubMatchups adds the given related objects to the existing relationships
// of the Club, optionally inserting them as new records.
// Appends related to o.R.HomeClubClubMatchups.
// Sets related.R.HomeClubClub appropriately.
func (o *Club) AddHomeClubClubMatchups(exec boil.Executor, insert bool, related ...*ClubMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HomeClub, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ClubMatchups` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"home_club"}),
				strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HomeClub, o.ID)
		}
	}

	if o.R == nil {
		o.R = &clubR{
			HomeClubClubMatchups: related,
		}
	} else {
		o.R.HomeClubClubMatchups = append(o.R.HomeClubClubMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clubMatchupR{
				HomeClubClub: o,
			}
		} else {
			rel.R.HomeClubClub = o
		}
	}
	return nil
}

// SetHomeClubClubMatchups removes all previously related items of the
// Club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.HomeClubClub's HomeClubClubMatchups accordingly.
// Replaces o.R.HomeClubClubMatchups with related.
// Sets related.R.HomeClubClub's HomeClubClubMatchups accordingly.
func (o *Club) SetHomeClubClubMatchups(exec boil.Executor, insert bool, related ...*ClubMatchup) error {
	query := "update `ClubMatchups` set `home_club` = null where `home_club` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HomeClubClubMatchups {
			queries.SetScanner(&rel.HomeClub, nil)
			if rel.R == nil {
				continue
			}

			rel.R.HomeClubClub = nil
		}

		o.R.HomeClubClubMatchups = nil
	}
	return o.AddHomeClubClubMatchups(exec, insert, related...)
}

// RemoveHomeClubClubMatchups relationships from objects passed in.
// Removes related items from R.HomeClubClubMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.HomeClubClub.
func (o *Club) RemoveHomeClubClubMatchups(exec boil.Executor, related ...*ClubMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HomeClub, nil)
		if rel.R != nil {
			rel.R.HomeClubClub = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("home_club")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HomeClubClubMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.HomeClubClubMatchups)
			if ln > 1 && i < ln-1 {
				o.R.HomeClubClubMatchups[i] = o.R.HomeClubClubMatchups[ln-1]
			}
			o.R.HomeClubClubMatchups = o.R.HomeClubClubMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddAwayClubClubMatchups adds the given related objects to the existing relationships
// of the Club, optionally inserting them as new records.
// Appends related to o.R.AwayClubClubMatchups.
// Sets related.R.AwayClubClub appropriately.
func (o *Club) AddAwayClubClubMatchups(exec boil.Executor, insert bool, related ...*ClubMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AwayClub, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `ClubMatchups` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"away_club"}),
				strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AwayClub, o.ID)
		}
	}

	if o.R == nil {
		o.R = &clubR{
			AwayClubClubMatchups: related,
		}
	} else {
		o.R.AwayClubClubMatchups = append(o.R.AwayClubClubMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clubMatchupR{
				AwayClubClub: o,
			}
		} else {
			rel.R.AwayClubClub = o
		}
	}
	return nil
}

// SetAwayClubClubMatchups removes all previously related items of the
// Club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AwayClubClub's AwayClubClubMatchups accordingly.
// Replaces o.R.AwayClubClubMatchups with related.
// Sets related.R.AwayClubClub's AwayClubClubMatchups accordingly.
func (o *Club) SetAwayClubClubMatchups(exec boil.Executor, insert bool, related ...*ClubMatchup) error {
	query := "update `ClubMatchups` set `away_club` = null where `away_club` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AwayClubClubMatchups {
			queries.SetScanner(&rel.AwayClub, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AwayClubClub = nil
		}

		o.R.AwayClubClubMatchups = nil
	}
	return o.AddAwayClubClubMatchups(exec, insert, related...)
}

// RemoveAwayClubClubMatchups relationships from objects passed in.
// Removes related items from R.AwayClubClubMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.AwayClubClub.
func (o *Club) RemoveAwayClubClubMatchups(exec boil.Executor, related ...*ClubMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AwayClub, nil)
		if rel.R != nil {
			rel.R.AwayClubClub = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("away_club")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AwayClubClubMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.AwayClubClubMatchups)
			if ln > 1 && i < ln-1 {
				o.R.AwayClubClubMatchups[i] = o.R.AwayClubClubMatchups[ln-1]
			}
			o.R.AwayClubClubMatchups = o.R.AwayClubClubMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddClubPlayers adds the given related objects to the existing relationships
// of the Club, optionally inserting them as new records.
// Appends related to o.R.ClubPlayers.
// Sets related.R.Club appropriately.
func (o *Club) AddClubPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ClubID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `Players` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"club_id"}),
				strmangle.WhereClause("`", "`", 0, playerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ClubID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &clubR{
			ClubPlayers: related,
		}
	} else {
		o.R.ClubPlayers = append(o.R.ClubPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerR{
				Club: o,
			}
		} else {
			rel.R.Club = o
		}
	}
	return nil
}

// SetClubPlayers removes all previously related items of the
// Club replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Club's ClubPlayers accordingly.
// Replaces o.R.ClubPlayers with related.
// Sets related.R.Club's ClubPlayers accordingly.
func (o *Club) SetClubPlayers(exec boil.Executor, insert bool, related ...*Player) error {
	query := "update `Players` set `club_id` = null where `club_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ClubPlayers {
			queries.SetScanner(&rel.ClubID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Club = nil
		}

		o.R.ClubPlayers = nil
	}
	return o.AddClubPlayers(exec, insert, related...)
}

// RemoveClubPlayers relationships from objects passed in.
// Removes related items from R.ClubPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.Club.
func (o *Club) RemoveClubPlayers(exec boil.Executor, related ...*Player) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ClubID, nil)
		if rel.R != nil {
			rel.R.Club = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("club_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ClubPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.ClubPlayers)
			if ln > 1 && i < ln-1 {
				o.R.ClubPlayers[i] = o.R.ClubPlayers[ln-1]
			}
			o.R.ClubPlayers = o.R.ClubPlayers[:ln-1]
			break
		}
	}

	return nil
}

// Clubs retrieves all the records using an executor.
func Clubs(mods ...qm.QueryMod) clubQuery {
	mods = append(mods, qm.From("`Clubs`"))
	return clubQuery{NewQuery(mods...)}
}

// FindClub retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClub(exec boil.Executor, iD int, selectCols ...string) (*Club, error) {
	clubObj := &Club{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `Clubs` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, clubObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Clubs")
	}

	return clubObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Club) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Clubs provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clubInsertCacheMut.RLock()
	cache, cached := clubInsertCache[key]
	clubInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clubAllColumns,
			clubColumnsWithDefault,
			clubColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clubType, clubMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `Clubs` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `Clubs` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `Clubs` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clubPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Clubs")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clubMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for Clubs")
	}

CacheNoHooks:
	if !cached {
		clubInsertCacheMut.Lock()
		clubInsertCache[key] = cache
		clubInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Club.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Club) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clubUpdateCacheMut.RLock()
	cache, cached := clubUpdateCache[key]
	clubUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clubAllColumns,
			clubPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Clubs, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `Clubs` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clubPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, append(wl, clubPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Clubs row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Clubs")
	}

	if !cached {
		clubUpdateCacheMut.Lock()
		clubUpdateCache[key] = cache
		clubUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clubQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Clubs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Clubs")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClubSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `Clubs` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in club slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all club")
	}
	return rowsAff, nil
}

var mySQLClubUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Club) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Clubs provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClubUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clubUpsertCacheMut.RLock()
	cache, cached := clubUpsertCache[key]
	clubUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clubAllColumns,
			clubColumnsWithDefault,
			clubColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clubAllColumns,
			clubPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Clubs, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`Clubs`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `Clubs` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clubType, clubMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clubType, clubMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for Clubs")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clubMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clubType, clubMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for Clubs")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for Clubs")
	}

CacheNoHooks:
	if !cached {
		clubUpsertCacheMut.Lock()
		clubUpsertCache[key] = cache
		clubUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Club record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Club) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Club provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clubPrimaryKeyMapping)
	sql := "DELETE FROM `Clubs` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Clubs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Clubs")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clubQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no clubQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Clubs")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Clubs")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClubSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clubBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `Clubs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from club slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Clubs")
	}

	if len(clubAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Club) Reload(exec boil.Executor) error {
	ret, err := FindClub(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClubSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClubSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `Clubs`.* FROM `Clubs` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in ClubSlice")
	}

	*o = slice

	return nil
}

// ClubExists checks if the Club row exists.
func ClubExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `Clubs` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Clubs exists")
	}

	return exists, nil
}
