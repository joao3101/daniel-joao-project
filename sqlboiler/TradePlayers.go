// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TradePlayer is an object representing the database table.
type TradePlayer struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamPlayerID null.Int  `boil:"team_player_id" json:"team_player_id,omitempty" toml:"team_player_id" yaml:"team_player_id,omitempty"`
	TradeID      null.Int  `boil:"trade_id" json:"trade_id,omitempty" toml:"trade_id" yaml:"trade_id,omitempty"`
	CurrentTeam  null.Int  `boil:"current_team" json:"current_team,omitempty" toml:"current_team" yaml:"current_team,omitempty"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt    time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *tradePlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tradePlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TradePlayerColumns = struct {
	ID           string
	TeamPlayerID string
	TradeID      string
	CurrentTeam  string
	CreatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	TeamPlayerID: "team_player_id",
	TradeID:      "trade_id",
	CurrentTeam:  "current_team",
	CreatedAt:    "created_at",
	DeletedAt:    "deleted_at",
}

// Generated where

var TradePlayerWhere = struct {
	ID           whereHelperint
	TeamPlayerID whereHelpernull_Int
	TradeID      whereHelpernull_Int
	CurrentTeam  whereHelpernull_Int
	CreatedAt    whereHelpertime_Time
	DeletedAt    whereHelpertime_Time
}{
	ID:           whereHelperint{field: "`TradePlayers`.`id`"},
	TeamPlayerID: whereHelpernull_Int{field: "`TradePlayers`.`team_player_id`"},
	TradeID:      whereHelpernull_Int{field: "`TradePlayers`.`trade_id`"},
	CurrentTeam:  whereHelpernull_Int{field: "`TradePlayers`.`current_team`"},
	CreatedAt:    whereHelpertime_Time{field: "`TradePlayers`.`created_at`"},
	DeletedAt:    whereHelpertime_Time{field: "`TradePlayers`.`deleted_at`"},
}

// TradePlayerRels is where relationship names are stored.
var TradePlayerRels = struct {
	TeamPlayer      string
	Trade           string
	CurrentTeamTeam string
}{
	TeamPlayer:      "TeamPlayer",
	Trade:           "Trade",
	CurrentTeamTeam: "CurrentTeamTeam",
}

// tradePlayerR is where relationships are stored.
type tradePlayerR struct {
	TeamPlayer      *TeamPlayer `boil:"TeamPlayer" json:"TeamPlayer" toml:"TeamPlayer" yaml:"TeamPlayer"`
	Trade           *Trade      `boil:"Trade" json:"Trade" toml:"Trade" yaml:"Trade"`
	CurrentTeamTeam *Team       `boil:"CurrentTeamTeam" json:"CurrentTeamTeam" toml:"CurrentTeamTeam" yaml:"CurrentTeamTeam"`
}

// NewStruct creates a new relationship struct
func (*tradePlayerR) NewStruct() *tradePlayerR {
	return &tradePlayerR{}
}

// tradePlayerL is where Load methods for each relationship are stored.
type tradePlayerL struct{}

var (
	tradePlayerAllColumns            = []string{"id", "team_player_id", "trade_id", "current_team", "created_at", "deleted_at"}
	tradePlayerColumnsWithoutDefault = []string{"team_player_id", "trade_id", "current_team"}
	tradePlayerColumnsWithDefault    = []string{"id", "created_at", "deleted_at"}
	tradePlayerPrimaryKeyColumns     = []string{"id"}
)

type (
	// TradePlayerSlice is an alias for a slice of pointers to TradePlayer.
	// This should generally be used opposed to []TradePlayer.
	TradePlayerSlice []*TradePlayer
	// TradePlayerHook is the signature for custom TradePlayer hook methods
	TradePlayerHook func(boil.Executor, *TradePlayer) error

	tradePlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tradePlayerType                 = reflect.TypeOf(&TradePlayer{})
	tradePlayerMapping              = queries.MakeStructMapping(tradePlayerType)
	tradePlayerPrimaryKeyMapping, _ = queries.BindMapping(tradePlayerType, tradePlayerMapping, tradePlayerPrimaryKeyColumns)
	tradePlayerInsertCacheMut       sync.RWMutex
	tradePlayerInsertCache          = make(map[string]insertCache)
	tradePlayerUpdateCacheMut       sync.RWMutex
	tradePlayerUpdateCache          = make(map[string]updateCache)
	tradePlayerUpsertCacheMut       sync.RWMutex
	tradePlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tradePlayerBeforeInsertHooks []TradePlayerHook
var tradePlayerBeforeUpdateHooks []TradePlayerHook
var tradePlayerBeforeDeleteHooks []TradePlayerHook
var tradePlayerBeforeUpsertHooks []TradePlayerHook

var tradePlayerAfterInsertHooks []TradePlayerHook
var tradePlayerAfterSelectHooks []TradePlayerHook
var tradePlayerAfterUpdateHooks []TradePlayerHook
var tradePlayerAfterDeleteHooks []TradePlayerHook
var tradePlayerAfterUpsertHooks []TradePlayerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TradePlayer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TradePlayer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TradePlayer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TradePlayer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TradePlayer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TradePlayer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TradePlayer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TradePlayer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TradePlayer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tradePlayerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTradePlayerHook registers your hook function for all future operations.
func AddTradePlayerHook(hookPoint boil.HookPoint, tradePlayerHook TradePlayerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tradePlayerBeforeInsertHooks = append(tradePlayerBeforeInsertHooks, tradePlayerHook)
	case boil.BeforeUpdateHook:
		tradePlayerBeforeUpdateHooks = append(tradePlayerBeforeUpdateHooks, tradePlayerHook)
	case boil.BeforeDeleteHook:
		tradePlayerBeforeDeleteHooks = append(tradePlayerBeforeDeleteHooks, tradePlayerHook)
	case boil.BeforeUpsertHook:
		tradePlayerBeforeUpsertHooks = append(tradePlayerBeforeUpsertHooks, tradePlayerHook)
	case boil.AfterInsertHook:
		tradePlayerAfterInsertHooks = append(tradePlayerAfterInsertHooks, tradePlayerHook)
	case boil.AfterSelectHook:
		tradePlayerAfterSelectHooks = append(tradePlayerAfterSelectHooks, tradePlayerHook)
	case boil.AfterUpdateHook:
		tradePlayerAfterUpdateHooks = append(tradePlayerAfterUpdateHooks, tradePlayerHook)
	case boil.AfterDeleteHook:
		tradePlayerAfterDeleteHooks = append(tradePlayerAfterDeleteHooks, tradePlayerHook)
	case boil.AfterUpsertHook:
		tradePlayerAfterUpsertHooks = append(tradePlayerAfterUpsertHooks, tradePlayerHook)
	}
}

// One returns a single tradePlayer record from the query.
func (q tradePlayerQuery) One(exec boil.Executor) (*TradePlayer, error) {
	o := &TradePlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for TradePlayers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TradePlayer records from the query.
func (q tradePlayerQuery) All(exec boil.Executor) (TradePlayerSlice, error) {
	var o []*TradePlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to TradePlayer slice")
	}

	if len(tradePlayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TradePlayer records in the query.
func (q tradePlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count TradePlayers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tradePlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if TradePlayers exists")
	}

	return count > 0, nil
}

// TeamPlayer pointed to by the foreign key.
func (o *TradePlayer) TeamPlayer(mods ...qm.QueryMod) teamPlayerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TeamPlayerID),
	}

	queryMods = append(queryMods, mods...)

	query := TeamPlayers(queryMods...)
	queries.SetFrom(query.Query, "`TeamPlayers`")

	return query
}

// Trade pointed to by the foreign key.
func (o *TradePlayer) Trade(mods ...qm.QueryMod) tradeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TradeID),
	}

	queryMods = append(queryMods, mods...)

	query := Trades(queryMods...)
	queries.SetFrom(query.Query, "`Trades`")

	return query
}

// CurrentTeamTeam pointed to by the foreign key.
func (o *TradePlayer) CurrentTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CurrentTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`Teams`")

	return query
}

// LoadTeamPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradePlayerL) LoadTeamPlayer(e boil.Executor, singular bool, maybeTradePlayer interface{}, mods queries.Applicator) error {
	var slice []*TradePlayer
	var object *TradePlayer

	if singular {
		object = maybeTradePlayer.(*TradePlayer)
	} else {
		slice = *maybeTradePlayer.(*[]*TradePlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradePlayerR{}
		}
		if !queries.IsNil(object.TeamPlayerID) {
			args = append(args, object.TeamPlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradePlayerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamPlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamPlayerID) {
				args = append(args, obj.TeamPlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamPlayers`),
		qm.WhereIn(`TeamPlayers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamPlayer")
	}

	var resultSlice []*TeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamPlayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TeamPlayers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamPlayers")
	}

	if len(tradePlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TeamPlayer = foreign
		if foreign.R == nil {
			foreign.R = &teamPlayerR{}
		}
		foreign.R.TeamPlayerTradePlayers = append(foreign.R.TeamPlayerTradePlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamPlayerID, foreign.ID) {
				local.R.TeamPlayer = foreign
				if foreign.R == nil {
					foreign.R = &teamPlayerR{}
				}
				foreign.R.TeamPlayerTradePlayers = append(foreign.R.TeamPlayerTradePlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadTrade allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradePlayerL) LoadTrade(e boil.Executor, singular bool, maybeTradePlayer interface{}, mods queries.Applicator) error {
	var slice []*TradePlayer
	var object *TradePlayer

	if singular {
		object = maybeTradePlayer.(*TradePlayer)
	} else {
		slice = *maybeTradePlayer.(*[]*TradePlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradePlayerR{}
		}
		if !queries.IsNil(object.TradeID) {
			args = append(args, object.TradeID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradePlayerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TradeID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TradeID) {
				args = append(args, obj.TradeID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Trades`),
		qm.WhereIn(`Trades.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trade")
	}

	var resultSlice []*Trade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trade")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Trades")
	}

	if len(tradePlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Trade = foreign
		if foreign.R == nil {
			foreign.R = &tradeR{}
		}
		foreign.R.TradeTradePlayers = append(foreign.R.TradeTradePlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TradeID, foreign.ID) {
				local.R.Trade = foreign
				if foreign.R == nil {
					foreign.R = &tradeR{}
				}
				foreign.R.TradeTradePlayers = append(foreign.R.TradeTradePlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadCurrentTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tradePlayerL) LoadCurrentTeamTeam(e boil.Executor, singular bool, maybeTradePlayer interface{}, mods queries.Applicator) error {
	var slice []*TradePlayer
	var object *TradePlayer

	if singular {
		object = maybeTradePlayer.(*TradePlayer)
	} else {
		slice = *maybeTradePlayer.(*[]*TradePlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &tradePlayerR{}
		}
		if !queries.IsNil(object.CurrentTeam) {
			args = append(args, object.CurrentTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tradePlayerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.CurrentTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.CurrentTeam) {
				args = append(args, obj.CurrentTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(tradePlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CurrentTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.CurrentTeamTradePlayers = append(foreign.R.CurrentTeamTradePlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CurrentTeam, foreign.ID) {
				local.R.CurrentTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.CurrentTeamTradePlayers = append(foreign.R.CurrentTeamTradePlayers, local)
				break
			}
		}
	}

	return nil
}

// SetTeamPlayer of the tradePlayer to the related item.
// Sets o.R.TeamPlayer to related.
// Adds o to related.R.TeamPlayerTradePlayers.
func (o *TradePlayer) SetTeamPlayer(exec boil.Executor, insert bool, related *TeamPlayer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TradePlayers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"team_player_id"}),
		strmangle.WhereClause("`", "`", 0, tradePlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamPlayerID, related.ID)
	if o.R == nil {
		o.R = &tradePlayerR{
			TeamPlayer: related,
		}
	} else {
		o.R.TeamPlayer = related
	}

	if related.R == nil {
		related.R = &teamPlayerR{
			TeamPlayerTradePlayers: TradePlayerSlice{o},
		}
	} else {
		related.R.TeamPlayerTradePlayers = append(related.R.TeamPlayerTradePlayers, o)
	}

	return nil
}

// RemoveTeamPlayer relationship.
// Sets o.R.TeamPlayer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TradePlayer) RemoveTeamPlayer(exec boil.Executor, related *TeamPlayer) error {
	var err error

	queries.SetScanner(&o.TeamPlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("team_player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TeamPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeamPlayerTradePlayers {
		if queries.Equal(o.TeamPlayerID, ri.TeamPlayerID) {
			continue
		}

		ln := len(related.R.TeamPlayerTradePlayers)
		if ln > 1 && i < ln-1 {
			related.R.TeamPlayerTradePlayers[i] = related.R.TeamPlayerTradePlayers[ln-1]
		}
		related.R.TeamPlayerTradePlayers = related.R.TeamPlayerTradePlayers[:ln-1]
		break
	}
	return nil
}

// SetTrade of the tradePlayer to the related item.
// Sets o.R.Trade to related.
// Adds o to related.R.TradeTradePlayers.
func (o *TradePlayer) SetTrade(exec boil.Executor, insert bool, related *Trade) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TradePlayers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"trade_id"}),
		strmangle.WhereClause("`", "`", 0, tradePlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TradeID, related.ID)
	if o.R == nil {
		o.R = &tradePlayerR{
			Trade: related,
		}
	} else {
		o.R.Trade = related
	}

	if related.R == nil {
		related.R = &tradeR{
			TradeTradePlayers: TradePlayerSlice{o},
		}
	} else {
		related.R.TradeTradePlayers = append(related.R.TradeTradePlayers, o)
	}

	return nil
}

// RemoveTrade relationship.
// Sets o.R.Trade to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TradePlayer) RemoveTrade(exec boil.Executor, related *Trade) error {
	var err error

	queries.SetScanner(&o.TradeID, nil)
	if _, err = o.Update(exec, boil.Whitelist("trade_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Trade = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TradeTradePlayers {
		if queries.Equal(o.TradeID, ri.TradeID) {
			continue
		}

		ln := len(related.R.TradeTradePlayers)
		if ln > 1 && i < ln-1 {
			related.R.TradeTradePlayers[i] = related.R.TradeTradePlayers[ln-1]
		}
		related.R.TradeTradePlayers = related.R.TradeTradePlayers[:ln-1]
		break
	}
	return nil
}

// SetCurrentTeamTeam of the tradePlayer to the related item.
// Sets o.R.CurrentTeamTeam to related.
// Adds o to related.R.CurrentTeamTradePlayers.
func (o *TradePlayer) SetCurrentTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TradePlayers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"current_team"}),
		strmangle.WhereClause("`", "`", 0, tradePlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CurrentTeam, related.ID)
	if o.R == nil {
		o.R = &tradePlayerR{
			CurrentTeamTeam: related,
		}
	} else {
		o.R.CurrentTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			CurrentTeamTradePlayers: TradePlayerSlice{o},
		}
	} else {
		related.R.CurrentTeamTradePlayers = append(related.R.CurrentTeamTradePlayers, o)
	}

	return nil
}

// RemoveCurrentTeamTeam relationship.
// Sets o.R.CurrentTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TradePlayer) RemoveCurrentTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.CurrentTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("current_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CurrentTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CurrentTeamTradePlayers {
		if queries.Equal(o.CurrentTeam, ri.CurrentTeam) {
			continue
		}

		ln := len(related.R.CurrentTeamTradePlayers)
		if ln > 1 && i < ln-1 {
			related.R.CurrentTeamTradePlayers[i] = related.R.CurrentTeamTradePlayers[ln-1]
		}
		related.R.CurrentTeamTradePlayers = related.R.CurrentTeamTradePlayers[:ln-1]
		break
	}
	return nil
}

// TradePlayers retrieves all the records using an executor.
func TradePlayers(mods ...qm.QueryMod) tradePlayerQuery {
	mods = append(mods, qm.From("`TradePlayers`"))
	return tradePlayerQuery{NewQuery(mods...)}
}

// FindTradePlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTradePlayer(exec boil.Executor, iD int, selectCols ...string) (*TradePlayer, error) {
	tradePlayerObj := &TradePlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TradePlayers` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, tradePlayerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from TradePlayers")
	}

	return tradePlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TradePlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TradePlayers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradePlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tradePlayerInsertCacheMut.RLock()
	cache, cached := tradePlayerInsertCache[key]
	tradePlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tradePlayerAllColumns,
			tradePlayerColumnsWithDefault,
			tradePlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tradePlayerType, tradePlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tradePlayerType, tradePlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TradePlayers` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TradePlayers` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TradePlayers` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, tradePlayerPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into TradePlayers")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tradePlayerMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for TradePlayers")
	}

CacheNoHooks:
	if !cached {
		tradePlayerInsertCacheMut.Lock()
		tradePlayerInsertCache[key] = cache
		tradePlayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TradePlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TradePlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tradePlayerUpdateCacheMut.RLock()
	cache, cached := tradePlayerUpdateCache[key]
	tradePlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tradePlayerAllColumns,
			tradePlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update TradePlayers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TradePlayers` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, tradePlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tradePlayerType, tradePlayerMapping, append(wl, tradePlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update TradePlayers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for TradePlayers")
	}

	if !cached {
		tradePlayerUpdateCacheMut.Lock()
		tradePlayerUpdateCache[key] = cache
		tradePlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tradePlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for TradePlayers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for TradePlayers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TradePlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TradePlayers` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tradePlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in tradePlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all tradePlayer")
	}
	return rowsAff, nil
}

var mySQLTradePlayerUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TradePlayer) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TradePlayers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tradePlayerColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTradePlayerUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tradePlayerUpsertCacheMut.RLock()
	cache, cached := tradePlayerUpsertCache[key]
	tradePlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			tradePlayerAllColumns,
			tradePlayerColumnsWithDefault,
			tradePlayerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			tradePlayerAllColumns,
			tradePlayerPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert TradePlayers, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`TradePlayers`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TradePlayers` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(tradePlayerType, tradePlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tradePlayerType, tradePlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for TradePlayers")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == tradePlayerMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(tradePlayerType, tradePlayerMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for TradePlayers")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for TradePlayers")
	}

CacheNoHooks:
	if !cached {
		tradePlayerUpsertCacheMut.Lock()
		tradePlayerUpsertCache[key] = cache
		tradePlayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TradePlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TradePlayer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no TradePlayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tradePlayerPrimaryKeyMapping)
	sql := "DELETE FROM `TradePlayers` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from TradePlayers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for TradePlayers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tradePlayerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no tradePlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from TradePlayers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TradePlayers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TradePlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tradePlayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TradePlayers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tradePlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from tradePlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TradePlayers")
	}

	if len(tradePlayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TradePlayer) Reload(exec boil.Executor) error {
	ret, err := FindTradePlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TradePlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TradePlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tradePlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TradePlayers`.* FROM `TradePlayers` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, tradePlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in TradePlayerSlice")
	}

	*o = slice

	return nil
}

// TradePlayerExists checks if the TradePlayer row exists.
func TradePlayerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TradePlayers` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if TradePlayers exists")
	}

	return exists, nil
}
