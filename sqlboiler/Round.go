// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Round is an object representing the database table.
type Round struct {
	ID          int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoundName   null.String `boil:"round_name" json:"round_name,omitempty" toml:"round_name" yaml:"round_name,omitempty"`
	RoundNumber null.Int    `boil:"round_number" json:"round_number,omitempty" toml:"round_number" yaml:"round_number,omitempty"`
	StartDate   null.Time   `boil:"start_date" json:"start_date,omitempty" toml:"start_date" yaml:"start_date,omitempty"`
	EndDate     null.Time   `boil:"end_date" json:"end_date,omitempty" toml:"end_date" yaml:"end_date,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt   null.Time   `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *roundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoundColumns = struct {
	ID          string
	RoundName   string
	RoundNumber string
	StartDate   string
	EndDate     string
	CreatedAt   string
	DeletedAt   string
}{
	ID:          "id",
	RoundName:   "round_name",
	RoundNumber: "round_number",
	StartDate:   "start_date",
	EndDate:     "end_date",
	CreatedAt:   "created_at",
	DeletedAt:   "deleted_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var RoundWhere = struct {
	ID          whereHelperint
	RoundName   whereHelpernull_String
	RoundNumber whereHelpernull_Int
	StartDate   whereHelpernull_Time
	EndDate     whereHelpernull_Time
	CreatedAt   whereHelpertime_Time
	DeletedAt   whereHelpernull_Time
}{
	ID:          whereHelperint{field: "\"Round\".\"id\""},
	RoundName:   whereHelpernull_String{field: "\"Round\".\"round_name\""},
	RoundNumber: whereHelpernull_Int{field: "\"Round\".\"round_number\""},
	StartDate:   whereHelpernull_Time{field: "\"Round\".\"start_date\""},
	EndDate:     whereHelpernull_Time{field: "\"Round\".\"end_date\""},
	CreatedAt:   whereHelpertime_Time{field: "\"Round\".\"created_at\""},
	DeletedAt:   whereHelpernull_Time{field: "\"Round\".\"deleted_at\""},
}

// RoundRels is where relationship names are stored.
var RoundRels = struct {
	RoundClubMatchups string
	RoundPlayerRounds string
	RoundTeamMatchups string
	RoundTeamRounds   string
}{
	RoundClubMatchups: "RoundClubMatchups",
	RoundPlayerRounds: "RoundPlayerRounds",
	RoundTeamMatchups: "RoundTeamMatchups",
	RoundTeamRounds:   "RoundTeamRounds",
}

// roundR is where relationships are stored.
type roundR struct {
	RoundClubMatchups ClubMatchupSlice `boil:"RoundClubMatchups" json:"RoundClubMatchups" toml:"RoundClubMatchups" yaml:"RoundClubMatchups"`
	RoundPlayerRounds PlayerRoundSlice `boil:"RoundPlayerRounds" json:"RoundPlayerRounds" toml:"RoundPlayerRounds" yaml:"RoundPlayerRounds"`
	RoundTeamMatchups TeamMatchupSlice `boil:"RoundTeamMatchups" json:"RoundTeamMatchups" toml:"RoundTeamMatchups" yaml:"RoundTeamMatchups"`
	RoundTeamRounds   TeamRoundSlice   `boil:"RoundTeamRounds" json:"RoundTeamRounds" toml:"RoundTeamRounds" yaml:"RoundTeamRounds"`
}

// NewStruct creates a new relationship struct
func (*roundR) NewStruct() *roundR {
	return &roundR{}
}

// roundL is where Load methods for each relationship are stored.
type roundL struct{}

var (
	roundAllColumns            = []string{"id", "round_name", "round_number", "start_date", "end_date", "created_at", "deleted_at"}
	roundColumnsWithoutDefault = []string{"round_name", "round_number", "start_date", "end_date", "created_at", "deleted_at"}
	roundColumnsWithDefault    = []string{"id"}
	roundPrimaryKeyColumns     = []string{"id"}
)

type (
	// RoundSlice is an alias for a slice of pointers to Round.
	// This should generally be used opposed to []Round.
	RoundSlice []*Round
	// RoundHook is the signature for custom Round hook methods
	RoundHook func(boil.Executor, *Round) error

	roundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roundType                 = reflect.TypeOf(&Round{})
	roundMapping              = queries.MakeStructMapping(roundType)
	roundPrimaryKeyMapping, _ = queries.BindMapping(roundType, roundMapping, roundPrimaryKeyColumns)
	roundInsertCacheMut       sync.RWMutex
	roundInsertCache          = make(map[string]insertCache)
	roundUpdateCacheMut       sync.RWMutex
	roundUpdateCache          = make(map[string]updateCache)
	roundUpsertCacheMut       sync.RWMutex
	roundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roundBeforeInsertHooks []RoundHook
var roundBeforeUpdateHooks []RoundHook
var roundBeforeDeleteHooks []RoundHook
var roundBeforeUpsertHooks []RoundHook

var roundAfterInsertHooks []RoundHook
var roundAfterSelectHooks []RoundHook
var roundAfterUpdateHooks []RoundHook
var roundAfterDeleteHooks []RoundHook
var roundAfterUpsertHooks []RoundHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Round) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Round) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Round) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Round) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Round) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Round) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Round) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Round) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Round) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roundAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoundHook registers your hook function for all future operations.
func AddRoundHook(hookPoint boil.HookPoint, roundHook RoundHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		roundBeforeInsertHooks = append(roundBeforeInsertHooks, roundHook)
	case boil.BeforeUpdateHook:
		roundBeforeUpdateHooks = append(roundBeforeUpdateHooks, roundHook)
	case boil.BeforeDeleteHook:
		roundBeforeDeleteHooks = append(roundBeforeDeleteHooks, roundHook)
	case boil.BeforeUpsertHook:
		roundBeforeUpsertHooks = append(roundBeforeUpsertHooks, roundHook)
	case boil.AfterInsertHook:
		roundAfterInsertHooks = append(roundAfterInsertHooks, roundHook)
	case boil.AfterSelectHook:
		roundAfterSelectHooks = append(roundAfterSelectHooks, roundHook)
	case boil.AfterUpdateHook:
		roundAfterUpdateHooks = append(roundAfterUpdateHooks, roundHook)
	case boil.AfterDeleteHook:
		roundAfterDeleteHooks = append(roundAfterDeleteHooks, roundHook)
	case boil.AfterUpsertHook:
		roundAfterUpsertHooks = append(roundAfterUpsertHooks, roundHook)
	}
}

// One returns a single round record from the query.
func (q roundQuery) One(exec boil.Executor) (*Round, error) {
	o := &Round{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Round")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Round records from the query.
func (q roundQuery) All(exec boil.Executor) (RoundSlice, error) {
	var o []*Round

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Round slice")
	}

	if len(roundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Round records in the query.
func (q roundQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Round rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q roundQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Round exists")
	}

	return count > 0, nil
}

// RoundClubMatchups retrieves all the ClubMatchup's ClubMatchups with an executor via round_id column.
func (o *Round) RoundClubMatchups(mods ...qm.QueryMod) clubMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ClubMatchups\".\"round_id\"=?", o.ID),
	)

	query := ClubMatchups(queryMods...)
	queries.SetFrom(query.Query, "\"ClubMatchups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"ClubMatchups\".*"})
	}

	return query
}

// RoundPlayerRounds retrieves all the PlayerRound's PlayerRounds with an executor via round_id column.
func (o *Round) RoundPlayerRounds(mods ...qm.QueryMod) playerRoundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"PlayerRounds\".\"round_id\"=?", o.ID),
	)

	query := PlayerRounds(queryMods...)
	queries.SetFrom(query.Query, "\"PlayerRounds\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"PlayerRounds\".*"})
	}

	return query
}

// RoundTeamMatchups retrieves all the TeamMatchup's TeamMatchups with an executor via round_id column.
func (o *Round) RoundTeamMatchups(mods ...qm.QueryMod) teamMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamMatchups\".\"round_id\"=?", o.ID),
	)

	query := TeamMatchups(queryMods...)
	queries.SetFrom(query.Query, "\"TeamMatchups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamMatchups\".*"})
	}

	return query
}

// RoundTeamRounds retrieves all the TeamRound's TeamRounds with an executor via round_id column.
func (o *Round) RoundTeamRounds(mods ...qm.QueryMod) teamRoundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamRounds\".\"round_id\"=?", o.ID),
	)

	query := TeamRounds(queryMods...)
	queries.SetFrom(query.Query, "\"TeamRounds\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamRounds\".*"})
	}

	return query
}

// LoadRoundClubMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roundL) LoadRoundClubMatchups(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ClubMatchups`),
		qm.WhereIn(`ClubMatchups.round_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ClubMatchups")
	}

	var resultSlice []*ClubMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ClubMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ClubMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ClubMatchups")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoundClubMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clubMatchupR{}
			}
			foreign.R.Round = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoundID) {
				local.R.RoundClubMatchups = append(local.R.RoundClubMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &clubMatchupR{}
				}
				foreign.R.Round = local
				break
			}
		}
	}

	return nil
}

// LoadRoundPlayerRounds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roundL) LoadRoundPlayerRounds(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`PlayerRounds`),
		qm.WhereIn(`PlayerRounds.round_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load PlayerRounds")
	}

	var resultSlice []*PlayerRound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice PlayerRounds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on PlayerRounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for PlayerRounds")
	}

	if len(playerRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoundPlayerRounds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &playerRoundR{}
			}
			foreign.R.Round = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoundID) {
				local.R.RoundPlayerRounds = append(local.R.RoundPlayerRounds, foreign)
				if foreign.R == nil {
					foreign.R = &playerRoundR{}
				}
				foreign.R.Round = local
				break
			}
		}
	}

	return nil
}

// LoadRoundTeamMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roundL) LoadRoundTeamMatchups(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamMatchups`),
		qm.WhereIn(`TeamMatchups.round_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamMatchups")
	}

	var resultSlice []*TeamMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamMatchups")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoundTeamMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamMatchupR{}
			}
			foreign.R.Round = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoundID) {
				local.R.RoundTeamMatchups = append(local.R.RoundTeamMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &teamMatchupR{}
				}
				foreign.R.Round = local
				break
			}
		}
	}

	return nil
}

// LoadRoundTeamRounds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roundL) LoadRoundTeamRounds(e boil.Executor, singular bool, maybeRound interface{}, mods queries.Applicator) error {
	var slice []*Round
	var object *Round

	if singular {
		object = maybeRound.(*Round)
	} else {
		slice = *maybeRound.(*[]*Round)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamRounds`),
		qm.WhereIn(`TeamRounds.round_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamRounds")
	}

	var resultSlice []*TeamRound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamRounds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamRounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamRounds")
	}

	if len(teamRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoundTeamRounds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamRoundR{}
			}
			foreign.R.Round = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.RoundID) {
				local.R.RoundTeamRounds = append(local.R.RoundTeamRounds, foreign)
				if foreign.R == nil {
					foreign.R = &teamRoundR{}
				}
				foreign.R.Round = local
				break
			}
		}
	}

	return nil
}

// AddRoundClubMatchups adds the given related objects to the existing relationships
// of the Round, optionally inserting them as new records.
// Appends related to o.R.RoundClubMatchups.
// Sets related.R.Round appropriately.
func (o *Round) AddRoundClubMatchups(exec boil.Executor, insert bool, related ...*ClubMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ClubMatchups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"round_id"}),
				strmangle.WhereClause("\"", "\"", 2, clubMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roundR{
			RoundClubMatchups: related,
		}
	} else {
		o.R.RoundClubMatchups = append(o.R.RoundClubMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clubMatchupR{
				Round: o,
			}
		} else {
			rel.R.Round = o
		}
	}
	return nil
}

// SetRoundClubMatchups removes all previously related items of the
// Round replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Round's RoundClubMatchups accordingly.
// Replaces o.R.RoundClubMatchups with related.
// Sets related.R.Round's RoundClubMatchups accordingly.
func (o *Round) SetRoundClubMatchups(exec boil.Executor, insert bool, related ...*ClubMatchup) error {
	query := "update \"ClubMatchups\" set \"round_id\" = null where \"round_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoundClubMatchups {
			queries.SetScanner(&rel.RoundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Round = nil
		}

		o.R.RoundClubMatchups = nil
	}
	return o.AddRoundClubMatchups(exec, insert, related...)
}

// RemoveRoundClubMatchups relationships from objects passed in.
// Removes related items from R.RoundClubMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.Round.
func (o *Round) RemoveRoundClubMatchups(exec boil.Executor, related ...*ClubMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoundID, nil)
		if rel.R != nil {
			rel.R.Round = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("round_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoundClubMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoundClubMatchups)
			if ln > 1 && i < ln-1 {
				o.R.RoundClubMatchups[i] = o.R.RoundClubMatchups[ln-1]
			}
			o.R.RoundClubMatchups = o.R.RoundClubMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddRoundPlayerRounds adds the given related objects to the existing relationships
// of the Round, optionally inserting them as new records.
// Appends related to o.R.RoundPlayerRounds.
// Sets related.R.Round appropriately.
func (o *Round) AddRoundPlayerRounds(exec boil.Executor, insert bool, related ...*PlayerRound) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"PlayerRounds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"round_id"}),
				strmangle.WhereClause("\"", "\"", 2, playerRoundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roundR{
			RoundPlayerRounds: related,
		}
	} else {
		o.R.RoundPlayerRounds = append(o.R.RoundPlayerRounds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &playerRoundR{
				Round: o,
			}
		} else {
			rel.R.Round = o
		}
	}
	return nil
}

// SetRoundPlayerRounds removes all previously related items of the
// Round replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Round's RoundPlayerRounds accordingly.
// Replaces o.R.RoundPlayerRounds with related.
// Sets related.R.Round's RoundPlayerRounds accordingly.
func (o *Round) SetRoundPlayerRounds(exec boil.Executor, insert bool, related ...*PlayerRound) error {
	query := "update \"PlayerRounds\" set \"round_id\" = null where \"round_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoundPlayerRounds {
			queries.SetScanner(&rel.RoundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Round = nil
		}

		o.R.RoundPlayerRounds = nil
	}
	return o.AddRoundPlayerRounds(exec, insert, related...)
}

// RemoveRoundPlayerRounds relationships from objects passed in.
// Removes related items from R.RoundPlayerRounds (uses pointer comparison, removal does not keep order)
// Sets related.R.Round.
func (o *Round) RemoveRoundPlayerRounds(exec boil.Executor, related ...*PlayerRound) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoundID, nil)
		if rel.R != nil {
			rel.R.Round = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("round_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoundPlayerRounds {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoundPlayerRounds)
			if ln > 1 && i < ln-1 {
				o.R.RoundPlayerRounds[i] = o.R.RoundPlayerRounds[ln-1]
			}
			o.R.RoundPlayerRounds = o.R.RoundPlayerRounds[:ln-1]
			break
		}
	}

	return nil
}

// AddRoundTeamMatchups adds the given related objects to the existing relationships
// of the Round, optionally inserting them as new records.
// Appends related to o.R.RoundTeamMatchups.
// Sets related.R.Round appropriately.
func (o *Round) AddRoundTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamMatchups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"round_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roundR{
			RoundTeamMatchups: related,
		}
	} else {
		o.R.RoundTeamMatchups = append(o.R.RoundTeamMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamMatchupR{
				Round: o,
			}
		} else {
			rel.R.Round = o
		}
	}
	return nil
}

// SetRoundTeamMatchups removes all previously related items of the
// Round replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Round's RoundTeamMatchups accordingly.
// Replaces o.R.RoundTeamMatchups with related.
// Sets related.R.Round's RoundTeamMatchups accordingly.
func (o *Round) SetRoundTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	query := "update \"TeamMatchups\" set \"round_id\" = null where \"round_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoundTeamMatchups {
			queries.SetScanner(&rel.RoundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Round = nil
		}

		o.R.RoundTeamMatchups = nil
	}
	return o.AddRoundTeamMatchups(exec, insert, related...)
}

// RemoveRoundTeamMatchups relationships from objects passed in.
// Removes related items from R.RoundTeamMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.Round.
func (o *Round) RemoveRoundTeamMatchups(exec boil.Executor, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoundID, nil)
		if rel.R != nil {
			rel.R.Round = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("round_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoundTeamMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoundTeamMatchups)
			if ln > 1 && i < ln-1 {
				o.R.RoundTeamMatchups[i] = o.R.RoundTeamMatchups[ln-1]
			}
			o.R.RoundTeamMatchups = o.R.RoundTeamMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddRoundTeamRounds adds the given related objects to the existing relationships
// of the Round, optionally inserting them as new records.
// Appends related to o.R.RoundTeamRounds.
// Sets related.R.Round appropriately.
func (o *Round) AddRoundTeamRounds(exec boil.Executor, insert bool, related ...*TeamRound) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.RoundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamRounds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"round_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamRoundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.RoundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &roundR{
			RoundTeamRounds: related,
		}
	} else {
		o.R.RoundTeamRounds = append(o.R.RoundTeamRounds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamRoundR{
				Round: o,
			}
		} else {
			rel.R.Round = o
		}
	}
	return nil
}

// SetRoundTeamRounds removes all previously related items of the
// Round replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Round's RoundTeamRounds accordingly.
// Replaces o.R.RoundTeamRounds with related.
// Sets related.R.Round's RoundTeamRounds accordingly.
func (o *Round) SetRoundTeamRounds(exec boil.Executor, insert bool, related ...*TeamRound) error {
	query := "update \"TeamRounds\" set \"round_id\" = null where \"round_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.RoundTeamRounds {
			queries.SetScanner(&rel.RoundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Round = nil
		}

		o.R.RoundTeamRounds = nil
	}
	return o.AddRoundTeamRounds(exec, insert, related...)
}

// RemoveRoundTeamRounds relationships from objects passed in.
// Removes related items from R.RoundTeamRounds (uses pointer comparison, removal does not keep order)
// Sets related.R.Round.
func (o *Round) RemoveRoundTeamRounds(exec boil.Executor, related ...*TeamRound) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.RoundID, nil)
		if rel.R != nil {
			rel.R.Round = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("round_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.RoundTeamRounds {
			if rel != ri {
				continue
			}

			ln := len(o.R.RoundTeamRounds)
			if ln > 1 && i < ln-1 {
				o.R.RoundTeamRounds[i] = o.R.RoundTeamRounds[ln-1]
			}
			o.R.RoundTeamRounds = o.R.RoundTeamRounds[:ln-1]
			break
		}
	}

	return nil
}

// Rounds retrieves all the records using an executor.
func Rounds(mods ...qm.QueryMod) roundQuery {
	mods = append(mods, qm.From("\"Round\""))
	return roundQuery{NewQuery(mods...)}
}

// FindRound retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRound(exec boil.Executor, iD int, selectCols ...string) (*Round, error) {
	roundObj := &Round{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Round\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, roundObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Round")
	}

	return roundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Round) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Round provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roundInsertCacheMut.RLock()
	cache, cached := roundInsertCache[key]
	roundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roundAllColumns,
			roundColumnsWithDefault,
			roundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roundType, roundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roundType, roundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Round\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Round\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Round")
	}

	if !cached {
		roundInsertCacheMut.Lock()
		roundInsertCache[key] = cache
		roundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Round.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Round) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roundUpdateCacheMut.RLock()
	cache, cached := roundUpdateCache[key]
	roundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roundAllColumns,
			roundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Round, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Round\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roundType, roundMapping, append(wl, roundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Round row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Round")
	}

	if !cached {
		roundUpdateCacheMut.Lock()
		roundUpdateCache[key] = cache
		roundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q roundQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Round")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Round")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoundSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Round\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roundPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in round slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all round")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Round) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Round provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roundColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roundUpsertCacheMut.RLock()
	cache, cached := roundUpsertCache[key]
	roundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roundAllColumns,
			roundColumnsWithDefault,
			roundColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roundAllColumns,
			roundPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Round, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roundPrimaryKeyColumns))
			copy(conflict, roundPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Round\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roundType, roundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roundType, roundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert Round")
	}

	if !cached {
		roundUpsertCacheMut.Lock()
		roundUpsertCache[key] = cache
		roundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Round record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Round) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Round provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roundPrimaryKeyMapping)
	sql := "DELETE FROM \"Round\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Round")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Round")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q roundQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no roundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Round")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Round")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoundSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Round\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roundPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from round slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Round")
	}

	if len(roundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Round) Reload(exec boil.Executor) error {
	ret, err := FindRound(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoundSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Round\".* FROM \"Round\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in RoundSlice")
	}

	*o = slice

	return nil
}

// RoundExists checks if the Round row exists.
func RoundExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Round\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Round exists")
	}

	return exists, nil
}
