// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Team is an object representing the database table.
type Team struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	UserID    int       `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	LeagueID  int       `boil:"league_id" json:"league_id" toml:"league_id" yaml:"league_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *teamR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamColumns = struct {
	ID        string
	Name      string
	UserID    string
	LeagueID  string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	UserID:    "user_id",
	LeagueID:  "league_id",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

var TeamWhere = struct {
	ID        whereHelperint
	Name      whereHelperstring
	UserID    whereHelperint
	LeagueID  whereHelperint
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"Teams\".\"id\""},
	Name:      whereHelperstring{field: "\"Teams\".\"name\""},
	UserID:    whereHelperint{field: "\"Teams\".\"user_id\""},
	LeagueID:  whereHelperint{field: "\"Teams\".\"league_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"Teams\".\"created_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"Teams\".\"deleted_at\""},
}

// TeamRels is where relationship names are stored.
var TeamRels = struct {
	League                  string
	User                    string
	AwayTeamTeamMatchups    string
	HomeTeamTeamMatchups    string
	WinnerTeamMatchups      string
	TeamTeamPlayers         string
	TeamTeamRounds          string
	CurrentTeamTradePlayers string
	FromTeamTrades          string
	ToTeamTrades            string
	FromTeamWaivers         string
	ToTeamWaivers           string
}{
	League:                  "League",
	User:                    "User",
	AwayTeamTeamMatchups:    "AwayTeamTeamMatchups",
	HomeTeamTeamMatchups:    "HomeTeamTeamMatchups",
	WinnerTeamMatchups:      "WinnerTeamMatchups",
	TeamTeamPlayers:         "TeamTeamPlayers",
	TeamTeamRounds:          "TeamTeamRounds",
	CurrentTeamTradePlayers: "CurrentTeamTradePlayers",
	FromTeamTrades:          "FromTeamTrades",
	ToTeamTrades:            "ToTeamTrades",
	FromTeamWaivers:         "FromTeamWaivers",
	ToTeamWaivers:           "ToTeamWaivers",
}

// teamR is where relationships are stored.
type teamR struct {
	League                  *League          `boil:"League" json:"League" toml:"League" yaml:"League"`
	User                    *User            `boil:"User" json:"User" toml:"User" yaml:"User"`
	AwayTeamTeamMatchups    TeamMatchupSlice `boil:"AwayTeamTeamMatchups" json:"AwayTeamTeamMatchups" toml:"AwayTeamTeamMatchups" yaml:"AwayTeamTeamMatchups"`
	HomeTeamTeamMatchups    TeamMatchupSlice `boil:"HomeTeamTeamMatchups" json:"HomeTeamTeamMatchups" toml:"HomeTeamTeamMatchups" yaml:"HomeTeamTeamMatchups"`
	WinnerTeamMatchups      TeamMatchupSlice `boil:"WinnerTeamMatchups" json:"WinnerTeamMatchups" toml:"WinnerTeamMatchups" yaml:"WinnerTeamMatchups"`
	TeamTeamPlayers         TeamPlayerSlice  `boil:"TeamTeamPlayers" json:"TeamTeamPlayers" toml:"TeamTeamPlayers" yaml:"TeamTeamPlayers"`
	TeamTeamRounds          TeamRoundSlice   `boil:"TeamTeamRounds" json:"TeamTeamRounds" toml:"TeamTeamRounds" yaml:"TeamTeamRounds"`
	CurrentTeamTradePlayers TradePlayerSlice `boil:"CurrentTeamTradePlayers" json:"CurrentTeamTradePlayers" toml:"CurrentTeamTradePlayers" yaml:"CurrentTeamTradePlayers"`
	FromTeamTrades          TradeSlice       `boil:"FromTeamTrades" json:"FromTeamTrades" toml:"FromTeamTrades" yaml:"FromTeamTrades"`
	ToTeamTrades            TradeSlice       `boil:"ToTeamTrades" json:"ToTeamTrades" toml:"ToTeamTrades" yaml:"ToTeamTrades"`
	FromTeamWaivers         WaiverSlice      `boil:"FromTeamWaivers" json:"FromTeamWaivers" toml:"FromTeamWaivers" yaml:"FromTeamWaivers"`
	ToTeamWaivers           WaiverSlice      `boil:"ToTeamWaivers" json:"ToTeamWaivers" toml:"ToTeamWaivers" yaml:"ToTeamWaivers"`
}

// NewStruct creates a new relationship struct
func (*teamR) NewStruct() *teamR {
	return &teamR{}
}

// teamL is where Load methods for each relationship are stored.
type teamL struct{}

var (
	teamAllColumns            = []string{"id", "name", "user_id", "league_id", "created_at", "deleted_at"}
	teamColumnsWithoutDefault = []string{"name", "user_id", "league_id", "created_at", "deleted_at"}
	teamColumnsWithDefault    = []string{"id"}
	teamPrimaryKeyColumns     = []string{"id"}
)

type (
	// TeamSlice is an alias for a slice of pointers to Team.
	// This should generally be used opposed to []Team.
	TeamSlice []*Team
	// TeamHook is the signature for custom Team hook methods
	TeamHook func(boil.Executor, *Team) error

	teamQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamType                 = reflect.TypeOf(&Team{})
	teamMapping              = queries.MakeStructMapping(teamType)
	teamPrimaryKeyMapping, _ = queries.BindMapping(teamType, teamMapping, teamPrimaryKeyColumns)
	teamInsertCacheMut       sync.RWMutex
	teamInsertCache          = make(map[string]insertCache)
	teamUpdateCacheMut       sync.RWMutex
	teamUpdateCache          = make(map[string]updateCache)
	teamUpsertCacheMut       sync.RWMutex
	teamUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamBeforeInsertHooks []TeamHook
var teamBeforeUpdateHooks []TeamHook
var teamBeforeDeleteHooks []TeamHook
var teamBeforeUpsertHooks []TeamHook

var teamAfterInsertHooks []TeamHook
var teamAfterSelectHooks []TeamHook
var teamAfterUpdateHooks []TeamHook
var teamAfterDeleteHooks []TeamHook
var teamAfterUpsertHooks []TeamHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Team) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Team) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Team) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Team) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Team) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Team) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range teamAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Team) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Team) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Team) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamHook registers your hook function for all future operations.
func AddTeamHook(hookPoint boil.HookPoint, teamHook TeamHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teamBeforeInsertHooks = append(teamBeforeInsertHooks, teamHook)
	case boil.BeforeUpdateHook:
		teamBeforeUpdateHooks = append(teamBeforeUpdateHooks, teamHook)
	case boil.BeforeDeleteHook:
		teamBeforeDeleteHooks = append(teamBeforeDeleteHooks, teamHook)
	case boil.BeforeUpsertHook:
		teamBeforeUpsertHooks = append(teamBeforeUpsertHooks, teamHook)
	case boil.AfterInsertHook:
		teamAfterInsertHooks = append(teamAfterInsertHooks, teamHook)
	case boil.AfterSelectHook:
		teamAfterSelectHooks = append(teamAfterSelectHooks, teamHook)
	case boil.AfterUpdateHook:
		teamAfterUpdateHooks = append(teamAfterUpdateHooks, teamHook)
	case boil.AfterDeleteHook:
		teamAfterDeleteHooks = append(teamAfterDeleteHooks, teamHook)
	case boil.AfterUpsertHook:
		teamAfterUpsertHooks = append(teamAfterUpsertHooks, teamHook)
	}
}

// One returns a single team record from the query.
func (q teamQuery) One(exec boil.Executor) (*Team, error) {
	o := &Team{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Teams")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Team records from the query.
func (q teamQuery) All(exec boil.Executor) (TeamSlice, error) {
	var o []*Team

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Team slice")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Team records in the query.
func (q teamQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Teams rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Teams exists")
	}

	return count > 0, nil
}

// League pointed to by the foreign key.
func (o *Team) League(mods ...qm.QueryMod) leagueQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.LeagueID),
	}

	queryMods = append(queryMods, mods...)

	query := Leagues(queryMods...)
	queries.SetFrom(query.Query, "\"Leagues\"")

	return query
}

// User pointed to by the foreign key.
func (o *Team) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"Users\"")

	return query
}

// AwayTeamTeamMatchups retrieves all the TeamMatchup's TeamMatchups with an executor via away_team column.
func (o *Team) AwayTeamTeamMatchups(mods ...qm.QueryMod) teamMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamMatchups\".\"away_team\"=?", o.ID),
	)

	query := TeamMatchups(queryMods...)
	queries.SetFrom(query.Query, "\"TeamMatchups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamMatchups\".*"})
	}

	return query
}

// HomeTeamTeamMatchups retrieves all the TeamMatchup's TeamMatchups with an executor via home_team column.
func (o *Team) HomeTeamTeamMatchups(mods ...qm.QueryMod) teamMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamMatchups\".\"home_team\"=?", o.ID),
	)

	query := TeamMatchups(queryMods...)
	queries.SetFrom(query.Query, "\"TeamMatchups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamMatchups\".*"})
	}

	return query
}

// WinnerTeamMatchups retrieves all the TeamMatchup's TeamMatchups with an executor via winner column.
func (o *Team) WinnerTeamMatchups(mods ...qm.QueryMod) teamMatchupQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamMatchups\".\"winner\"=?", o.ID),
	)

	query := TeamMatchups(queryMods...)
	queries.SetFrom(query.Query, "\"TeamMatchups\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamMatchups\".*"})
	}

	return query
}

// TeamTeamPlayers retrieves all the TeamPlayer's TeamPlayers with an executor via team_id column.
func (o *Team) TeamTeamPlayers(mods ...qm.QueryMod) teamPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamPlayers\".\"team_id\"=?", o.ID),
	)

	query := TeamPlayers(queryMods...)
	queries.SetFrom(query.Query, "\"TeamPlayers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamPlayers\".*"})
	}

	return query
}

// TeamTeamRounds retrieves all the TeamRound's TeamRounds with an executor via team_id column.
func (o *Team) TeamTeamRounds(mods ...qm.QueryMod) teamRoundQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TeamRounds\".\"team_id\"=?", o.ID),
	)

	query := TeamRounds(queryMods...)
	queries.SetFrom(query.Query, "\"TeamRounds\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TeamRounds\".*"})
	}

	return query
}

// CurrentTeamTradePlayers retrieves all the TradePlayer's TradePlayers with an executor via current_team column.
func (o *Team) CurrentTeamTradePlayers(mods ...qm.QueryMod) tradePlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"TradePlayers\".\"current_team\"=?", o.ID),
	)

	query := TradePlayers(queryMods...)
	queries.SetFrom(query.Query, "\"TradePlayers\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"TradePlayers\".*"})
	}

	return query
}

// FromTeamTrades retrieves all the Trade's Trades with an executor via from_team column.
func (o *Team) FromTeamTrades(mods ...qm.QueryMod) tradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Trades\".\"from_team\"=?", o.ID),
	)

	query := Trades(queryMods...)
	queries.SetFrom(query.Query, "\"Trades\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Trades\".*"})
	}

	return query
}

// ToTeamTrades retrieves all the Trade's Trades with an executor via to_team column.
func (o *Team) ToTeamTrades(mods ...qm.QueryMod) tradeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Trades\".\"to_team\"=?", o.ID),
	)

	query := Trades(queryMods...)
	queries.SetFrom(query.Query, "\"Trades\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Trades\".*"})
	}

	return query
}

// FromTeamWaivers retrieves all the Waiver's Waivers with an executor via from_team column.
func (o *Team) FromTeamWaivers(mods ...qm.QueryMod) waiverQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Waiver\".\"from_team\"=?", o.ID),
	)

	query := Waivers(queryMods...)
	queries.SetFrom(query.Query, "\"Waiver\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Waiver\".*"})
	}

	return query
}

// ToTeamWaivers retrieves all the Waiver's Waivers with an executor via to_team column.
func (o *Team) ToTeamWaivers(mods ...qm.QueryMod) waiverQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Waiver\".\"to_team\"=?", o.ID),
	)

	query := Waivers(queryMods...)
	queries.SetFrom(query.Query, "\"Waiver\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"Waiver\".*"})
	}

	return query
}

// LoadLeague allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamL) LoadLeague(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.LeagueID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.LeagueID {
					continue Outer
				}
			}

			args = append(args, obj.LeagueID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Leagues`),
		qm.WhereIn(`Leagues.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load League")
	}

	var resultSlice []*League
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice League")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Leagues")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Leagues")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.League = foreign
		if foreign.R == nil {
			foreign.R = &leagueR{}
		}
		foreign.R.LeagueTeams = append(foreign.R.LeagueTeams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.LeagueID == foreign.ID {
				local.R.League = foreign
				if foreign.R == nil {
					foreign.R = &leagueR{}
				}
				foreign.R.LeagueTeams = append(foreign.R.LeagueTeams, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamL) LoadUser(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Users`),
		qm.WhereIn(`Users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Users")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTeams = append(foreign.R.UserTeams, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTeams = append(foreign.R.UserTeams, local)
				break
			}
		}
	}

	return nil
}

// LoadAwayTeamTeamMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadAwayTeamTeamMatchups(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamMatchups`),
		qm.WhereIn(`TeamMatchups.away_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamMatchups")
	}

	var resultSlice []*TeamMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamMatchups")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AwayTeamTeamMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamMatchupR{}
			}
			foreign.R.AwayTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AwayTeam) {
				local.R.AwayTeamTeamMatchups = append(local.R.AwayTeamTeamMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &teamMatchupR{}
				}
				foreign.R.AwayTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadHomeTeamTeamMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadHomeTeamTeamMatchups(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamMatchups`),
		qm.WhereIn(`TeamMatchups.home_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamMatchups")
	}

	var resultSlice []*TeamMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamMatchups")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.HomeTeamTeamMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamMatchupR{}
			}
			foreign.R.HomeTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.HomeTeam) {
				local.R.HomeTeamTeamMatchups = append(local.R.HomeTeamTeamMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &teamMatchupR{}
				}
				foreign.R.HomeTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadWinnerTeamMatchups allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadWinnerTeamMatchups(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamMatchups`),
		qm.WhereIn(`TeamMatchups.winner in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamMatchups")
	}

	var resultSlice []*TeamMatchup
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamMatchups")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamMatchups")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamMatchups")
	}

	if len(teamMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WinnerTeamMatchups = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamMatchupR{}
			}
			foreign.R.WinnerTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.Winner) {
				local.R.WinnerTeamMatchups = append(local.R.WinnerTeamMatchups, foreign)
				if foreign.R == nil {
					foreign.R = &teamMatchupR{}
				}
				foreign.R.WinnerTeam = local
				break
			}
		}
	}

	return nil
}

// LoadTeamTeamPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadTeamTeamPlayers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamPlayers`),
		qm.WhereIn(`TeamPlayers.team_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamPlayers")
	}

	var resultSlice []*TeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamPlayers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamPlayers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamPlayers")
	}

	if len(teamPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeamTeamPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamPlayerR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TeamID {
				local.R.TeamTeamPlayers = append(local.R.TeamTeamPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &teamPlayerR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadTeamTeamRounds allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadTeamTeamRounds(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamRounds`),
		qm.WhereIn(`TeamRounds.team_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamRounds")
	}

	var resultSlice []*TeamRound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamRounds")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamRounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamRounds")
	}

	if len(teamRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeamTeamRounds = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamRoundR{}
			}
			foreign.R.Team = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TeamID) {
				local.R.TeamTeamRounds = append(local.R.TeamTeamRounds, foreign)
				if foreign.R == nil {
					foreign.R = &teamRoundR{}
				}
				foreign.R.Team = local
				break
			}
		}
	}

	return nil
}

// LoadCurrentTeamTradePlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadCurrentTeamTradePlayers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TradePlayers`),
		qm.WhereIn(`TradePlayers.current_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TradePlayers")
	}

	var resultSlice []*TradePlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TradePlayers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TradePlayers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TradePlayers")
	}

	if len(tradePlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CurrentTeamTradePlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tradePlayerR{}
			}
			foreign.R.CurrentTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CurrentTeam) {
				local.R.CurrentTeamTradePlayers = append(local.R.CurrentTeamTradePlayers, foreign)
				if foreign.R == nil {
					foreign.R = &tradePlayerR{}
				}
				foreign.R.CurrentTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadFromTeamTrades allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadFromTeamTrades(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Trades`),
		qm.WhereIn(`Trades.from_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trades")
	}

	var resultSlice []*Trade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trades")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Trades")
	}

	if len(tradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FromTeamTrades = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tradeR{}
			}
			foreign.R.FromTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FromTeam) {
				local.R.FromTeamTrades = append(local.R.FromTeamTrades, foreign)
				if foreign.R == nil {
					foreign.R = &tradeR{}
				}
				foreign.R.FromTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadToTeamTrades allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadToTeamTrades(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Trades`),
		qm.WhereIn(`Trades.to_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Trades")
	}

	var resultSlice []*Trade
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Trades")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Trades")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Trades")
	}

	if len(tradeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ToTeamTrades = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tradeR{}
			}
			foreign.R.ToTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ToTeam) {
				local.R.ToTeamTrades = append(local.R.ToTeamTrades, foreign)
				if foreign.R == nil {
					foreign.R = &tradeR{}
				}
				foreign.R.ToTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadFromTeamWaivers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadFromTeamWaivers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Waiver`),
		qm.WhereIn(`Waiver.from_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Waiver")
	}

	var resultSlice []*Waiver
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Waiver")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Waiver")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Waiver")
	}

	if len(waiverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FromTeamWaivers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &waiverR{}
			}
			foreign.R.FromTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FromTeam) {
				local.R.FromTeamWaivers = append(local.R.FromTeamWaivers, foreign)
				if foreign.R == nil {
					foreign.R = &waiverR{}
				}
				foreign.R.FromTeamTeam = local
				break
			}
		}
	}

	return nil
}

// LoadToTeamWaivers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamL) LoadToTeamWaivers(e boil.Executor, singular bool, maybeTeam interface{}, mods queries.Applicator) error {
	var slice []*Team
	var object *Team

	if singular {
		object = maybeTeam.(*Team)
	} else {
		slice = *maybeTeam.(*[]*Team)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Waiver`),
		qm.WhereIn(`Waiver.to_team in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Waiver")
	}

	var resultSlice []*Waiver
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Waiver")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Waiver")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Waiver")
	}

	if len(waiverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ToTeamWaivers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &waiverR{}
			}
			foreign.R.ToTeamTeam = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ToTeam) {
				local.R.ToTeamWaivers = append(local.R.ToTeamWaivers, foreign)
				if foreign.R == nil {
					foreign.R = &waiverR{}
				}
				foreign.R.ToTeamTeam = local
				break
			}
		}
	}

	return nil
}

// SetLeague of the team to the related item.
// Sets o.R.League to related.
// Adds o to related.R.LeagueTeams.
func (o *Team) SetLeague(exec boil.Executor, insert bool, related *League) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"league_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.LeagueID = related.ID
	if o.R == nil {
		o.R = &teamR{
			League: related,
		}
	} else {
		o.R.League = related
	}

	if related.R == nil {
		related.R = &leagueR{
			LeagueTeams: TeamSlice{o},
		}
	} else {
		related.R.LeagueTeams = append(related.R.LeagueTeams, o)
	}

	return nil
}

// SetUser of the team to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTeams.
func (o *Team) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &teamR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTeams: TeamSlice{o},
		}
	} else {
		related.R.UserTeams = append(related.R.UserTeams, o)
	}

	return nil
}

// AddAwayTeamTeamMatchups adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.AwayTeamTeamMatchups.
// Sets related.R.AwayTeamTeam appropriately.
func (o *Team) AddAwayTeamTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AwayTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamMatchups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"away_team"}),
				strmangle.WhereClause("\"", "\"", 2, teamMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AwayTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			AwayTeamTeamMatchups: related,
		}
	} else {
		o.R.AwayTeamTeamMatchups = append(o.R.AwayTeamTeamMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamMatchupR{
				AwayTeamTeam: o,
			}
		} else {
			rel.R.AwayTeamTeam = o
		}
	}
	return nil
}

// SetAwayTeamTeamMatchups removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AwayTeamTeam's AwayTeamTeamMatchups accordingly.
// Replaces o.R.AwayTeamTeamMatchups with related.
// Sets related.R.AwayTeamTeam's AwayTeamTeamMatchups accordingly.
func (o *Team) SetAwayTeamTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	query := "update \"TeamMatchups\" set \"away_team\" = null where \"away_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AwayTeamTeamMatchups {
			queries.SetScanner(&rel.AwayTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AwayTeamTeam = nil
		}

		o.R.AwayTeamTeamMatchups = nil
	}
	return o.AddAwayTeamTeamMatchups(exec, insert, related...)
}

// RemoveAwayTeamTeamMatchups relationships from objects passed in.
// Removes related items from R.AwayTeamTeamMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.AwayTeamTeam.
func (o *Team) RemoveAwayTeamTeamMatchups(exec boil.Executor, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AwayTeam, nil)
		if rel.R != nil {
			rel.R.AwayTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("away_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AwayTeamTeamMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.AwayTeamTeamMatchups)
			if ln > 1 && i < ln-1 {
				o.R.AwayTeamTeamMatchups[i] = o.R.AwayTeamTeamMatchups[ln-1]
			}
			o.R.AwayTeamTeamMatchups = o.R.AwayTeamTeamMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddHomeTeamTeamMatchups adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.HomeTeamTeamMatchups.
// Sets related.R.HomeTeamTeam appropriately.
func (o *Team) AddHomeTeamTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.HomeTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamMatchups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"home_team"}),
				strmangle.WhereClause("\"", "\"", 2, teamMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.HomeTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			HomeTeamTeamMatchups: related,
		}
	} else {
		o.R.HomeTeamTeamMatchups = append(o.R.HomeTeamTeamMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamMatchupR{
				HomeTeamTeam: o,
			}
		} else {
			rel.R.HomeTeamTeam = o
		}
	}
	return nil
}

// SetHomeTeamTeamMatchups removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.HomeTeamTeam's HomeTeamTeamMatchups accordingly.
// Replaces o.R.HomeTeamTeamMatchups with related.
// Sets related.R.HomeTeamTeam's HomeTeamTeamMatchups accordingly.
func (o *Team) SetHomeTeamTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	query := "update \"TeamMatchups\" set \"home_team\" = null where \"home_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.HomeTeamTeamMatchups {
			queries.SetScanner(&rel.HomeTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.HomeTeamTeam = nil
		}

		o.R.HomeTeamTeamMatchups = nil
	}
	return o.AddHomeTeamTeamMatchups(exec, insert, related...)
}

// RemoveHomeTeamTeamMatchups relationships from objects passed in.
// Removes related items from R.HomeTeamTeamMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.HomeTeamTeam.
func (o *Team) RemoveHomeTeamTeamMatchups(exec boil.Executor, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.HomeTeam, nil)
		if rel.R != nil {
			rel.R.HomeTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("home_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.HomeTeamTeamMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.HomeTeamTeamMatchups)
			if ln > 1 && i < ln-1 {
				o.R.HomeTeamTeamMatchups[i] = o.R.HomeTeamTeamMatchups[ln-1]
			}
			o.R.HomeTeamTeamMatchups = o.R.HomeTeamTeamMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddWinnerTeamMatchups adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.WinnerTeamMatchups.
// Sets related.R.WinnerTeam appropriately.
func (o *Team) AddWinnerTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.Winner, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamMatchups\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"winner"}),
				strmangle.WhereClause("\"", "\"", 2, teamMatchupPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.Winner, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			WinnerTeamMatchups: related,
		}
	} else {
		o.R.WinnerTeamMatchups = append(o.R.WinnerTeamMatchups, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamMatchupR{
				WinnerTeam: o,
			}
		} else {
			rel.R.WinnerTeam = o
		}
	}
	return nil
}

// SetWinnerTeamMatchups removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.WinnerTeam's WinnerTeamMatchups accordingly.
// Replaces o.R.WinnerTeamMatchups with related.
// Sets related.R.WinnerTeam's WinnerTeamMatchups accordingly.
func (o *Team) SetWinnerTeamMatchups(exec boil.Executor, insert bool, related ...*TeamMatchup) error {
	query := "update \"TeamMatchups\" set \"winner\" = null where \"winner\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.WinnerTeamMatchups {
			queries.SetScanner(&rel.Winner, nil)
			if rel.R == nil {
				continue
			}

			rel.R.WinnerTeam = nil
		}

		o.R.WinnerTeamMatchups = nil
	}
	return o.AddWinnerTeamMatchups(exec, insert, related...)
}

// RemoveWinnerTeamMatchups relationships from objects passed in.
// Removes related items from R.WinnerTeamMatchups (uses pointer comparison, removal does not keep order)
// Sets related.R.WinnerTeam.
func (o *Team) RemoveWinnerTeamMatchups(exec boil.Executor, related ...*TeamMatchup) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.Winner, nil)
		if rel.R != nil {
			rel.R.WinnerTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("winner")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.WinnerTeamMatchups {
			if rel != ri {
				continue
			}

			ln := len(o.R.WinnerTeamMatchups)
			if ln > 1 && i < ln-1 {
				o.R.WinnerTeamMatchups[i] = o.R.WinnerTeamMatchups[ln-1]
			}
			o.R.WinnerTeamMatchups = o.R.WinnerTeamMatchups[:ln-1]
			break
		}
	}

	return nil
}

// AddTeamTeamPlayers adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.TeamTeamPlayers.
// Sets related.R.Team appropriately.
func (o *Team) AddTeamTeamPlayers(exec boil.Executor, insert bool, related ...*TeamPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TeamID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamPlayers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TeamID = o.ID
		}
	}

	if o.R == nil {
		o.R = &teamR{
			TeamTeamPlayers: related,
		}
	} else {
		o.R.TeamTeamPlayers = append(o.R.TeamTeamPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamPlayerR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// AddTeamTeamRounds adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.TeamTeamRounds.
// Sets related.R.Team appropriately.
func (o *Team) AddTeamTeamRounds(exec boil.Executor, insert bool, related ...*TeamRound) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TeamID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TeamRounds\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
				strmangle.WhereClause("\"", "\"", 2, teamRoundPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TeamID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			TeamTeamRounds: related,
		}
	} else {
		o.R.TeamTeamRounds = append(o.R.TeamTeamRounds, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamRoundR{
				Team: o,
			}
		} else {
			rel.R.Team = o
		}
	}
	return nil
}

// SetTeamTeamRounds removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Team's TeamTeamRounds accordingly.
// Replaces o.R.TeamTeamRounds with related.
// Sets related.R.Team's TeamTeamRounds accordingly.
func (o *Team) SetTeamTeamRounds(exec boil.Executor, insert bool, related ...*TeamRound) error {
	query := "update \"TeamRounds\" set \"team_id\" = null where \"team_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TeamTeamRounds {
			queries.SetScanner(&rel.TeamID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Team = nil
		}

		o.R.TeamTeamRounds = nil
	}
	return o.AddTeamTeamRounds(exec, insert, related...)
}

// RemoveTeamTeamRounds relationships from objects passed in.
// Removes related items from R.TeamTeamRounds (uses pointer comparison, removal does not keep order)
// Sets related.R.Team.
func (o *Team) RemoveTeamTeamRounds(exec boil.Executor, related ...*TeamRound) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TeamID, nil)
		if rel.R != nil {
			rel.R.Team = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("team_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TeamTeamRounds {
			if rel != ri {
				continue
			}

			ln := len(o.R.TeamTeamRounds)
			if ln > 1 && i < ln-1 {
				o.R.TeamTeamRounds[i] = o.R.TeamTeamRounds[ln-1]
			}
			o.R.TeamTeamRounds = o.R.TeamTeamRounds[:ln-1]
			break
		}
	}

	return nil
}

// AddCurrentTeamTradePlayers adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.CurrentTeamTradePlayers.
// Sets related.R.CurrentTeamTeam appropriately.
func (o *Team) AddCurrentTeamTradePlayers(exec boil.Executor, insert bool, related ...*TradePlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CurrentTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"TradePlayers\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"current_team"}),
				strmangle.WhereClause("\"", "\"", 2, tradePlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CurrentTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			CurrentTeamTradePlayers: related,
		}
	} else {
		o.R.CurrentTeamTradePlayers = append(o.R.CurrentTeamTradePlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tradePlayerR{
				CurrentTeamTeam: o,
			}
		} else {
			rel.R.CurrentTeamTeam = o
		}
	}
	return nil
}

// SetCurrentTeamTradePlayers removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CurrentTeamTeam's CurrentTeamTradePlayers accordingly.
// Replaces o.R.CurrentTeamTradePlayers with related.
// Sets related.R.CurrentTeamTeam's CurrentTeamTradePlayers accordingly.
func (o *Team) SetCurrentTeamTradePlayers(exec boil.Executor, insert bool, related ...*TradePlayer) error {
	query := "update \"TradePlayers\" set \"current_team\" = null where \"current_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CurrentTeamTradePlayers {
			queries.SetScanner(&rel.CurrentTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CurrentTeamTeam = nil
		}

		o.R.CurrentTeamTradePlayers = nil
	}
	return o.AddCurrentTeamTradePlayers(exec, insert, related...)
}

// RemoveCurrentTeamTradePlayers relationships from objects passed in.
// Removes related items from R.CurrentTeamTradePlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.CurrentTeamTeam.
func (o *Team) RemoveCurrentTeamTradePlayers(exec boil.Executor, related ...*TradePlayer) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CurrentTeam, nil)
		if rel.R != nil {
			rel.R.CurrentTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("current_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CurrentTeamTradePlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.CurrentTeamTradePlayers)
			if ln > 1 && i < ln-1 {
				o.R.CurrentTeamTradePlayers[i] = o.R.CurrentTeamTradePlayers[ln-1]
			}
			o.R.CurrentTeamTradePlayers = o.R.CurrentTeamTradePlayers[:ln-1]
			break
		}
	}

	return nil
}

// AddFromTeamTrades adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.FromTeamTrades.
// Sets related.R.FromTeamTeam appropriately.
func (o *Team) AddFromTeamTrades(exec boil.Executor, insert bool, related ...*Trade) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FromTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Trades\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"from_team"}),
				strmangle.WhereClause("\"", "\"", 2, tradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FromTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			FromTeamTrades: related,
		}
	} else {
		o.R.FromTeamTrades = append(o.R.FromTeamTrades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tradeR{
				FromTeamTeam: o,
			}
		} else {
			rel.R.FromTeamTeam = o
		}
	}
	return nil
}

// SetFromTeamTrades removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FromTeamTeam's FromTeamTrades accordingly.
// Replaces o.R.FromTeamTrades with related.
// Sets related.R.FromTeamTeam's FromTeamTrades accordingly.
func (o *Team) SetFromTeamTrades(exec boil.Executor, insert bool, related ...*Trade) error {
	query := "update \"Trades\" set \"from_team\" = null where \"from_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FromTeamTrades {
			queries.SetScanner(&rel.FromTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FromTeamTeam = nil
		}

		o.R.FromTeamTrades = nil
	}
	return o.AddFromTeamTrades(exec, insert, related...)
}

// RemoveFromTeamTrades relationships from objects passed in.
// Removes related items from R.FromTeamTrades (uses pointer comparison, removal does not keep order)
// Sets related.R.FromTeamTeam.
func (o *Team) RemoveFromTeamTrades(exec boil.Executor, related ...*Trade) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FromTeam, nil)
		if rel.R != nil {
			rel.R.FromTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("from_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FromTeamTrades {
			if rel != ri {
				continue
			}

			ln := len(o.R.FromTeamTrades)
			if ln > 1 && i < ln-1 {
				o.R.FromTeamTrades[i] = o.R.FromTeamTrades[ln-1]
			}
			o.R.FromTeamTrades = o.R.FromTeamTrades[:ln-1]
			break
		}
	}

	return nil
}

// AddToTeamTrades adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.ToTeamTrades.
// Sets related.R.ToTeamTeam appropriately.
func (o *Team) AddToTeamTrades(exec boil.Executor, insert bool, related ...*Trade) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ToTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Trades\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"to_team"}),
				strmangle.WhereClause("\"", "\"", 2, tradePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ToTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			ToTeamTrades: related,
		}
	} else {
		o.R.ToTeamTrades = append(o.R.ToTeamTrades, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tradeR{
				ToTeamTeam: o,
			}
		} else {
			rel.R.ToTeamTeam = o
		}
	}
	return nil
}

// SetToTeamTrades removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ToTeamTeam's ToTeamTrades accordingly.
// Replaces o.R.ToTeamTrades with related.
// Sets related.R.ToTeamTeam's ToTeamTrades accordingly.
func (o *Team) SetToTeamTrades(exec boil.Executor, insert bool, related ...*Trade) error {
	query := "update \"Trades\" set \"to_team\" = null where \"to_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ToTeamTrades {
			queries.SetScanner(&rel.ToTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ToTeamTeam = nil
		}

		o.R.ToTeamTrades = nil
	}
	return o.AddToTeamTrades(exec, insert, related...)
}

// RemoveToTeamTrades relationships from objects passed in.
// Removes related items from R.ToTeamTrades (uses pointer comparison, removal does not keep order)
// Sets related.R.ToTeamTeam.
func (o *Team) RemoveToTeamTrades(exec boil.Executor, related ...*Trade) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ToTeam, nil)
		if rel.R != nil {
			rel.R.ToTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("to_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ToTeamTrades {
			if rel != ri {
				continue
			}

			ln := len(o.R.ToTeamTrades)
			if ln > 1 && i < ln-1 {
				o.R.ToTeamTrades[i] = o.R.ToTeamTrades[ln-1]
			}
			o.R.ToTeamTrades = o.R.ToTeamTrades[:ln-1]
			break
		}
	}

	return nil
}

// AddFromTeamWaivers adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.FromTeamWaivers.
// Sets related.R.FromTeamTeam appropriately.
func (o *Team) AddFromTeamWaivers(exec boil.Executor, insert bool, related ...*Waiver) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FromTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Waiver\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"from_team"}),
				strmangle.WhereClause("\"", "\"", 2, waiverPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FromTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			FromTeamWaivers: related,
		}
	} else {
		o.R.FromTeamWaivers = append(o.R.FromTeamWaivers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &waiverR{
				FromTeamTeam: o,
			}
		} else {
			rel.R.FromTeamTeam = o
		}
	}
	return nil
}

// SetFromTeamWaivers removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FromTeamTeam's FromTeamWaivers accordingly.
// Replaces o.R.FromTeamWaivers with related.
// Sets related.R.FromTeamTeam's FromTeamWaivers accordingly.
func (o *Team) SetFromTeamWaivers(exec boil.Executor, insert bool, related ...*Waiver) error {
	query := "update \"Waiver\" set \"from_team\" = null where \"from_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FromTeamWaivers {
			queries.SetScanner(&rel.FromTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FromTeamTeam = nil
		}

		o.R.FromTeamWaivers = nil
	}
	return o.AddFromTeamWaivers(exec, insert, related...)
}

// RemoveFromTeamWaivers relationships from objects passed in.
// Removes related items from R.FromTeamWaivers (uses pointer comparison, removal does not keep order)
// Sets related.R.FromTeamTeam.
func (o *Team) RemoveFromTeamWaivers(exec boil.Executor, related ...*Waiver) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FromTeam, nil)
		if rel.R != nil {
			rel.R.FromTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("from_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FromTeamWaivers {
			if rel != ri {
				continue
			}

			ln := len(o.R.FromTeamWaivers)
			if ln > 1 && i < ln-1 {
				o.R.FromTeamWaivers[i] = o.R.FromTeamWaivers[ln-1]
			}
			o.R.FromTeamWaivers = o.R.FromTeamWaivers[:ln-1]
			break
		}
	}

	return nil
}

// AddToTeamWaivers adds the given related objects to the existing relationships
// of the Team, optionally inserting them as new records.
// Appends related to o.R.ToTeamWaivers.
// Sets related.R.ToTeamTeam appropriately.
func (o *Team) AddToTeamWaivers(exec boil.Executor, insert bool, related ...*Waiver) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ToTeam, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Waiver\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"to_team"}),
				strmangle.WhereClause("\"", "\"", 2, waiverPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ToTeam, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamR{
			ToTeamWaivers: related,
		}
	} else {
		o.R.ToTeamWaivers = append(o.R.ToTeamWaivers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &waiverR{
				ToTeamTeam: o,
			}
		} else {
			rel.R.ToTeamTeam = o
		}
	}
	return nil
}

// SetToTeamWaivers removes all previously related items of the
// Team replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ToTeamTeam's ToTeamWaivers accordingly.
// Replaces o.R.ToTeamWaivers with related.
// Sets related.R.ToTeamTeam's ToTeamWaivers accordingly.
func (o *Team) SetToTeamWaivers(exec boil.Executor, insert bool, related ...*Waiver) error {
	query := "update \"Waiver\" set \"to_team\" = null where \"to_team\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ToTeamWaivers {
			queries.SetScanner(&rel.ToTeam, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ToTeamTeam = nil
		}

		o.R.ToTeamWaivers = nil
	}
	return o.AddToTeamWaivers(exec, insert, related...)
}

// RemoveToTeamWaivers relationships from objects passed in.
// Removes related items from R.ToTeamWaivers (uses pointer comparison, removal does not keep order)
// Sets related.R.ToTeamTeam.
func (o *Team) RemoveToTeamWaivers(exec boil.Executor, related ...*Waiver) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ToTeam, nil)
		if rel.R != nil {
			rel.R.ToTeamTeam = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("to_team")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ToTeamWaivers {
			if rel != ri {
				continue
			}

			ln := len(o.R.ToTeamWaivers)
			if ln > 1 && i < ln-1 {
				o.R.ToTeamWaivers[i] = o.R.ToTeamWaivers[ln-1]
			}
			o.R.ToTeamWaivers = o.R.ToTeamWaivers[:ln-1]
			break
		}
	}

	return nil
}

// Teams retrieves all the records using an executor.
func Teams(mods ...qm.QueryMod) teamQuery {
	mods = append(mods, qm.From("\"Teams\""))
	return teamQuery{NewQuery(mods...)}
}

// FindTeam retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeam(exec boil.Executor, iD int, selectCols ...string) (*Team, error) {
	teamObj := &Team{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Teams\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, teamObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Teams")
	}

	return teamObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Team) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Teams provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamInsertCacheMut.RLock()
	cache, cached := teamInsertCache[key]
	teamInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamType, teamMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Teams\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Teams\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Teams")
	}

	if !cached {
		teamInsertCacheMut.Lock()
		teamInsertCache[key] = cache
		teamInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Team.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Team) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamUpdateCacheMut.RLock()
	cache, cached := teamUpdateCache[key]
	teamUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Teams, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Teams\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, append(wl, teamPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Teams row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Teams")
	}

	if !cached {
		teamUpdateCacheMut.Lock()
		teamUpdateCache[key] = cache
		teamUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Teams")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Teams\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all team")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Team) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Teams provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamUpsertCacheMut.RLock()
	cache, cached := teamUpsertCache[key]
	teamUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamAllColumns,
			teamColumnsWithDefault,
			teamColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamAllColumns,
			teamPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Teams, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teamPrimaryKeyColumns))
			copy(conflict, teamPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Teams\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teamType, teamMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamType, teamMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert Teams")
	}

	if !cached {
		teamUpsertCacheMut.Lock()
		teamUpsertCache[key] = cache
		teamUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Team record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Team) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Team provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamPrimaryKeyMapping)
	sql := "DELETE FROM \"Teams\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Teams")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no teamQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Teams")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Teams")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from team slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Teams")
	}

	if len(teamAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Team) Reload(exec boil.Executor) error {
	ret, err := FindTeam(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Teams\".* FROM \"Teams\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in TeamSlice")
	}

	*o = slice

	return nil
}

// TeamExists checks if the Team row exists.
func TeamExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Teams\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Teams exists")
	}

	return exists, nil
}
