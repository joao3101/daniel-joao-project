// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamRound is an object representing the database table.
type TeamRound struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoundID   null.Int  `boil:"round_id" json:"round_id,omitempty" toml:"round_id" yaml:"round_id,omitempty"`
	TeamID    null.Int  `boil:"team_id" json:"team_id,omitempty" toml:"team_id" yaml:"team_id,omitempty"`
	Score     null.Int  `boil:"score" json:"score,omitempty" toml:"score" yaml:"score,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *teamRoundR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamRoundL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamRoundColumns = struct {
	ID        string
	RoundID   string
	TeamID    string
	Score     string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	RoundID:   "round_id",
	TeamID:    "team_id",
	Score:     "score",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

var TeamRoundWhere = struct {
	ID        whereHelperint
	RoundID   whereHelpernull_Int
	TeamID    whereHelpernull_Int
	Score     whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpertime_Time
}{
	ID:        whereHelperint{field: "`TeamRounds`.`id`"},
	RoundID:   whereHelpernull_Int{field: "`TeamRounds`.`round_id`"},
	TeamID:    whereHelpernull_Int{field: "`TeamRounds`.`team_id`"},
	Score:     whereHelpernull_Int{field: "`TeamRounds`.`score`"},
	CreatedAt: whereHelpertime_Time{field: "`TeamRounds`.`created_at`"},
	DeletedAt: whereHelpertime_Time{field: "`TeamRounds`.`deleted_at`"},
}

// TeamRoundRels is where relationship names are stored.
var TeamRoundRels = struct {
	Round                     string
	Team                      string
	TeamRoundTeamRoundPlayers string
}{
	Round:                     "Round",
	Team:                      "Team",
	TeamRoundTeamRoundPlayers: "TeamRoundTeamRoundPlayers",
}

// teamRoundR is where relationships are stored.
type teamRoundR struct {
	Round                     *Round               `boil:"Round" json:"Round" toml:"Round" yaml:"Round"`
	Team                      *Team                `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
	TeamRoundTeamRoundPlayers TeamRoundPlayerSlice `boil:"TeamRoundTeamRoundPlayers" json:"TeamRoundTeamRoundPlayers" toml:"TeamRoundTeamRoundPlayers" yaml:"TeamRoundTeamRoundPlayers"`
}

// NewStruct creates a new relationship struct
func (*teamRoundR) NewStruct() *teamRoundR {
	return &teamRoundR{}
}

// teamRoundL is where Load methods for each relationship are stored.
type teamRoundL struct{}

var (
	teamRoundAllColumns            = []string{"id", "round_id", "team_id", "score", "created_at", "deleted_at"}
	teamRoundColumnsWithoutDefault = []string{"round_id", "team_id", "score"}
	teamRoundColumnsWithDefault    = []string{"id", "created_at", "deleted_at"}
	teamRoundPrimaryKeyColumns     = []string{"id"}
)

type (
	// TeamRoundSlice is an alias for a slice of pointers to TeamRound.
	// This should generally be used opposed to []TeamRound.
	TeamRoundSlice []*TeamRound
	// TeamRoundHook is the signature for custom TeamRound hook methods
	TeamRoundHook func(boil.Executor, *TeamRound) error

	teamRoundQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamRoundType                 = reflect.TypeOf(&TeamRound{})
	teamRoundMapping              = queries.MakeStructMapping(teamRoundType)
	teamRoundPrimaryKeyMapping, _ = queries.BindMapping(teamRoundType, teamRoundMapping, teamRoundPrimaryKeyColumns)
	teamRoundInsertCacheMut       sync.RWMutex
	teamRoundInsertCache          = make(map[string]insertCache)
	teamRoundUpdateCacheMut       sync.RWMutex
	teamRoundUpdateCache          = make(map[string]updateCache)
	teamRoundUpsertCacheMut       sync.RWMutex
	teamRoundUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamRoundBeforeInsertHooks []TeamRoundHook
var teamRoundBeforeUpdateHooks []TeamRoundHook
var teamRoundBeforeDeleteHooks []TeamRoundHook
var teamRoundBeforeUpsertHooks []TeamRoundHook

var teamRoundAfterInsertHooks []TeamRoundHook
var teamRoundAfterSelectHooks []TeamRoundHook
var teamRoundAfterUpdateHooks []TeamRoundHook
var teamRoundAfterDeleteHooks []TeamRoundHook
var teamRoundAfterUpsertHooks []TeamRoundHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamRound) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamRound) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamRound) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamRound) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamRound) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamRound) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamRound) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamRound) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamRound) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamRoundHook registers your hook function for all future operations.
func AddTeamRoundHook(hookPoint boil.HookPoint, teamRoundHook TeamRoundHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teamRoundBeforeInsertHooks = append(teamRoundBeforeInsertHooks, teamRoundHook)
	case boil.BeforeUpdateHook:
		teamRoundBeforeUpdateHooks = append(teamRoundBeforeUpdateHooks, teamRoundHook)
	case boil.BeforeDeleteHook:
		teamRoundBeforeDeleteHooks = append(teamRoundBeforeDeleteHooks, teamRoundHook)
	case boil.BeforeUpsertHook:
		teamRoundBeforeUpsertHooks = append(teamRoundBeforeUpsertHooks, teamRoundHook)
	case boil.AfterInsertHook:
		teamRoundAfterInsertHooks = append(teamRoundAfterInsertHooks, teamRoundHook)
	case boil.AfterSelectHook:
		teamRoundAfterSelectHooks = append(teamRoundAfterSelectHooks, teamRoundHook)
	case boil.AfterUpdateHook:
		teamRoundAfterUpdateHooks = append(teamRoundAfterUpdateHooks, teamRoundHook)
	case boil.AfterDeleteHook:
		teamRoundAfterDeleteHooks = append(teamRoundAfterDeleteHooks, teamRoundHook)
	case boil.AfterUpsertHook:
		teamRoundAfterUpsertHooks = append(teamRoundAfterUpsertHooks, teamRoundHook)
	}
}

// One returns a single teamRound record from the query.
func (q teamRoundQuery) One(exec boil.Executor) (*TeamRound, error) {
	o := &TeamRound{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for TeamRounds")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamRound records from the query.
func (q teamRoundQuery) All(exec boil.Executor) (TeamRoundSlice, error) {
	var o []*TeamRound

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to TeamRound slice")
	}

	if len(teamRoundAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamRound records in the query.
func (q teamRoundQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count TeamRounds rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamRoundQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if TeamRounds exists")
	}

	return count > 0, nil
}

// Round pointed to by the foreign key.
func (o *TeamRound) Round(mods ...qm.QueryMod) roundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoundID),
	}

	queryMods = append(queryMods, mods...)

	query := Rounds(queryMods...)
	queries.SetFrom(query.Query, "`Round`")

	return query
}

// Team pointed to by the foreign key.
func (o *TeamRound) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "`Teams`")

	return query
}

// TeamRoundTeamRoundPlayers retrieves all the TeamRoundPlayer's TeamRoundPlayers with an executor via team_round_id column.
func (o *TeamRound) TeamRoundTeamRoundPlayers(mods ...qm.QueryMod) teamRoundPlayerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`TeamRoundPlayers`.`team_round_id`=?", o.ID),
	)

	query := TeamRoundPlayers(queryMods...)
	queries.SetFrom(query.Query, "`TeamRoundPlayers`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`TeamRoundPlayers`.*"})
	}

	return query
}

// LoadRound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamRoundL) LoadRound(e boil.Executor, singular bool, maybeTeamRound interface{}, mods queries.Applicator) error {
	var slice []*TeamRound
	var object *TeamRound

	if singular {
		object = maybeTeamRound.(*TeamRound)
	} else {
		slice = *maybeTeamRound.(*[]*TeamRound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamRoundR{}
		}
		if !queries.IsNil(object.RoundID) {
			args = append(args, object.RoundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamRoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoundID) {
				args = append(args, obj.RoundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Round`),
		qm.WhereIn(`Round.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Round")
	}

	var resultSlice []*Round
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Round")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Round")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Round")
	}

	if len(teamRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Round = foreign
		if foreign.R == nil {
			foreign.R = &roundR{}
		}
		foreign.R.RoundTeamRounds = append(foreign.R.RoundTeamRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoundID, foreign.ID) {
				local.R.Round = foreign
				if foreign.R == nil {
					foreign.R = &roundR{}
				}
				foreign.R.RoundTeamRounds = append(foreign.R.RoundTeamRounds, local)
				break
			}
		}
	}

	return nil
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamRoundL) LoadTeam(e boil.Executor, singular bool, maybeTeamRound interface{}, mods queries.Applicator) error {
	var slice []*TeamRound
	var object *TeamRound

	if singular {
		object = maybeTeamRound.(*TeamRound)
	} else {
		slice = *maybeTeamRound.(*[]*TeamRound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamRoundR{}
		}
		if !queries.IsNil(object.TeamID) {
			args = append(args, object.TeamID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamRoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamID) {
				args = append(args, obj.TeamID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(teamRoundAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.TeamTeamRounds = append(foreign.R.TeamTeamRounds, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamID, foreign.ID) {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.TeamTeamRounds = append(foreign.R.TeamTeamRounds, local)
				break
			}
		}
	}

	return nil
}

// LoadTeamRoundTeamRoundPlayers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (teamRoundL) LoadTeamRoundTeamRoundPlayers(e boil.Executor, singular bool, maybeTeamRound interface{}, mods queries.Applicator) error {
	var slice []*TeamRound
	var object *TeamRound

	if singular {
		object = maybeTeamRound.(*TeamRound)
	} else {
		slice = *maybeTeamRound.(*[]*TeamRound)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamRoundR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamRoundR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamRoundPlayers`),
		qm.WhereIn(`TeamRoundPlayers.team_round_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamRoundPlayers")
	}

	var resultSlice []*TeamRoundPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamRoundPlayers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on TeamRoundPlayers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamRoundPlayers")
	}

	if len(teamRoundPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TeamRoundTeamRoundPlayers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &teamRoundPlayerR{}
			}
			foreign.R.TeamRound = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.TeamRoundID) {
				local.R.TeamRoundTeamRoundPlayers = append(local.R.TeamRoundTeamRoundPlayers, foreign)
				if foreign.R == nil {
					foreign.R = &teamRoundPlayerR{}
				}
				foreign.R.TeamRound = local
				break
			}
		}
	}

	return nil
}

// SetRound of the teamRound to the related item.
// Sets o.R.Round to related.
// Adds o to related.R.RoundTeamRounds.
func (o *TeamRound) SetRound(exec boil.Executor, insert bool, related *Round) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TeamRounds` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"round_id"}),
		strmangle.WhereClause("`", "`", 0, teamRoundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoundID, related.ID)
	if o.R == nil {
		o.R = &teamRoundR{
			Round: related,
		}
	} else {
		o.R.Round = related
	}

	if related.R == nil {
		related.R = &roundR{
			RoundTeamRounds: TeamRoundSlice{o},
		}
	} else {
		related.R.RoundTeamRounds = append(related.R.RoundTeamRounds, o)
	}

	return nil
}

// RemoveRound relationship.
// Sets o.R.Round to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamRound) RemoveRound(exec boil.Executor, related *Round) error {
	var err error

	queries.SetScanner(&o.RoundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("round_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Round = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoundTeamRounds {
		if queries.Equal(o.RoundID, ri.RoundID) {
			continue
		}

		ln := len(related.R.RoundTeamRounds)
		if ln > 1 && i < ln-1 {
			related.R.RoundTeamRounds[i] = related.R.RoundTeamRounds[ln-1]
		}
		related.R.RoundTeamRounds = related.R.RoundTeamRounds[:ln-1]
		break
	}
	return nil
}

// SetTeam of the teamRound to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamTeamRounds.
func (o *TeamRound) SetTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `TeamRounds` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"team_id"}),
		strmangle.WhereClause("`", "`", 0, teamRoundPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamID, related.ID)
	if o.R == nil {
		o.R = &teamRoundR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			TeamTeamRounds: TeamRoundSlice{o},
		}
	} else {
		related.R.TeamTeamRounds = append(related.R.TeamTeamRounds, o)
	}

	return nil
}

// RemoveTeam relationship.
// Sets o.R.Team to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamRound) RemoveTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.TeamID, nil)
	if _, err = o.Update(exec, boil.Whitelist("team_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Team = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeamTeamRounds {
		if queries.Equal(o.TeamID, ri.TeamID) {
			continue
		}

		ln := len(related.R.TeamTeamRounds)
		if ln > 1 && i < ln-1 {
			related.R.TeamTeamRounds[i] = related.R.TeamTeamRounds[ln-1]
		}
		related.R.TeamTeamRounds = related.R.TeamTeamRounds[:ln-1]
		break
	}
	return nil
}

// AddTeamRoundTeamRoundPlayers adds the given related objects to the existing relationships
// of the TeamRound, optionally inserting them as new records.
// Appends related to o.R.TeamRoundTeamRoundPlayers.
// Sets related.R.TeamRound appropriately.
func (o *TeamRound) AddTeamRoundTeamRoundPlayers(exec boil.Executor, insert bool, related ...*TeamRoundPlayer) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.TeamRoundID, o.ID)
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `TeamRoundPlayers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"team_round_id"}),
				strmangle.WhereClause("`", "`", 0, teamRoundPlayerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.TeamRoundID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &teamRoundR{
			TeamRoundTeamRoundPlayers: related,
		}
	} else {
		o.R.TeamRoundTeamRoundPlayers = append(o.R.TeamRoundTeamRoundPlayers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &teamRoundPlayerR{
				TeamRound: o,
			}
		} else {
			rel.R.TeamRound = o
		}
	}
	return nil
}

// SetTeamRoundTeamRoundPlayers removes all previously related items of the
// TeamRound replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.TeamRound's TeamRoundTeamRoundPlayers accordingly.
// Replaces o.R.TeamRoundTeamRoundPlayers with related.
// Sets related.R.TeamRound's TeamRoundTeamRoundPlayers accordingly.
func (o *TeamRound) SetTeamRoundTeamRoundPlayers(exec boil.Executor, insert bool, related ...*TeamRoundPlayer) error {
	query := "update `TeamRoundPlayers` set `team_round_id` = null where `team_round_id` = ?"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.TeamRoundTeamRoundPlayers {
			queries.SetScanner(&rel.TeamRoundID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.TeamRound = nil
		}

		o.R.TeamRoundTeamRoundPlayers = nil
	}
	return o.AddTeamRoundTeamRoundPlayers(exec, insert, related...)
}

// RemoveTeamRoundTeamRoundPlayers relationships from objects passed in.
// Removes related items from R.TeamRoundTeamRoundPlayers (uses pointer comparison, removal does not keep order)
// Sets related.R.TeamRound.
func (o *TeamRound) RemoveTeamRoundTeamRoundPlayers(exec boil.Executor, related ...*TeamRoundPlayer) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.TeamRoundID, nil)
		if rel.R != nil {
			rel.R.TeamRound = nil
		}
		if _, err = rel.Update(exec, boil.Whitelist("team_round_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.TeamRoundTeamRoundPlayers {
			if rel != ri {
				continue
			}

			ln := len(o.R.TeamRoundTeamRoundPlayers)
			if ln > 1 && i < ln-1 {
				o.R.TeamRoundTeamRoundPlayers[i] = o.R.TeamRoundTeamRoundPlayers[ln-1]
			}
			o.R.TeamRoundTeamRoundPlayers = o.R.TeamRoundTeamRoundPlayers[:ln-1]
			break
		}
	}

	return nil
}

// TeamRounds retrieves all the records using an executor.
func TeamRounds(mods ...qm.QueryMod) teamRoundQuery {
	mods = append(mods, qm.From("`TeamRounds`"))
	return teamRoundQuery{NewQuery(mods...)}
}

// FindTeamRound retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamRound(exec boil.Executor, iD int, selectCols ...string) (*TeamRound, error) {
	teamRoundObj := &TeamRound{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `TeamRounds` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, teamRoundObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from TeamRounds")
	}

	return teamRoundObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamRound) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TeamRounds provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamRoundColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamRoundInsertCacheMut.RLock()
	cache, cached := teamRoundInsertCache[key]
	teamRoundInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamRoundAllColumns,
			teamRoundColumnsWithDefault,
			teamRoundColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamRoundType, teamRoundMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamRoundType, teamRoundMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `TeamRounds` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `TeamRounds` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `TeamRounds` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, teamRoundPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into TeamRounds")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == teamRoundMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for TeamRounds")
	}

CacheNoHooks:
	if !cached {
		teamRoundInsertCacheMut.Lock()
		teamRoundInsertCache[key] = cache
		teamRoundInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TeamRound.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamRound) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamRoundUpdateCacheMut.RLock()
	cache, cached := teamRoundUpdateCache[key]
	teamRoundUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamRoundAllColumns,
			teamRoundPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update TeamRounds, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `TeamRounds` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, teamRoundPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamRoundType, teamRoundMapping, append(wl, teamRoundPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update TeamRounds row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for TeamRounds")
	}

	if !cached {
		teamRoundUpdateCacheMut.Lock()
		teamRoundUpdateCache[key] = cache
		teamRoundUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamRoundQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for TeamRounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for TeamRounds")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamRoundSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `TeamRounds` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamRoundPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in teamRound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all teamRound")
	}
	return rowsAff, nil
}

var mySQLTeamRoundUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamRound) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TeamRounds provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamRoundColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTeamRoundUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamRoundUpsertCacheMut.RLock()
	cache, cached := teamRoundUpsertCache[key]
	teamRoundUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamRoundAllColumns,
			teamRoundColumnsWithDefault,
			teamRoundColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamRoundAllColumns,
			teamRoundPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert TeamRounds, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`TeamRounds`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `TeamRounds` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(teamRoundType, teamRoundMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamRoundType, teamRoundMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for TeamRounds")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == teamRoundMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(teamRoundType, teamRoundMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for TeamRounds")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for TeamRounds")
	}

CacheNoHooks:
	if !cached {
		teamRoundUpsertCacheMut.Lock()
		teamRoundUpsertCache[key] = cache
		teamRoundUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TeamRound record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamRound) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no TeamRound provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamRoundPrimaryKeyMapping)
	sql := "DELETE FROM `TeamRounds` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from TeamRounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for TeamRounds")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamRoundQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no teamRoundQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from TeamRounds")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TeamRounds")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamRoundSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamRoundBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `TeamRounds` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamRoundPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from teamRound slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TeamRounds")
	}

	if len(teamRoundAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamRound) Reload(exec boil.Executor) error {
	ret, err := FindTeamRound(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamRoundSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamRoundSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamRoundPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `TeamRounds`.* FROM `TeamRounds` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, teamRoundPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in TeamRoundSlice")
	}

	*o = slice

	return nil
}

// TeamRoundExists checks if the TeamRound row exists.
func TeamRoundExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `TeamRounds` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if TeamRounds exists")
	}

	return exists, nil
}
