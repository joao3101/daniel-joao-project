// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWaivers(t *testing.T) {
	t.Parallel()

	query := Waivers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWaiversDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWaiversQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Waivers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWaiversSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WaiverSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWaiversExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WaiverExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Waiver exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WaiverExists to return true, but got false.")
	}
}

func testWaiversFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	waiverFound, err := FindWaiver(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if waiverFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWaiversBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Waivers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testWaiversOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Waivers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWaiversAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	waiverOne := &Waiver{}
	waiverTwo := &Waiver{}
	if err = randomize.Struct(seed, waiverOne, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}
	if err = randomize.Struct(seed, waiverTwo, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = waiverOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = waiverTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Waivers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWaiversCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	waiverOne := &Waiver{}
	waiverTwo := &Waiver{}
	if err = randomize.Struct(seed, waiverOne, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}
	if err = randomize.Struct(seed, waiverTwo, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = waiverOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = waiverTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func waiverBeforeInsertHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverAfterInsertHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverAfterSelectHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverBeforeUpdateHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverAfterUpdateHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverBeforeDeleteHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverAfterDeleteHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverBeforeUpsertHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func waiverAfterUpsertHook(e boil.Executor, o *Waiver) error {
	*o = Waiver{}
	return nil
}

func testWaiversHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Waiver{}
	o := &Waiver{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, waiverDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Waiver object: %s", err)
	}

	AddWaiverHook(boil.BeforeInsertHook, waiverBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	waiverBeforeInsertHooks = []WaiverHook{}

	AddWaiverHook(boil.AfterInsertHook, waiverAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	waiverAfterInsertHooks = []WaiverHook{}

	AddWaiverHook(boil.AfterSelectHook, waiverAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	waiverAfterSelectHooks = []WaiverHook{}

	AddWaiverHook(boil.BeforeUpdateHook, waiverBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	waiverBeforeUpdateHooks = []WaiverHook{}

	AddWaiverHook(boil.AfterUpdateHook, waiverAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	waiverAfterUpdateHooks = []WaiverHook{}

	AddWaiverHook(boil.BeforeDeleteHook, waiverBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	waiverBeforeDeleteHooks = []WaiverHook{}

	AddWaiverHook(boil.AfterDeleteHook, waiverAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	waiverAfterDeleteHooks = []WaiverHook{}

	AddWaiverHook(boil.BeforeUpsertHook, waiverBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	waiverBeforeUpsertHooks = []WaiverHook{}

	AddWaiverHook(boil.AfterUpsertHook, waiverAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	waiverAfterUpsertHooks = []WaiverHook{}
}

func testWaiversInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWaiversInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(waiverColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWaiverToOneTeamUsingFromTeamTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Waiver
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.FromTeam, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.FromTeamTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WaiverSlice{&local}
	if err = local.L.LoadFromTeamTeam(tx, false, (*[]*Waiver)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FromTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.FromTeamTeam = nil
	if err = local.L.LoadFromTeamTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.FromTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWaiverToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Waiver
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.PlayerID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WaiverSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*Waiver)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWaiverToOneTeamUsingToTeamTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Waiver
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ToTeam, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ToTeamTeam().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := WaiverSlice{&local}
	if err = local.L.LoadToTeamTeam(tx, false, (*[]*Waiver)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ToTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ToTeamTeam = nil
	if err = local.L.LoadToTeamTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ToTeamTeam == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testWaiverToOneSetOpTeamUsingFromTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Waiver
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetFromTeamTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.FromTeamTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.FromTeamWaivers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.FromTeam, x.ID) {
			t.Error("foreign key was wrong value", a.FromTeam)
		}

		zero := reflect.Zero(reflect.TypeOf(a.FromTeam))
		reflect.Indirect(reflect.ValueOf(&a.FromTeam)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.FromTeam, x.ID) {
			t.Error("foreign key was wrong value", a.FromTeam, x.ID)
		}
	}
}

func testWaiverToOneRemoveOpTeamUsingFromTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Waiver
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetFromTeamTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveFromTeamTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.FromTeamTeam().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.FromTeamTeam != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.FromTeam) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.FromTeamWaivers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWaiverToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Waiver
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerWaivers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.PlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.PlayerID, x.ID) {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}

func testWaiverToOneRemoveOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Waiver
	var b Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetPlayer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemovePlayer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Player().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Player != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.PlayerID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.PlayerWaivers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWaiverToOneSetOpTeamUsingToTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Waiver
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetToTeamTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ToTeamTeam != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ToTeamWaivers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ToTeam, x.ID) {
			t.Error("foreign key was wrong value", a.ToTeam)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ToTeam))
		reflect.Indirect(reflect.ValueOf(&a.ToTeam)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ToTeam, x.ID) {
			t.Error("foreign key was wrong value", a.ToTeam, x.ID)
		}
	}
}

func testWaiverToOneRemoveOpTeamUsingToTeamTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Waiver
	var b Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetToTeamTeam(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveToTeamTeam(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ToTeamTeam().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.ToTeamTeam != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ToTeam) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ToTeamWaivers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testWaiversReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testWaiversReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WaiverSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testWaiversSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Waivers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	waiverDBTypes = map[string]string{`ID`: `integer`, `FromTeam`: `integer`, `ToTeam`: `integer`, `PlayerID`: `integer`, `Status`: `integer`, `CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testWaiversUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(waiverPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(waiverAllColumns) == len(waiverPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWaiversSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(waiverAllColumns) == len(waiverPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Waiver{}
	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, waiverDBTypes, true, waiverPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(waiverAllColumns, waiverPrimaryKeyColumns) {
		fields = waiverAllColumns
	} else {
		fields = strmangle.SetComplement(
			waiverAllColumns,
			waiverPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WaiverSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWaiversUpsert(t *testing.T) {
	t.Parallel()

	if len(waiverAllColumns) == len(waiverPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Waiver{}
	if err = randomize.Struct(seed, &o, waiverDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Waiver: %s", err)
	}

	count, err := Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, waiverDBTypes, false, waiverPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Waiver struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Waiver: %s", err)
	}

	count, err = Waivers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
