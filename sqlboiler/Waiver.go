// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Waiver is an object representing the database table.
type Waiver struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FromTeam  null.Int  `boil:"from_team" json:"from_team,omitempty" toml:"from_team" yaml:"from_team,omitempty"`
	ToTeam    null.Int  `boil:"to_team" json:"to_team,omitempty" toml:"to_team" yaml:"to_team,omitempty"`
	PlayerID  null.Int  `boil:"player_id" json:"player_id,omitempty" toml:"player_id" yaml:"player_id,omitempty"`
	Status    null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *waiverR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L waiverL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WaiverColumns = struct {
	ID        string
	FromTeam  string
	ToTeam    string
	PlayerID  string
	Status    string
	CreatedAt string
	DeletedAt string
}{
	ID:        "id",
	FromTeam:  "from_team",
	ToTeam:    "to_team",
	PlayerID:  "player_id",
	Status:    "status",
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
}

// Generated where

var WaiverWhere = struct {
	ID        whereHelperint
	FromTeam  whereHelpernull_Int
	ToTeam    whereHelpernull_Int
	PlayerID  whereHelpernull_Int
	Status    whereHelpernull_Int
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "\"Waiver\".\"id\""},
	FromTeam:  whereHelpernull_Int{field: "\"Waiver\".\"from_team\""},
	ToTeam:    whereHelpernull_Int{field: "\"Waiver\".\"to_team\""},
	PlayerID:  whereHelpernull_Int{field: "\"Waiver\".\"player_id\""},
	Status:    whereHelpernull_Int{field: "\"Waiver\".\"status\""},
	CreatedAt: whereHelpertime_Time{field: "\"Waiver\".\"created_at\""},
	DeletedAt: whereHelpernull_Time{field: "\"Waiver\".\"deleted_at\""},
}

// WaiverRels is where relationship names are stored.
var WaiverRels = struct {
	FromTeamTeam string
	Player       string
	ToTeamTeam   string
}{
	FromTeamTeam: "FromTeamTeam",
	Player:       "Player",
	ToTeamTeam:   "ToTeamTeam",
}

// waiverR is where relationships are stored.
type waiverR struct {
	FromTeamTeam *Team   `boil:"FromTeamTeam" json:"FromTeamTeam" toml:"FromTeamTeam" yaml:"FromTeamTeam"`
	Player       *Player `boil:"Player" json:"Player" toml:"Player" yaml:"Player"`
	ToTeamTeam   *Team   `boil:"ToTeamTeam" json:"ToTeamTeam" toml:"ToTeamTeam" yaml:"ToTeamTeam"`
}

// NewStruct creates a new relationship struct
func (*waiverR) NewStruct() *waiverR {
	return &waiverR{}
}

// waiverL is where Load methods for each relationship are stored.
type waiverL struct{}

var (
	waiverAllColumns            = []string{"id", "from_team", "to_team", "player_id", "status", "created_at", "deleted_at"}
	waiverColumnsWithoutDefault = []string{"from_team", "to_team", "player_id", "status", "created_at", "deleted_at"}
	waiverColumnsWithDefault    = []string{"id"}
	waiverPrimaryKeyColumns     = []string{"id"}
)

type (
	// WaiverSlice is an alias for a slice of pointers to Waiver.
	// This should generally be used opposed to []Waiver.
	WaiverSlice []*Waiver
	// WaiverHook is the signature for custom Waiver hook methods
	WaiverHook func(boil.Executor, *Waiver) error

	waiverQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	waiverType                 = reflect.TypeOf(&Waiver{})
	waiverMapping              = queries.MakeStructMapping(waiverType)
	waiverPrimaryKeyMapping, _ = queries.BindMapping(waiverType, waiverMapping, waiverPrimaryKeyColumns)
	waiverInsertCacheMut       sync.RWMutex
	waiverInsertCache          = make(map[string]insertCache)
	waiverUpdateCacheMut       sync.RWMutex
	waiverUpdateCache          = make(map[string]updateCache)
	waiverUpsertCacheMut       sync.RWMutex
	waiverUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var waiverBeforeInsertHooks []WaiverHook
var waiverBeforeUpdateHooks []WaiverHook
var waiverBeforeDeleteHooks []WaiverHook
var waiverBeforeUpsertHooks []WaiverHook

var waiverAfterInsertHooks []WaiverHook
var waiverAfterSelectHooks []WaiverHook
var waiverAfterUpdateHooks []WaiverHook
var waiverAfterDeleteHooks []WaiverHook
var waiverAfterUpsertHooks []WaiverHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Waiver) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Waiver) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Waiver) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Waiver) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Waiver) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Waiver) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Waiver) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Waiver) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Waiver) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range waiverAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWaiverHook registers your hook function for all future operations.
func AddWaiverHook(hookPoint boil.HookPoint, waiverHook WaiverHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		waiverBeforeInsertHooks = append(waiverBeforeInsertHooks, waiverHook)
	case boil.BeforeUpdateHook:
		waiverBeforeUpdateHooks = append(waiverBeforeUpdateHooks, waiverHook)
	case boil.BeforeDeleteHook:
		waiverBeforeDeleteHooks = append(waiverBeforeDeleteHooks, waiverHook)
	case boil.BeforeUpsertHook:
		waiverBeforeUpsertHooks = append(waiverBeforeUpsertHooks, waiverHook)
	case boil.AfterInsertHook:
		waiverAfterInsertHooks = append(waiverAfterInsertHooks, waiverHook)
	case boil.AfterSelectHook:
		waiverAfterSelectHooks = append(waiverAfterSelectHooks, waiverHook)
	case boil.AfterUpdateHook:
		waiverAfterUpdateHooks = append(waiverAfterUpdateHooks, waiverHook)
	case boil.AfterDeleteHook:
		waiverAfterDeleteHooks = append(waiverAfterDeleteHooks, waiverHook)
	case boil.AfterUpsertHook:
		waiverAfterUpsertHooks = append(waiverAfterUpsertHooks, waiverHook)
	}
}

// One returns a single waiver record from the query.
func (q waiverQuery) One(exec boil.Executor) (*Waiver, error) {
	o := &Waiver{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Waiver")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Waiver records from the query.
func (q waiverQuery) All(exec boil.Executor) (WaiverSlice, error) {
	var o []*Waiver

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Waiver slice")
	}

	if len(waiverAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Waiver records in the query.
func (q waiverQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Waiver rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q waiverQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Waiver exists")
	}

	return count > 0, nil
}

// FromTeamTeam pointed to by the foreign key.
func (o *Waiver) FromTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.FromTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "\"Teams\"")

	return query
}

// Player pointed to by the foreign key.
func (o *Waiver) Player(mods ...qm.QueryMod) playerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.PlayerID),
	}

	queryMods = append(queryMods, mods...)

	query := Players(queryMods...)
	queries.SetFrom(query.Query, "\"Players\"")

	return query
}

// ToTeamTeam pointed to by the foreign key.
func (o *Waiver) ToTeamTeam(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ToTeam),
	}

	queryMods = append(queryMods, mods...)

	query := Teams(queryMods...)
	queries.SetFrom(query.Query, "\"Teams\"")

	return query
}

// LoadFromTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (waiverL) LoadFromTeamTeam(e boil.Executor, singular bool, maybeWaiver interface{}, mods queries.Applicator) error {
	var slice []*Waiver
	var object *Waiver

	if singular {
		object = maybeWaiver.(*Waiver)
	} else {
		slice = *maybeWaiver.(*[]*Waiver)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &waiverR{}
		}
		if !queries.IsNil(object.FromTeam) {
			args = append(args, object.FromTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &waiverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.FromTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.FromTeam) {
				args = append(args, obj.FromTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(waiverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.FromTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.FromTeamWaivers = append(foreign.R.FromTeamWaivers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.FromTeam, foreign.ID) {
				local.R.FromTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.FromTeamWaivers = append(foreign.R.FromTeamWaivers, local)
				break
			}
		}
	}

	return nil
}

// LoadPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (waiverL) LoadPlayer(e boil.Executor, singular bool, maybeWaiver interface{}, mods queries.Applicator) error {
	var slice []*Waiver
	var object *Waiver

	if singular {
		object = maybeWaiver.(*Waiver)
	} else {
		slice = *maybeWaiver.(*[]*Waiver)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &waiverR{}
		}
		if !queries.IsNil(object.PlayerID) {
			args = append(args, object.PlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &waiverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.PlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.PlayerID) {
				args = append(args, obj.PlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Players`),
		qm.WhereIn(`Players.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Player")
	}

	var resultSlice []*Player
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Player")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Players")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Players")
	}

	if len(waiverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Player = foreign
		if foreign.R == nil {
			foreign.R = &playerR{}
		}
		foreign.R.PlayerWaivers = append(foreign.R.PlayerWaivers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.PlayerID, foreign.ID) {
				local.R.Player = foreign
				if foreign.R == nil {
					foreign.R = &playerR{}
				}
				foreign.R.PlayerWaivers = append(foreign.R.PlayerWaivers, local)
				break
			}
		}
	}

	return nil
}

// LoadToTeamTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (waiverL) LoadToTeamTeam(e boil.Executor, singular bool, maybeWaiver interface{}, mods queries.Applicator) error {
	var slice []*Waiver
	var object *Waiver

	if singular {
		object = maybeWaiver.(*Waiver)
	} else {
		slice = *maybeWaiver.(*[]*Waiver)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &waiverR{}
		}
		if !queries.IsNil(object.ToTeam) {
			args = append(args, object.ToTeam)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &waiverR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ToTeam) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ToTeam) {
				args = append(args, obj.ToTeam)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Teams`),
		qm.WhereIn(`Teams.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Teams")
	}

	if len(waiverAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ToTeamTeam = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.ToTeamWaivers = append(foreign.R.ToTeamWaivers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ToTeam, foreign.ID) {
				local.R.ToTeamTeam = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.ToTeamWaivers = append(foreign.R.ToTeamWaivers, local)
				break
			}
		}
	}

	return nil
}

// SetFromTeamTeam of the waiver to the related item.
// Sets o.R.FromTeamTeam to related.
// Adds o to related.R.FromTeamWaivers.
func (o *Waiver) SetFromTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Waiver\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"from_team"}),
		strmangle.WhereClause("\"", "\"", 2, waiverPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.FromTeam, related.ID)
	if o.R == nil {
		o.R = &waiverR{
			FromTeamTeam: related,
		}
	} else {
		o.R.FromTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			FromTeamWaivers: WaiverSlice{o},
		}
	} else {
		related.R.FromTeamWaivers = append(related.R.FromTeamWaivers, o)
	}

	return nil
}

// RemoveFromTeamTeam relationship.
// Sets o.R.FromTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Waiver) RemoveFromTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.FromTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("from_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.FromTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.FromTeamWaivers {
		if queries.Equal(o.FromTeam, ri.FromTeam) {
			continue
		}

		ln := len(related.R.FromTeamWaivers)
		if ln > 1 && i < ln-1 {
			related.R.FromTeamWaivers[i] = related.R.FromTeamWaivers[ln-1]
		}
		related.R.FromTeamWaivers = related.R.FromTeamWaivers[:ln-1]
		break
	}
	return nil
}

// SetPlayer of the waiver to the related item.
// Sets o.R.Player to related.
// Adds o to related.R.PlayerWaivers.
func (o *Waiver) SetPlayer(exec boil.Executor, insert bool, related *Player) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Waiver\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"player_id"}),
		strmangle.WhereClause("\"", "\"", 2, waiverPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.PlayerID, related.ID)
	if o.R == nil {
		o.R = &waiverR{
			Player: related,
		}
	} else {
		o.R.Player = related
	}

	if related.R == nil {
		related.R = &playerR{
			PlayerWaivers: WaiverSlice{o},
		}
	} else {
		related.R.PlayerWaivers = append(related.R.PlayerWaivers, o)
	}

	return nil
}

// RemovePlayer relationship.
// Sets o.R.Player to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Waiver) RemovePlayer(exec boil.Executor, related *Player) error {
	var err error

	queries.SetScanner(&o.PlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Player = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.PlayerWaivers {
		if queries.Equal(o.PlayerID, ri.PlayerID) {
			continue
		}

		ln := len(related.R.PlayerWaivers)
		if ln > 1 && i < ln-1 {
			related.R.PlayerWaivers[i] = related.R.PlayerWaivers[ln-1]
		}
		related.R.PlayerWaivers = related.R.PlayerWaivers[:ln-1]
		break
	}
	return nil
}

// SetToTeamTeam of the waiver to the related item.
// Sets o.R.ToTeamTeam to related.
// Adds o to related.R.ToTeamWaivers.
func (o *Waiver) SetToTeamTeam(exec boil.Executor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Waiver\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"to_team"}),
		strmangle.WhereClause("\"", "\"", 2, waiverPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ToTeam, related.ID)
	if o.R == nil {
		o.R = &waiverR{
			ToTeamTeam: related,
		}
	} else {
		o.R.ToTeamTeam = related
	}

	if related.R == nil {
		related.R = &teamR{
			ToTeamWaivers: WaiverSlice{o},
		}
	} else {
		related.R.ToTeamWaivers = append(related.R.ToTeamWaivers, o)
	}

	return nil
}

// RemoveToTeamTeam relationship.
// Sets o.R.ToTeamTeam to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Waiver) RemoveToTeamTeam(exec boil.Executor, related *Team) error {
	var err error

	queries.SetScanner(&o.ToTeam, nil)
	if _, err = o.Update(exec, boil.Whitelist("to_team")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.ToTeamTeam = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ToTeamWaivers {
		if queries.Equal(o.ToTeam, ri.ToTeam) {
			continue
		}

		ln := len(related.R.ToTeamWaivers)
		if ln > 1 && i < ln-1 {
			related.R.ToTeamWaivers[i] = related.R.ToTeamWaivers[ln-1]
		}
		related.R.ToTeamWaivers = related.R.ToTeamWaivers[:ln-1]
		break
	}
	return nil
}

// Waivers retrieves all the records using an executor.
func Waivers(mods ...qm.QueryMod) waiverQuery {
	mods = append(mods, qm.From("\"Waiver\""))
	return waiverQuery{NewQuery(mods...)}
}

// FindWaiver retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWaiver(exec boil.Executor, iD int, selectCols ...string) (*Waiver, error) {
	waiverObj := &Waiver{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Waiver\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, waiverObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Waiver")
	}

	return waiverObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Waiver) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Waiver provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(waiverColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	waiverInsertCacheMut.RLock()
	cache, cached := waiverInsertCache[key]
	waiverInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			waiverAllColumns,
			waiverColumnsWithDefault,
			waiverColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(waiverType, waiverMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(waiverType, waiverMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Waiver\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Waiver\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Waiver")
	}

	if !cached {
		waiverInsertCacheMut.Lock()
		waiverInsertCache[key] = cache
		waiverInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Waiver.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Waiver) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	waiverUpdateCacheMut.RLock()
	cache, cached := waiverUpdateCache[key]
	waiverUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			waiverAllColumns,
			waiverPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Waiver, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Waiver\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, waiverPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(waiverType, waiverMapping, append(wl, waiverPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Waiver row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Waiver")
	}

	if !cached {
		waiverUpdateCacheMut.Lock()
		waiverUpdateCache[key] = cache
		waiverUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q waiverQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Waiver")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Waiver")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WaiverSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), waiverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Waiver\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, waiverPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in waiver slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all waiver")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Waiver) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Waiver provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(waiverColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	waiverUpsertCacheMut.RLock()
	cache, cached := waiverUpsertCache[key]
	waiverUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			waiverAllColumns,
			waiverColumnsWithDefault,
			waiverColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			waiverAllColumns,
			waiverPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Waiver, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(waiverPrimaryKeyColumns))
			copy(conflict, waiverPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Waiver\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(waiverType, waiverMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(waiverType, waiverMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert Waiver")
	}

	if !cached {
		waiverUpsertCacheMut.Lock()
		waiverUpsertCache[key] = cache
		waiverUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Waiver record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Waiver) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Waiver provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), waiverPrimaryKeyMapping)
	sql := "DELETE FROM \"Waiver\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Waiver")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Waiver")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q waiverQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no waiverQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Waiver")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Waiver")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WaiverSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(waiverBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), waiverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Waiver\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, waiverPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from waiver slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Waiver")
	}

	if len(waiverAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Waiver) Reload(exec boil.Executor) error {
	ret, err := FindWaiver(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WaiverSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WaiverSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), waiverPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Waiver\".* FROM \"Waiver\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, waiverPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in WaiverSlice")
	}

	*o = slice

	return nil
}

// WaiverExists checks if the Waiver row exists.
func WaiverExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Waiver\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Waiver exists")
	}

	return exists, nil
}
