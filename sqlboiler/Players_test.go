// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPlayers(t *testing.T) {
	t.Parallel()

	query := Players()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Players().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Player exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayerExists to return true, but got false.")
	}
}

func testPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	playerFound, err := FindPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if playerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Players().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Players().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = playerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Players().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playerOne := &Player{}
	playerTwo := &Player{}
	if err = randomize.Struct(seed, playerOne, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err = randomize.Struct(seed, playerTwo, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = playerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = playerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playerBeforeInsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterInsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterSelectHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeUpdateHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterUpdateHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeDeleteHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterDeleteHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerBeforeUpsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func playerAfterUpsertHook(e boil.Executor, o *Player) error {
	*o = Player{}
	return nil
}

func testPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Player{}
	o := &Player{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, playerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Player object: %s", err)
	}

	AddPlayerHook(boil.BeforeInsertHook, playerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	playerBeforeInsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterInsertHook, playerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	playerAfterInsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterSelectHook, playerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	playerAfterSelectHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeUpdateHook, playerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	playerBeforeUpdateHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterUpdateHook, playerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	playerAfterUpdateHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeDeleteHook, playerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	playerBeforeDeleteHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterDeleteHook, playerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	playerAfterDeleteHooks = []PlayerHook{}

	AddPlayerHook(boil.BeforeUpsertHook, playerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	playerBeforeUpsertHooks = []PlayerHook{}

	AddPlayerHook(boil.AfterUpsertHook, playerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	playerAfterUpsertHooks = []PlayerHook{}
}

func testPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(playerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayerToManyPlayerPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playerRoundDBTypes, false, playerRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerRoundDBTypes, false, playerRoundColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PlayerID, a.ID)
	queries.Assign(&c.PlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerPlayerRounds().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PlayerID, b.PlayerID) {
			bFound = true
		}
		if queries.Equal(v.PlayerID, c.PlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadPlayerPlayerRounds(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerPlayerRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerPlayerRounds = nil
	if err = a.L.LoadPlayerPlayerRounds(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerPlayerRounds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyPlayerTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.PlayerID = a.ID
	c.PlayerID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerTeamPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.PlayerID == b.PlayerID {
			bFound = true
		}
		if v.PlayerID == c.PlayerID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadPlayerTeamPlayers(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerTeamPlayers = nil
	if err = a.L.LoadPlayerTeamPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerTeamPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyPlayerWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, waiverDBTypes, false, waiverColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.PlayerID, a.ID)
	queries.Assign(&c.PlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.PlayerWaivers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.PlayerID, b.PlayerID) {
			bFound = true
		}
		if queries.Equal(v.PlayerID, c.PlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := PlayerSlice{&a}
	if err = a.L.LoadPlayerWaivers(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerWaivers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.PlayerWaivers = nil
	if err = a.L.LoadPlayerWaivers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.PlayerWaivers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testPlayerToManyAddOpPlayerPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerRoundDBTypes, false, strmangle.SetComplement(playerRoundPrimaryKeyColumns, playerRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*PlayerRound{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerPlayerRounds(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if !queries.Equal(a.ID, second.PlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerPlayerRounds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerPlayerRounds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerPlayerRounds().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlayerToManySetOpPlayerPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerRoundDBTypes, false, strmangle.SetComplement(playerRoundPrimaryKeyColumns, playerRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlayerPlayerRounds(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlayerPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlayerPlayerRounds(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlayerPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.PlayerID)
	}
	if !queries.Equal(a.ID, e.PlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.PlayerID)
	}

	if b.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Player != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Player != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PlayerPlayerRounds[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PlayerPlayerRounds[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlayerToManyRemoveOpPlayerPlayerRounds(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e PlayerRound

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*PlayerRound{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerRoundDBTypes, false, strmangle.SetComplement(playerRoundPrimaryKeyColumns, playerRoundColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlayerPlayerRounds(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlayerPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlayerPlayerRounds(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlayerPlayerRounds().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Player != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Player != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PlayerPlayerRounds) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PlayerPlayerRounds[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PlayerPlayerRounds[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlayerToManyAddOpPlayerTeamPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e TeamPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerTeamPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.PlayerID {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if a.ID != second.PlayerID {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerTeamPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerTeamPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerTeamPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testPlayerToManyAddOpPlayerWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Waiver{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddPlayerWaivers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.PlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.PlayerID)
		}
		if !queries.Equal(a.ID, second.PlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.PlayerID)
		}

		if first.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Player != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.PlayerWaivers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.PlayerWaivers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.PlayerWaivers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testPlayerToManySetOpPlayerWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetPlayerWaivers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlayerWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetPlayerWaivers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlayerWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.PlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.PlayerID)
	}
	if !queries.Equal(a.ID, e.PlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.PlayerID)
	}

	if b.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Player != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Player != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.PlayerWaivers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.PlayerWaivers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testPlayerToManyRemoveOpPlayerWaivers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c, d, e Waiver

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Waiver{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, waiverDBTypes, false, strmangle.SetComplement(waiverPrimaryKeyColumns, waiverColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddPlayerWaivers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.PlayerWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemovePlayerWaivers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.PlayerWaivers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.PlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.PlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Player != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Player != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Player != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.PlayerWaivers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.PlayerWaivers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.PlayerWaivers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testPlayerToOneClubUsingClub(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Player
	var foreign Club

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.ClubID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Club().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := PlayerSlice{&local}
	if err = local.L.LoadClub(tx, false, (*[]*Player)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Club == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Club = nil
	if err = local.L.LoadClub(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Club == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testPlayerToOneSetOpClubUsingClub(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b, c Club

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Club{&b, &c} {
		err = a.SetClub(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Club != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ClubPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.ClubID, x.ID) {
			t.Error("foreign key was wrong value", a.ClubID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClubID))
		reflect.Indirect(reflect.ValueOf(&a.ClubID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.ClubID, x.ID) {
			t.Error("foreign key was wrong value", a.ClubID, x.ID)
		}
	}
}

func testPlayerToOneRemoveOpClubUsingClub(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Player
	var b Club

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetClub(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveClub(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Club().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Club != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.ClubID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ClubPlayers) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Players().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playerDBTypes = map[string]string{`ID`: `int`, `ClubID`: `int`, `Name`: `varchar`, `Age`: `timestamp`, `Position`: `int`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_             = bytes.MinRead
)

func testPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Player{}
	if err = randomize.Struct(seed, o, playerDBTypes, true, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, playerDBTypes, true, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playerAllColumns, playerPrimaryKeyColumns) {
		fields = playerAllColumns
	} else {
		fields = strmangle.SetComplement(
			playerAllColumns,
			playerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(playerAllColumns) == len(playerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPlayerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Player{}
	if err = randomize.Struct(seed, &o, playerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err := Players().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, playerDBTypes, false, playerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Player: %s", err)
	}

	count, err = Players().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
