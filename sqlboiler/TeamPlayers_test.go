// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTeamPlayers(t *testing.T) {
	t.Parallel()

	query := TeamPlayers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTeamPlayersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamPlayersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TeamPlayers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamPlayersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamPlayerSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTeamPlayersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TeamPlayerExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TeamPlayer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TeamPlayerExists to return true, but got false.")
	}
}

func testTeamPlayersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	teamPlayerFound, err := FindTeamPlayer(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if teamPlayerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTeamPlayersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TeamPlayers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTeamPlayersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TeamPlayers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTeamPlayersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	teamPlayerOne := &TeamPlayer{}
	teamPlayerTwo := &TeamPlayer{}
	if err = randomize.Struct(seed, teamPlayerOne, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, teamPlayerTwo, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TeamPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTeamPlayersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	teamPlayerOne := &TeamPlayer{}
	teamPlayerTwo := &TeamPlayer{}
	if err = randomize.Struct(seed, teamPlayerOne, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err = randomize.Struct(seed, teamPlayerTwo, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = teamPlayerOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = teamPlayerTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func teamPlayerBeforeInsertHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterInsertHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterSelectHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerBeforeUpdateHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterUpdateHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerBeforeDeleteHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterDeleteHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerBeforeUpsertHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func teamPlayerAfterUpsertHook(e boil.Executor, o *TeamPlayer) error {
	*o = TeamPlayer{}
	return nil
}

func testTeamPlayersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TeamPlayer{}
	o := &TeamPlayer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TeamPlayer object: %s", err)
	}

	AddTeamPlayerHook(boil.BeforeInsertHook, teamPlayerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeInsertHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterInsertHook, teamPlayerAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterInsertHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterSelectHook, teamPlayerAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterSelectHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.BeforeUpdateHook, teamPlayerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeUpdateHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterUpdateHook, teamPlayerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterUpdateHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.BeforeDeleteHook, teamPlayerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeDeleteHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterDeleteHook, teamPlayerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterDeleteHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.BeforeUpsertHook, teamPlayerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerBeforeUpsertHooks = []TeamPlayerHook{}

	AddTeamPlayerHook(boil.AfterUpsertHook, teamPlayerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	teamPlayerAfterUpsertHooks = []TeamPlayerHook{}
}

func testTeamPlayersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamPlayersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(teamPlayerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTeamPlayerToManyTeamPlayerTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, teamRoundPlayerDBTypes, false, teamRoundPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamRoundPlayerDBTypes, false, teamRoundPlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamPlayerID, a.ID)
	queries.Assign(&c.TeamPlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamPlayerTeamRoundPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamPlayerID, b.TeamPlayerID) {
			bFound = true
		}
		if queries.Equal(v.TeamPlayerID, c.TeamPlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamPlayerSlice{&a}
	if err = a.L.LoadTeamPlayerTeamRoundPlayers(tx, false, (*[]*TeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamPlayerTeamRoundPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamPlayerTeamRoundPlayers = nil
	if err = a.L.LoadTeamPlayerTeamRoundPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamPlayerTeamRoundPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamPlayerToManyTeamPlayerTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, tradePlayerDBTypes, false, tradePlayerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.TeamPlayerID, a.ID)
	queries.Assign(&c.TeamPlayerID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.TeamPlayerTradePlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.TeamPlayerID, b.TeamPlayerID) {
			bFound = true
		}
		if queries.Equal(v.TeamPlayerID, c.TeamPlayerID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TeamPlayerSlice{&a}
	if err = a.L.LoadTeamPlayerTradePlayers(tx, false, (*[]*TeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamPlayerTradePlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TeamPlayerTradePlayers = nil
	if err = a.L.LoadTeamPlayerTradePlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TeamPlayerTradePlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testTeamPlayerToManyAddOpTeamPlayerTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c, d, e TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRoundPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundPlayerDBTypes, false, strmangle.SetComplement(teamRoundPlayerPrimaryKeyColumns, teamRoundPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TeamRoundPlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamPlayerTeamRoundPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamPlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamPlayerID)
		}
		if !queries.Equal(a.ID, second.TeamPlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamPlayerID)
		}

		if first.R.TeamPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TeamPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamPlayerTeamRoundPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamPlayerTeamRoundPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamPlayerTeamRoundPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamPlayerToManySetOpTeamPlayerTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c, d, e TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRoundPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundPlayerDBTypes, false, strmangle.SetComplement(teamRoundPlayerPrimaryKeyColumns, teamRoundPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTeamPlayerTeamRoundPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamPlayerTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTeamPlayerTeamRoundPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamPlayerTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamPlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamPlayerID)
	}
	if !queries.Equal(a.ID, e.TeamPlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamPlayerID)
	}

	if b.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TeamPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TeamPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TeamPlayerTeamRoundPlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TeamPlayerTeamRoundPlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamPlayerToManyRemoveOpTeamPlayerTeamRoundPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c, d, e TeamRoundPlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TeamRoundPlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, teamRoundPlayerDBTypes, false, strmangle.SetComplement(teamRoundPlayerPrimaryKeyColumns, teamRoundPlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTeamPlayerTeamRoundPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamPlayerTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTeamPlayerTeamRoundPlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamPlayerTeamRoundPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TeamPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TeamPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TeamPlayerTeamRoundPlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TeamPlayerTeamRoundPlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TeamPlayerTeamRoundPlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamPlayerToManyAddOpTeamPlayerTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TradePlayer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTeamPlayerTradePlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.TeamPlayerID) {
			t.Error("foreign key was wrong value", a.ID, first.TeamPlayerID)
		}
		if !queries.Equal(a.ID, second.TeamPlayerID) {
			t.Error("foreign key was wrong value", a.ID, second.TeamPlayerID)
		}

		if first.R.TeamPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.TeamPlayer != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TeamPlayerTradePlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TeamPlayerTradePlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TeamPlayerTradePlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTeamPlayerToManySetOpTeamPlayerTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTeamPlayerTradePlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamPlayerTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTeamPlayerTradePlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamPlayerTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.TeamPlayerID) {
		t.Error("foreign key was wrong value", a.ID, d.TeamPlayerID)
	}
	if !queries.Equal(a.ID, e.TeamPlayerID) {
		t.Error("foreign key was wrong value", a.ID, e.TeamPlayerID)
	}

	if b.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TeamPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.TeamPlayer != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.TeamPlayerTradePlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.TeamPlayerTradePlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTeamPlayerToManyRemoveOpTeamPlayerTradePlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c, d, e TradePlayer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TradePlayer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tradePlayerDBTypes, false, strmangle.SetComplement(tradePlayerPrimaryKeyColumns, tradePlayerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTeamPlayerTradePlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.TeamPlayerTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTeamPlayerTradePlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.TeamPlayerTradePlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.TeamPlayerID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.TeamPlayerID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.TeamPlayer != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.TeamPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.TeamPlayer != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.TeamPlayerTradePlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.TeamPlayerTradePlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.TeamPlayerTradePlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTeamPlayerToOnePlayerUsingPlayer(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TeamPlayer
	var foreign Player

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Player struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.PlayerID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Player().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamPlayerSlice{&local}
	if err = local.L.LoadPlayer(tx, false, (*[]*TeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Player = nil
	if err = local.L.LoadPlayer(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Player == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeamPlayerToOneTeamUsingTeam(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TeamPlayer
	var foreign Team

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, teamPlayerDBTypes, false, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, teamDBTypes, false, teamColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Team struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TeamID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Team().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TeamPlayerSlice{&local}
	if err = local.L.LoadTeam(tx, false, (*[]*TeamPlayer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Team = nil
	if err = local.L.LoadTeam(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Team == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTeamPlayerToOneSetOpPlayerUsingPlayer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Player{&b, &c} {
		err = a.SetPlayer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Player != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.PlayerTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.PlayerID))
		reflect.Indirect(reflect.ValueOf(&a.PlayerID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.PlayerID != x.ID {
			t.Error("foreign key was wrong value", a.PlayerID, x.ID)
		}
	}
}
func testTeamPlayerToOneSetOpTeamUsingTeam(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TeamPlayer
	var b, c Team

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, teamPlayerDBTypes, false, strmangle.SetComplement(teamPlayerPrimaryKeyColumns, teamPlayerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, teamDBTypes, false, strmangle.SetComplement(teamPrimaryKeyColumns, teamColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Team{&b, &c} {
		err = a.SetTeam(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Team != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TeamTeamPlayers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TeamID))
		reflect.Indirect(reflect.ValueOf(&a.TeamID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TeamID != x.ID {
			t.Error("foreign key was wrong value", a.TeamID, x.ID)
		}
	}
}

func testTeamPlayersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTeamPlayersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TeamPlayerSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTeamPlayersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TeamPlayers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	teamPlayerDBTypes = map[string]string{`ID`: `int`, `PlayerID`: `int`, `TeamID`: `int`, `CreatedAt`: `timestamp`, `DeletedAt`: `timestamp`}
	_                 = bytes.MinRead
)

func testTeamPlayersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(teamPlayerAllColumns) == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTeamPlayersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(teamPlayerAllColumns) == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TeamPlayer{}
	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, teamPlayerDBTypes, true, teamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(teamPlayerAllColumns, teamPlayerPrimaryKeyColumns) {
		fields = teamPlayerAllColumns
	} else {
		fields = strmangle.SetComplement(
			teamPlayerAllColumns,
			teamPlayerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TeamPlayerSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTeamPlayersUpsert(t *testing.T) {
	t.Parallel()

	if len(teamPlayerAllColumns) == len(teamPlayerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLTeamPlayerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TeamPlayer{}
	if err = randomize.Struct(seed, &o, teamPlayerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TeamPlayer: %s", err)
	}

	count, err := TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, teamPlayerDBTypes, false, teamPlayerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TeamPlayer struct: %s", err)
	}

	if err = o.Upsert(tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TeamPlayer: %s", err)
	}

	count, err = TeamPlayers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
