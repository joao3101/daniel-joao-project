// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClubs(t *testing.T) {
	t.Parallel()

	query := Clubs()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClubsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Clubs().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClubSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClubsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClubExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Club exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClubExists to return true, but got false.")
	}
}

func testClubsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	clubFound, err := FindClub(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if clubFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClubsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Clubs().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testClubsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Clubs().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClubsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	clubOne := &Club{}
	clubTwo := &Club{}
	if err = randomize.Struct(seed, clubOne, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}
	if err = randomize.Struct(seed, clubTwo, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = clubOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clubTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clubs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClubsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	clubOne := &Club{}
	clubTwo := &Club{}
	if err = randomize.Struct(seed, clubOne, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}
	if err = randomize.Struct(seed, clubTwo, clubDBTypes, false, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = clubOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clubTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func clubBeforeInsertHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterInsertHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterSelectHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubBeforeUpdateHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterUpdateHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubBeforeDeleteHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterDeleteHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubBeforeUpsertHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func clubAfterUpsertHook(e boil.Executor, o *Club) error {
	*o = Club{}
	return nil
}

func testClubsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Club{}
	o := &Club{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, clubDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Club object: %s", err)
	}

	AddClubHook(boil.BeforeInsertHook, clubBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	clubBeforeInsertHooks = []ClubHook{}

	AddClubHook(boil.AfterInsertHook, clubAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	clubAfterInsertHooks = []ClubHook{}

	AddClubHook(boil.AfterSelectHook, clubAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	clubAfterSelectHooks = []ClubHook{}

	AddClubHook(boil.BeforeUpdateHook, clubBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	clubBeforeUpdateHooks = []ClubHook{}

	AddClubHook(boil.AfterUpdateHook, clubAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	clubAfterUpdateHooks = []ClubHook{}

	AddClubHook(boil.BeforeDeleteHook, clubBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	clubBeforeDeleteHooks = []ClubHook{}

	AddClubHook(boil.AfterDeleteHook, clubAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	clubAfterDeleteHooks = []ClubHook{}

	AddClubHook(boil.BeforeUpsertHook, clubBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	clubBeforeUpsertHooks = []ClubHook{}

	AddClubHook(boil.AfterUpsertHook, clubAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	clubAfterUpsertHooks = []ClubHook{}
}

func testClubsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClubsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(clubColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClubToManyAwayClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, clubMatchupDBTypes, false, clubMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubMatchupDBTypes, false, clubMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.AwayClub, a.ID)
	queries.Assign(&c.AwayClub, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.AwayClubClubMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.AwayClub, b.AwayClub) {
			bFound = true
		}
		if queries.Equal(v.AwayClub, c.AwayClub) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClubSlice{&a}
	if err = a.L.LoadAwayClubClubMatchups(tx, false, (*[]*Club)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AwayClubClubMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AwayClubClubMatchups = nil
	if err = a.L.LoadAwayClubClubMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AwayClubClubMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClubToManyHomeClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, clubMatchupDBTypes, false, clubMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clubMatchupDBTypes, false, clubMatchupColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.HomeClub, a.ID)
	queries.Assign(&c.HomeClub, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.HomeClubClubMatchups().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.HomeClub, b.HomeClub) {
			bFound = true
		}
		if queries.Equal(v.HomeClub, c.HomeClub) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClubSlice{&a}
	if err = a.L.LoadHomeClubClubMatchups(tx, false, (*[]*Club)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeClubClubMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.HomeClubClubMatchups = nil
	if err = a.L.LoadHomeClubClubMatchups(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.HomeClubClubMatchups); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClubToManyClubPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, playerDBTypes, false, playerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ClubID, a.ID)
	queries.Assign(&c.ClubID, a.ID)
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ClubPlayers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ClubID, b.ClubID) {
			bFound = true
		}
		if queries.Equal(v.ClubID, c.ClubID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClubSlice{&a}
	if err = a.L.LoadClubPlayers(tx, false, (*[]*Club)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClubPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ClubPlayers = nil
	if err = a.L.LoadClubPlayers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClubPlayers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClubToManyAddOpAwayClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ClubMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAwayClubClubMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.AwayClub) {
			t.Error("foreign key was wrong value", a.ID, first.AwayClub)
		}
		if !queries.Equal(a.ID, second.AwayClub) {
			t.Error("foreign key was wrong value", a.ID, second.AwayClub)
		}

		if first.R.AwayClubClub != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.AwayClubClub != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AwayClubClubMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AwayClubClubMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AwayClubClubMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testClubToManySetOpAwayClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAwayClubClubMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AwayClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAwayClubClubMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AwayClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AwayClub) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AwayClub) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.AwayClub) {
		t.Error("foreign key was wrong value", a.ID, d.AwayClub)
	}
	if !queries.Equal(a.ID, e.AwayClub) {
		t.Error("foreign key was wrong value", a.ID, e.AwayClub)
	}

	if b.R.AwayClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AwayClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AwayClubClub != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.AwayClubClub != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.AwayClubClubMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.AwayClubClubMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testClubToManyRemoveOpAwayClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAwayClubClubMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.AwayClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAwayClubClubMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.AwayClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.AwayClub) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.AwayClub) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.AwayClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.AwayClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.AwayClubClub != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.AwayClubClub != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.AwayClubClubMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.AwayClubClubMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.AwayClubClubMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testClubToManyAddOpHomeClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ClubMatchup{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddHomeClubClubMatchups(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.HomeClub) {
			t.Error("foreign key was wrong value", a.ID, first.HomeClub)
		}
		if !queries.Equal(a.ID, second.HomeClub) {
			t.Error("foreign key was wrong value", a.ID, second.HomeClub)
		}

		if first.R.HomeClubClub != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.HomeClubClub != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.HomeClubClubMatchups[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.HomeClubClubMatchups[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.HomeClubClubMatchups().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testClubToManySetOpHomeClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetHomeClubClubMatchups(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.HomeClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetHomeClubClubMatchups(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.HomeClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.HomeClub) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.HomeClub) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.HomeClub) {
		t.Error("foreign key was wrong value", a.ID, d.HomeClub)
	}
	if !queries.Equal(a.ID, e.HomeClub) {
		t.Error("foreign key was wrong value", a.ID, e.HomeClub)
	}

	if b.R.HomeClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.HomeClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.HomeClubClub != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.HomeClubClub != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.HomeClubClubMatchups[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.HomeClubClubMatchups[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testClubToManyRemoveOpHomeClubClubMatchups(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e ClubMatchup

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClubMatchup{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clubMatchupDBTypes, false, strmangle.SetComplement(clubMatchupPrimaryKeyColumns, clubMatchupColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddHomeClubClubMatchups(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.HomeClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveHomeClubClubMatchups(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.HomeClubClubMatchups().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.HomeClub) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.HomeClub) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.HomeClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.HomeClubClub != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.HomeClubClub != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.HomeClubClub != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.HomeClubClubMatchups) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.HomeClubClubMatchups[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.HomeClubClubMatchups[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testClubToManyAddOpClubPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Player{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClubPlayers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ClubID) {
			t.Error("foreign key was wrong value", a.ID, first.ClubID)
		}
		if !queries.Equal(a.ID, second.ClubID) {
			t.Error("foreign key was wrong value", a.ID, second.ClubID)
		}

		if first.R.Club != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Club != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ClubPlayers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ClubPlayers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ClubPlayers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testClubToManySetOpClubPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetClubPlayers(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ClubPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetClubPlayers(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ClubPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ClubID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ClubID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ClubID) {
		t.Error("foreign key was wrong value", a.ID, d.ClubID)
	}
	if !queries.Equal(a.ID, e.ClubID) {
		t.Error("foreign key was wrong value", a.ID, e.ClubID)
	}

	if b.R.Club != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Club != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Club != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Club != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ClubPlayers[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ClubPlayers[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testClubToManyRemoveOpClubPlayers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Club
	var b, c, d, e Player

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clubDBTypes, false, strmangle.SetComplement(clubPrimaryKeyColumns, clubColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Player{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, playerDBTypes, false, strmangle.SetComplement(playerPrimaryKeyColumns, playerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddClubPlayers(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ClubPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveClubPlayers(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ClubPlayers().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ClubID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ClubID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Club != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Club != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Club != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Club != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ClubPlayers) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ClubPlayers[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ClubPlayers[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testClubsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testClubsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClubSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testClubsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clubs().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	clubDBTypes = map[string]string{`ID`: `integer`, `Name`: `character varying`, `CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`}
	_           = bytes.MinRead
)

func testClubsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(clubAllColumns) == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clubDBTypes, true, clubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClubsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(clubAllColumns) == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Club{}
	if err = randomize.Struct(seed, o, clubDBTypes, true, clubColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clubDBTypes, true, clubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(clubAllColumns, clubPrimaryKeyColumns) {
		fields = clubAllColumns
	} else {
		fields = strmangle.SetComplement(
			clubAllColumns,
			clubPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClubSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClubsUpsert(t *testing.T) {
	t.Parallel()

	if len(clubAllColumns) == len(clubPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Club{}
	if err = randomize.Struct(seed, &o, clubDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Club: %s", err)
	}

	count, err := Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, clubDBTypes, false, clubPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Club struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Club: %s", err)
	}

	count, err = Clubs().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
