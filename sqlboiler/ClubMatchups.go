// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClubMatchup is an object representing the database table.
type ClubMatchup struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoundID       null.Int  `boil:"round_id" json:"round_id,omitempty" toml:"round_id" yaml:"round_id,omitempty"`
	HomeClub      null.Int  `boil:"home_club" json:"home_club,omitempty" toml:"home_club" yaml:"home_club,omitempty"`
	AwayClub      null.Int  `boil:"away_club" json:"away_club,omitempty" toml:"away_club" yaml:"away_club,omitempty"`
	GameTime      time.Time `boil:"game_time" json:"game_time" toml:"game_time" yaml:"game_time"`
	HomeClubScore null.Int  `boil:"home_club_score" json:"home_club_score,omitempty" toml:"home_club_score" yaml:"home_club_score,omitempty"`
	AwayClubScore null.Int  `boil:"away_club_score" json:"away_club_score,omitempty" toml:"away_club_score" yaml:"away_club_score,omitempty"`
	Status        null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt     time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *clubMatchupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clubMatchupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClubMatchupColumns = struct {
	ID            string
	RoundID       string
	HomeClub      string
	AwayClub      string
	GameTime      string
	HomeClubScore string
	AwayClubScore string
	Status        string
	CreatedAt     string
	DeletedAt     string
}{
	ID:            "id",
	RoundID:       "round_id",
	HomeClub:      "home_club",
	AwayClub:      "away_club",
	GameTime:      "game_time",
	HomeClubScore: "home_club_score",
	AwayClubScore: "away_club_score",
	Status:        "status",
	CreatedAt:     "created_at",
	DeletedAt:     "deleted_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var ClubMatchupWhere = struct {
	ID            whereHelperint
	RoundID       whereHelpernull_Int
	HomeClub      whereHelpernull_Int
	AwayClub      whereHelpernull_Int
	GameTime      whereHelpertime_Time
	HomeClubScore whereHelpernull_Int
	AwayClubScore whereHelpernull_Int
	Status        whereHelpernull_Int
	CreatedAt     whereHelpertime_Time
	DeletedAt     whereHelpertime_Time
}{
	ID:            whereHelperint{field: "`ClubMatchups`.`id`"},
	RoundID:       whereHelpernull_Int{field: "`ClubMatchups`.`round_id`"},
	HomeClub:      whereHelpernull_Int{field: "`ClubMatchups`.`home_club`"},
	AwayClub:      whereHelpernull_Int{field: "`ClubMatchups`.`away_club`"},
	GameTime:      whereHelpertime_Time{field: "`ClubMatchups`.`game_time`"},
	HomeClubScore: whereHelpernull_Int{field: "`ClubMatchups`.`home_club_score`"},
	AwayClubScore: whereHelpernull_Int{field: "`ClubMatchups`.`away_club_score`"},
	Status:        whereHelpernull_Int{field: "`ClubMatchups`.`status`"},
	CreatedAt:     whereHelpertime_Time{field: "`ClubMatchups`.`created_at`"},
	DeletedAt:     whereHelpertime_Time{field: "`ClubMatchups`.`deleted_at`"},
}

// ClubMatchupRels is where relationship names are stored.
var ClubMatchupRels = struct {
	Round        string
	HomeClubClub string
	AwayClubClub string
}{
	Round:        "Round",
	HomeClubClub: "HomeClubClub",
	AwayClubClub: "AwayClubClub",
}

// clubMatchupR is where relationships are stored.
type clubMatchupR struct {
	Round        *Round `boil:"Round" json:"Round" toml:"Round" yaml:"Round"`
	HomeClubClub *Club  `boil:"HomeClubClub" json:"HomeClubClub" toml:"HomeClubClub" yaml:"HomeClubClub"`
	AwayClubClub *Club  `boil:"AwayClubClub" json:"AwayClubClub" toml:"AwayClubClub" yaml:"AwayClubClub"`
}

// NewStruct creates a new relationship struct
func (*clubMatchupR) NewStruct() *clubMatchupR {
	return &clubMatchupR{}
}

// clubMatchupL is where Load methods for each relationship are stored.
type clubMatchupL struct{}

var (
	clubMatchupAllColumns            = []string{"id", "round_id", "home_club", "away_club", "game_time", "home_club_score", "away_club_score", "status", "created_at", "deleted_at"}
	clubMatchupColumnsWithoutDefault = []string{"round_id", "home_club", "away_club", "home_club_score", "away_club_score", "status"}
	clubMatchupColumnsWithDefault    = []string{"id", "game_time", "created_at", "deleted_at"}
	clubMatchupPrimaryKeyColumns     = []string{"id"}
)

type (
	// ClubMatchupSlice is an alias for a slice of pointers to ClubMatchup.
	// This should generally be used opposed to []ClubMatchup.
	ClubMatchupSlice []*ClubMatchup
	// ClubMatchupHook is the signature for custom ClubMatchup hook methods
	ClubMatchupHook func(boil.Executor, *ClubMatchup) error

	clubMatchupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clubMatchupType                 = reflect.TypeOf(&ClubMatchup{})
	clubMatchupMapping              = queries.MakeStructMapping(clubMatchupType)
	clubMatchupPrimaryKeyMapping, _ = queries.BindMapping(clubMatchupType, clubMatchupMapping, clubMatchupPrimaryKeyColumns)
	clubMatchupInsertCacheMut       sync.RWMutex
	clubMatchupInsertCache          = make(map[string]insertCache)
	clubMatchupUpdateCacheMut       sync.RWMutex
	clubMatchupUpdateCache          = make(map[string]updateCache)
	clubMatchupUpsertCacheMut       sync.RWMutex
	clubMatchupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clubMatchupBeforeInsertHooks []ClubMatchupHook
var clubMatchupBeforeUpdateHooks []ClubMatchupHook
var clubMatchupBeforeDeleteHooks []ClubMatchupHook
var clubMatchupBeforeUpsertHooks []ClubMatchupHook

var clubMatchupAfterInsertHooks []ClubMatchupHook
var clubMatchupAfterSelectHooks []ClubMatchupHook
var clubMatchupAfterUpdateHooks []ClubMatchupHook
var clubMatchupAfterDeleteHooks []ClubMatchupHook
var clubMatchupAfterUpsertHooks []ClubMatchupHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClubMatchup) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClubMatchup) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClubMatchup) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClubMatchup) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClubMatchup) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClubMatchup) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClubMatchup) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClubMatchup) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClubMatchup) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range clubMatchupAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClubMatchupHook registers your hook function for all future operations.
func AddClubMatchupHook(hookPoint boil.HookPoint, clubMatchupHook ClubMatchupHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		clubMatchupBeforeInsertHooks = append(clubMatchupBeforeInsertHooks, clubMatchupHook)
	case boil.BeforeUpdateHook:
		clubMatchupBeforeUpdateHooks = append(clubMatchupBeforeUpdateHooks, clubMatchupHook)
	case boil.BeforeDeleteHook:
		clubMatchupBeforeDeleteHooks = append(clubMatchupBeforeDeleteHooks, clubMatchupHook)
	case boil.BeforeUpsertHook:
		clubMatchupBeforeUpsertHooks = append(clubMatchupBeforeUpsertHooks, clubMatchupHook)
	case boil.AfterInsertHook:
		clubMatchupAfterInsertHooks = append(clubMatchupAfterInsertHooks, clubMatchupHook)
	case boil.AfterSelectHook:
		clubMatchupAfterSelectHooks = append(clubMatchupAfterSelectHooks, clubMatchupHook)
	case boil.AfterUpdateHook:
		clubMatchupAfterUpdateHooks = append(clubMatchupAfterUpdateHooks, clubMatchupHook)
	case boil.AfterDeleteHook:
		clubMatchupAfterDeleteHooks = append(clubMatchupAfterDeleteHooks, clubMatchupHook)
	case boil.AfterUpsertHook:
		clubMatchupAfterUpsertHooks = append(clubMatchupAfterUpsertHooks, clubMatchupHook)
	}
}

// One returns a single clubMatchup record from the query.
func (q clubMatchupQuery) One(exec boil.Executor) (*ClubMatchup, error) {
	o := &ClubMatchup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for ClubMatchups")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClubMatchup records from the query.
func (q clubMatchupQuery) All(exec boil.Executor) (ClubMatchupSlice, error) {
	var o []*ClubMatchup

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to ClubMatchup slice")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClubMatchup records in the query.
func (q clubMatchupQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count ClubMatchups rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clubMatchupQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if ClubMatchups exists")
	}

	return count > 0, nil
}

// Round pointed to by the foreign key.
func (o *ClubMatchup) Round(mods ...qm.QueryMod) roundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoundID),
	}

	queryMods = append(queryMods, mods...)

	query := Rounds(queryMods...)
	queries.SetFrom(query.Query, "`Round`")

	return query
}

// HomeClubClub pointed to by the foreign key.
func (o *ClubMatchup) HomeClubClub(mods ...qm.QueryMod) clubQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.HomeClub),
	}

	queryMods = append(queryMods, mods...)

	query := Clubs(queryMods...)
	queries.SetFrom(query.Query, "`Clubs`")

	return query
}

// AwayClubClub pointed to by the foreign key.
func (o *ClubMatchup) AwayClubClub(mods ...qm.QueryMod) clubQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.AwayClub),
	}

	queryMods = append(queryMods, mods...)

	query := Clubs(queryMods...)
	queries.SetFrom(query.Query, "`Clubs`")

	return query
}

// LoadRound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clubMatchupL) LoadRound(e boil.Executor, singular bool, maybeClubMatchup interface{}, mods queries.Applicator) error {
	var slice []*ClubMatchup
	var object *ClubMatchup

	if singular {
		object = maybeClubMatchup.(*ClubMatchup)
	} else {
		slice = *maybeClubMatchup.(*[]*ClubMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubMatchupR{}
		}
		if !queries.IsNil(object.RoundID) {
			args = append(args, object.RoundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.RoundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.RoundID) {
				args = append(args, obj.RoundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Round`),
		qm.WhereIn(`Round.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Round")
	}

	var resultSlice []*Round
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Round")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Round")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Round")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Round = foreign
		if foreign.R == nil {
			foreign.R = &roundR{}
		}
		foreign.R.RoundClubMatchups = append(foreign.R.RoundClubMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.RoundID, foreign.ID) {
				local.R.Round = foreign
				if foreign.R == nil {
					foreign.R = &roundR{}
				}
				foreign.R.RoundClubMatchups = append(foreign.R.RoundClubMatchups, local)
				break
			}
		}
	}

	return nil
}

// LoadHomeClubClub allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clubMatchupL) LoadHomeClubClub(e boil.Executor, singular bool, maybeClubMatchup interface{}, mods queries.Applicator) error {
	var slice []*ClubMatchup
	var object *ClubMatchup

	if singular {
		object = maybeClubMatchup.(*ClubMatchup)
	} else {
		slice = *maybeClubMatchup.(*[]*ClubMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubMatchupR{}
		}
		if !queries.IsNil(object.HomeClub) {
			args = append(args, object.HomeClub)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HomeClub) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HomeClub) {
				args = append(args, obj.HomeClub)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Clubs`),
		qm.WhereIn(`Clubs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Club")
	}

	var resultSlice []*Club
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Club")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Clubs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Clubs")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HomeClubClub = foreign
		if foreign.R == nil {
			foreign.R = &clubR{}
		}
		foreign.R.HomeClubClubMatchups = append(foreign.R.HomeClubClubMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HomeClub, foreign.ID) {
				local.R.HomeClubClub = foreign
				if foreign.R == nil {
					foreign.R = &clubR{}
				}
				foreign.R.HomeClubClubMatchups = append(foreign.R.HomeClubClubMatchups, local)
				break
			}
		}
	}

	return nil
}

// LoadAwayClubClub allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clubMatchupL) LoadAwayClubClub(e boil.Executor, singular bool, maybeClubMatchup interface{}, mods queries.Applicator) error {
	var slice []*ClubMatchup
	var object *ClubMatchup

	if singular {
		object = maybeClubMatchup.(*ClubMatchup)
	} else {
		slice = *maybeClubMatchup.(*[]*ClubMatchup)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &clubMatchupR{}
		}
		if !queries.IsNil(object.AwayClub) {
			args = append(args, object.AwayClub)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clubMatchupR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AwayClub) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AwayClub) {
				args = append(args, obj.AwayClub)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`Clubs`),
		qm.WhereIn(`Clubs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Club")
	}

	var resultSlice []*Club
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Club")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for Clubs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Clubs")
	}

	if len(clubMatchupAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AwayClubClub = foreign
		if foreign.R == nil {
			foreign.R = &clubR{}
		}
		foreign.R.AwayClubClubMatchups = append(foreign.R.AwayClubClubMatchups, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AwayClub, foreign.ID) {
				local.R.AwayClubClub = foreign
				if foreign.R == nil {
					foreign.R = &clubR{}
				}
				foreign.R.AwayClubClubMatchups = append(foreign.R.AwayClubClubMatchups, local)
				break
			}
		}
	}

	return nil
}

// SetRound of the clubMatchup to the related item.
// Sets o.R.Round to related.
// Adds o to related.R.RoundClubMatchups.
func (o *ClubMatchup) SetRound(exec boil.Executor, insert bool, related *Round) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ClubMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"round_id"}),
		strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.RoundID, related.ID)
	if o.R == nil {
		o.R = &clubMatchupR{
			Round: related,
		}
	} else {
		o.R.Round = related
	}

	if related.R == nil {
		related.R = &roundR{
			RoundClubMatchups: ClubMatchupSlice{o},
		}
	} else {
		related.R.RoundClubMatchups = append(related.R.RoundClubMatchups, o)
	}

	return nil
}

// RemoveRound relationship.
// Sets o.R.Round to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ClubMatchup) RemoveRound(exec boil.Executor, related *Round) error {
	var err error

	queries.SetScanner(&o.RoundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("round_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Round = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.RoundClubMatchups {
		if queries.Equal(o.RoundID, ri.RoundID) {
			continue
		}

		ln := len(related.R.RoundClubMatchups)
		if ln > 1 && i < ln-1 {
			related.R.RoundClubMatchups[i] = related.R.RoundClubMatchups[ln-1]
		}
		related.R.RoundClubMatchups = related.R.RoundClubMatchups[:ln-1]
		break
	}
	return nil
}

// SetHomeClubClub of the clubMatchup to the related item.
// Sets o.R.HomeClubClub to related.
// Adds o to related.R.HomeClubClubMatchups.
func (o *ClubMatchup) SetHomeClubClub(exec boil.Executor, insert bool, related *Club) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ClubMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"home_club"}),
		strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HomeClub, related.ID)
	if o.R == nil {
		o.R = &clubMatchupR{
			HomeClubClub: related,
		}
	} else {
		o.R.HomeClubClub = related
	}

	if related.R == nil {
		related.R = &clubR{
			HomeClubClubMatchups: ClubMatchupSlice{o},
		}
	} else {
		related.R.HomeClubClubMatchups = append(related.R.HomeClubClubMatchups, o)
	}

	return nil
}

// RemoveHomeClubClub relationship.
// Sets o.R.HomeClubClub to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ClubMatchup) RemoveHomeClubClub(exec boil.Executor, related *Club) error {
	var err error

	queries.SetScanner(&o.HomeClub, nil)
	if _, err = o.Update(exec, boil.Whitelist("home_club")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.HomeClubClub = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HomeClubClubMatchups {
		if queries.Equal(o.HomeClub, ri.HomeClub) {
			continue
		}

		ln := len(related.R.HomeClubClubMatchups)
		if ln > 1 && i < ln-1 {
			related.R.HomeClubClubMatchups[i] = related.R.HomeClubClubMatchups[ln-1]
		}
		related.R.HomeClubClubMatchups = related.R.HomeClubClubMatchups[:ln-1]
		break
	}
	return nil
}

// SetAwayClubClub of the clubMatchup to the related item.
// Sets o.R.AwayClubClub to related.
// Adds o to related.R.AwayClubClubMatchups.
func (o *ClubMatchup) SetAwayClubClub(exec boil.Executor, insert bool, related *Club) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `ClubMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"away_club"}),
		strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AwayClub, related.ID)
	if o.R == nil {
		o.R = &clubMatchupR{
			AwayClubClub: related,
		}
	} else {
		o.R.AwayClubClub = related
	}

	if related.R == nil {
		related.R = &clubR{
			AwayClubClubMatchups: ClubMatchupSlice{o},
		}
	} else {
		related.R.AwayClubClubMatchups = append(related.R.AwayClubClubMatchups, o)
	}

	return nil
}

// RemoveAwayClubClub relationship.
// Sets o.R.AwayClubClub to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *ClubMatchup) RemoveAwayClubClub(exec boil.Executor, related *Club) error {
	var err error

	queries.SetScanner(&o.AwayClub, nil)
	if _, err = o.Update(exec, boil.Whitelist("away_club")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.AwayClubClub = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AwayClubClubMatchups {
		if queries.Equal(o.AwayClub, ri.AwayClub) {
			continue
		}

		ln := len(related.R.AwayClubClubMatchups)
		if ln > 1 && i < ln-1 {
			related.R.AwayClubClubMatchups[i] = related.R.AwayClubClubMatchups[ln-1]
		}
		related.R.AwayClubClubMatchups = related.R.AwayClubClubMatchups[:ln-1]
		break
	}
	return nil
}

// ClubMatchups retrieves all the records using an executor.
func ClubMatchups(mods ...qm.QueryMod) clubMatchupQuery {
	mods = append(mods, qm.From("`ClubMatchups`"))
	return clubMatchupQuery{NewQuery(mods...)}
}

// FindClubMatchup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClubMatchup(exec boil.Executor, iD int, selectCols ...string) (*ClubMatchup, error) {
	clubMatchupObj := &ClubMatchup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `ClubMatchups` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, clubMatchupObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from ClubMatchups")
	}

	return clubMatchupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClubMatchup) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no ClubMatchups provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubMatchupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clubMatchupInsertCacheMut.RLock()
	cache, cached := clubMatchupInsertCache[key]
	clubMatchupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clubMatchupAllColumns,
			clubMatchupColumnsWithDefault,
			clubMatchupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clubMatchupType, clubMatchupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clubMatchupType, clubMatchupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `ClubMatchups` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `ClubMatchups` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `ClubMatchups` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into ClubMatchups")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clubMatchupMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for ClubMatchups")
	}

CacheNoHooks:
	if !cached {
		clubMatchupInsertCacheMut.Lock()
		clubMatchupInsertCache[key] = cache
		clubMatchupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the ClubMatchup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClubMatchup) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clubMatchupUpdateCacheMut.RLock()
	cache, cached := clubMatchupUpdateCache[key]
	clubMatchupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clubMatchupAllColumns,
			clubMatchupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update ClubMatchups, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `ClubMatchups` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clubMatchupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clubMatchupType, clubMatchupMapping, append(wl, clubMatchupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update ClubMatchups row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for ClubMatchups")
	}

	if !cached {
		clubMatchupUpdateCacheMut.Lock()
		clubMatchupUpdateCache[key] = cache
		clubMatchupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clubMatchupQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for ClubMatchups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for ClubMatchups")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClubMatchupSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubMatchupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `ClubMatchups` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubMatchupPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in clubMatchup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all clubMatchup")
	}
	return rowsAff, nil
}

var mySQLClubMatchupUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClubMatchup) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no ClubMatchups provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clubMatchupColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClubMatchupUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clubMatchupUpsertCacheMut.RLock()
	cache, cached := clubMatchupUpsertCache[key]
	clubMatchupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clubMatchupAllColumns,
			clubMatchupColumnsWithDefault,
			clubMatchupColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			clubMatchupAllColumns,
			clubMatchupPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert ClubMatchups, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`ClubMatchups`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `ClubMatchups` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clubMatchupType, clubMatchupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clubMatchupType, clubMatchupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert for ClubMatchups")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clubMatchupMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clubMatchupType, clubMatchupMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to retrieve unique values for ClubMatchups")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to populate default values for ClubMatchups")
	}

CacheNoHooks:
	if !cached {
		clubMatchupUpsertCacheMut.Lock()
		clubMatchupUpsertCache[key] = cache
		clubMatchupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single ClubMatchup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClubMatchup) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no ClubMatchup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clubMatchupPrimaryKeyMapping)
	sql := "DELETE FROM `ClubMatchups` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from ClubMatchups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for ClubMatchups")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clubMatchupQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no clubMatchupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from ClubMatchups")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for ClubMatchups")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClubMatchupSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clubMatchupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubMatchupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `ClubMatchups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubMatchupPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from clubMatchup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for ClubMatchups")
	}

	if len(clubMatchupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClubMatchup) Reload(exec boil.Executor) error {
	ret, err := FindClubMatchup(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClubMatchupSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClubMatchupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clubMatchupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `ClubMatchups`.* FROM `ClubMatchups` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clubMatchupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in ClubMatchupSlice")
	}

	*o = slice

	return nil
}

// ClubMatchupExists checks if the ClubMatchup row exists.
func ClubMatchupExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `ClubMatchups` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if ClubMatchups exists")
	}

	return exists, nil
}
