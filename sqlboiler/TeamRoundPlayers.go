// Code generated by SQLBoiler 4.5.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamRoundPlayer is an object representing the database table.
type TeamRoundPlayer struct {
	ID           int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamRoundID  null.Int  `boil:"team_round_id" json:"team_round_id,omitempty" toml:"team_round_id" yaml:"team_round_id,omitempty"`
	TeamPlayerID null.Int  `boil:"team_player_id" json:"team_player_id,omitempty" toml:"team_player_id" yaml:"team_player_id,omitempty"`
	Status       null.Int  `boil:"status" json:"status,omitempty" toml:"status" yaml:"status,omitempty"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt    null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *teamRoundPlayerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamRoundPlayerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamRoundPlayerColumns = struct {
	ID           string
	TeamRoundID  string
	TeamPlayerID string
	Status       string
	CreatedAt    string
	DeletedAt    string
}{
	ID:           "id",
	TeamRoundID:  "team_round_id",
	TeamPlayerID: "team_player_id",
	Status:       "status",
	CreatedAt:    "created_at",
	DeletedAt:    "deleted_at",
}

// Generated where

var TeamRoundPlayerWhere = struct {
	ID           whereHelperint
	TeamRoundID  whereHelpernull_Int
	TeamPlayerID whereHelpernull_Int
	Status       whereHelpernull_Int
	CreatedAt    whereHelpertime_Time
	DeletedAt    whereHelpernull_Time
}{
	ID:           whereHelperint{field: "\"TeamRoundPlayers\".\"id\""},
	TeamRoundID:  whereHelpernull_Int{field: "\"TeamRoundPlayers\".\"team_round_id\""},
	TeamPlayerID: whereHelpernull_Int{field: "\"TeamRoundPlayers\".\"team_player_id\""},
	Status:       whereHelpernull_Int{field: "\"TeamRoundPlayers\".\"status\""},
	CreatedAt:    whereHelpertime_Time{field: "\"TeamRoundPlayers\".\"created_at\""},
	DeletedAt:    whereHelpernull_Time{field: "\"TeamRoundPlayers\".\"deleted_at\""},
}

// TeamRoundPlayerRels is where relationship names are stored.
var TeamRoundPlayerRels = struct {
	TeamPlayer string
	TeamRound  string
}{
	TeamPlayer: "TeamPlayer",
	TeamRound:  "TeamRound",
}

// teamRoundPlayerR is where relationships are stored.
type teamRoundPlayerR struct {
	TeamPlayer *TeamPlayer `boil:"TeamPlayer" json:"TeamPlayer" toml:"TeamPlayer" yaml:"TeamPlayer"`
	TeamRound  *TeamRound  `boil:"TeamRound" json:"TeamRound" toml:"TeamRound" yaml:"TeamRound"`
}

// NewStruct creates a new relationship struct
func (*teamRoundPlayerR) NewStruct() *teamRoundPlayerR {
	return &teamRoundPlayerR{}
}

// teamRoundPlayerL is where Load methods for each relationship are stored.
type teamRoundPlayerL struct{}

var (
	teamRoundPlayerAllColumns            = []string{"id", "team_round_id", "team_player_id", "status", "created_at", "deleted_at"}
	teamRoundPlayerColumnsWithoutDefault = []string{"team_round_id", "team_player_id", "status", "created_at", "deleted_at"}
	teamRoundPlayerColumnsWithDefault    = []string{"id"}
	teamRoundPlayerPrimaryKeyColumns     = []string{"id"}
)

type (
	// TeamRoundPlayerSlice is an alias for a slice of pointers to TeamRoundPlayer.
	// This should generally be used opposed to []TeamRoundPlayer.
	TeamRoundPlayerSlice []*TeamRoundPlayer
	// TeamRoundPlayerHook is the signature for custom TeamRoundPlayer hook methods
	TeamRoundPlayerHook func(boil.Executor, *TeamRoundPlayer) error

	teamRoundPlayerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamRoundPlayerType                 = reflect.TypeOf(&TeamRoundPlayer{})
	teamRoundPlayerMapping              = queries.MakeStructMapping(teamRoundPlayerType)
	teamRoundPlayerPrimaryKeyMapping, _ = queries.BindMapping(teamRoundPlayerType, teamRoundPlayerMapping, teamRoundPlayerPrimaryKeyColumns)
	teamRoundPlayerInsertCacheMut       sync.RWMutex
	teamRoundPlayerInsertCache          = make(map[string]insertCache)
	teamRoundPlayerUpdateCacheMut       sync.RWMutex
	teamRoundPlayerUpdateCache          = make(map[string]updateCache)
	teamRoundPlayerUpsertCacheMut       sync.RWMutex
	teamRoundPlayerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamRoundPlayerBeforeInsertHooks []TeamRoundPlayerHook
var teamRoundPlayerBeforeUpdateHooks []TeamRoundPlayerHook
var teamRoundPlayerBeforeDeleteHooks []TeamRoundPlayerHook
var teamRoundPlayerBeforeUpsertHooks []TeamRoundPlayerHook

var teamRoundPlayerAfterInsertHooks []TeamRoundPlayerHook
var teamRoundPlayerAfterSelectHooks []TeamRoundPlayerHook
var teamRoundPlayerAfterUpdateHooks []TeamRoundPlayerHook
var teamRoundPlayerAfterDeleteHooks []TeamRoundPlayerHook
var teamRoundPlayerAfterUpsertHooks []TeamRoundPlayerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamRoundPlayer) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamRoundPlayer) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamRoundPlayer) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamRoundPlayer) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamRoundPlayer) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamRoundPlayer) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamRoundPlayer) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamRoundPlayer) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamRoundPlayer) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range teamRoundPlayerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamRoundPlayerHook registers your hook function for all future operations.
func AddTeamRoundPlayerHook(hookPoint boil.HookPoint, teamRoundPlayerHook TeamRoundPlayerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		teamRoundPlayerBeforeInsertHooks = append(teamRoundPlayerBeforeInsertHooks, teamRoundPlayerHook)
	case boil.BeforeUpdateHook:
		teamRoundPlayerBeforeUpdateHooks = append(teamRoundPlayerBeforeUpdateHooks, teamRoundPlayerHook)
	case boil.BeforeDeleteHook:
		teamRoundPlayerBeforeDeleteHooks = append(teamRoundPlayerBeforeDeleteHooks, teamRoundPlayerHook)
	case boil.BeforeUpsertHook:
		teamRoundPlayerBeforeUpsertHooks = append(teamRoundPlayerBeforeUpsertHooks, teamRoundPlayerHook)
	case boil.AfterInsertHook:
		teamRoundPlayerAfterInsertHooks = append(teamRoundPlayerAfterInsertHooks, teamRoundPlayerHook)
	case boil.AfterSelectHook:
		teamRoundPlayerAfterSelectHooks = append(teamRoundPlayerAfterSelectHooks, teamRoundPlayerHook)
	case boil.AfterUpdateHook:
		teamRoundPlayerAfterUpdateHooks = append(teamRoundPlayerAfterUpdateHooks, teamRoundPlayerHook)
	case boil.AfterDeleteHook:
		teamRoundPlayerAfterDeleteHooks = append(teamRoundPlayerAfterDeleteHooks, teamRoundPlayerHook)
	case boil.AfterUpsertHook:
		teamRoundPlayerAfterUpsertHooks = append(teamRoundPlayerAfterUpsertHooks, teamRoundPlayerHook)
	}
}

// One returns a single teamRoundPlayer record from the query.
func (q teamRoundPlayerQuery) One(exec boil.Executor) (*TeamRoundPlayer, error) {
	o := &TeamRoundPlayer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for TeamRoundPlayers")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamRoundPlayer records from the query.
func (q teamRoundPlayerQuery) All(exec boil.Executor) (TeamRoundPlayerSlice, error) {
	var o []*TeamRoundPlayer

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to TeamRoundPlayer slice")
	}

	if len(teamRoundPlayerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamRoundPlayer records in the query.
func (q teamRoundPlayerQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count TeamRoundPlayers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamRoundPlayerQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if TeamRoundPlayers exists")
	}

	return count > 0, nil
}

// TeamPlayer pointed to by the foreign key.
func (o *TeamRoundPlayer) TeamPlayer(mods ...qm.QueryMod) teamPlayerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamPlayerID),
	}

	queryMods = append(queryMods, mods...)

	query := TeamPlayers(queryMods...)
	queries.SetFrom(query.Query, "\"TeamPlayers\"")

	return query
}

// TeamRound pointed to by the foreign key.
func (o *TeamRoundPlayer) TeamRound(mods ...qm.QueryMod) teamRoundQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamRoundID),
	}

	queryMods = append(queryMods, mods...)

	query := TeamRounds(queryMods...)
	queries.SetFrom(query.Query, "\"TeamRounds\"")

	return query
}

// LoadTeamPlayer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamRoundPlayerL) LoadTeamPlayer(e boil.Executor, singular bool, maybeTeamRoundPlayer interface{}, mods queries.Applicator) error {
	var slice []*TeamRoundPlayer
	var object *TeamRoundPlayer

	if singular {
		object = maybeTeamRoundPlayer.(*TeamRoundPlayer)
	} else {
		slice = *maybeTeamRoundPlayer.(*[]*TeamRoundPlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamRoundPlayerR{}
		}
		if !queries.IsNil(object.TeamPlayerID) {
			args = append(args, object.TeamPlayerID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamRoundPlayerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamPlayerID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamPlayerID) {
				args = append(args, obj.TeamPlayerID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamPlayers`),
		qm.WhereIn(`TeamPlayers.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamPlayer")
	}

	var resultSlice []*TeamPlayer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamPlayer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TeamPlayers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamPlayers")
	}

	if len(teamRoundPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TeamPlayer = foreign
		if foreign.R == nil {
			foreign.R = &teamPlayerR{}
		}
		foreign.R.TeamPlayerTeamRoundPlayers = append(foreign.R.TeamPlayerTeamRoundPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamPlayerID, foreign.ID) {
				local.R.TeamPlayer = foreign
				if foreign.R == nil {
					foreign.R = &teamPlayerR{}
				}
				foreign.R.TeamPlayerTeamRoundPlayers = append(foreign.R.TeamPlayerTeamRoundPlayers, local)
				break
			}
		}
	}

	return nil
}

// LoadTeamRound allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamRoundPlayerL) LoadTeamRound(e boil.Executor, singular bool, maybeTeamRoundPlayer interface{}, mods queries.Applicator) error {
	var slice []*TeamRoundPlayer
	var object *TeamRoundPlayer

	if singular {
		object = maybeTeamRoundPlayer.(*TeamRoundPlayer)
	} else {
		slice = *maybeTeamRoundPlayer.(*[]*TeamRoundPlayer)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &teamRoundPlayerR{}
		}
		if !queries.IsNil(object.TeamRoundID) {
			args = append(args, object.TeamRoundID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamRoundPlayerR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TeamRoundID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TeamRoundID) {
				args = append(args, obj.TeamRoundID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`TeamRounds`),
		qm.WhereIn(`TeamRounds.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load TeamRound")
	}

	var resultSlice []*TeamRound
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice TeamRound")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for TeamRounds")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for TeamRounds")
	}

	if len(teamRoundPlayerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TeamRound = foreign
		if foreign.R == nil {
			foreign.R = &teamRoundR{}
		}
		foreign.R.TeamRoundTeamRoundPlayers = append(foreign.R.TeamRoundTeamRoundPlayers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TeamRoundID, foreign.ID) {
				local.R.TeamRound = foreign
				if foreign.R == nil {
					foreign.R = &teamRoundR{}
				}
				foreign.R.TeamRoundTeamRoundPlayers = append(foreign.R.TeamRoundTeamRoundPlayers, local)
				break
			}
		}
	}

	return nil
}

// SetTeamPlayer of the teamRoundPlayer to the related item.
// Sets o.R.TeamPlayer to related.
// Adds o to related.R.TeamPlayerTeamRoundPlayers.
func (o *TeamRoundPlayer) SetTeamPlayer(exec boil.Executor, insert bool, related *TeamPlayer) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"TeamRoundPlayers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_player_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamRoundPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamPlayerID, related.ID)
	if o.R == nil {
		o.R = &teamRoundPlayerR{
			TeamPlayer: related,
		}
	} else {
		o.R.TeamPlayer = related
	}

	if related.R == nil {
		related.R = &teamPlayerR{
			TeamPlayerTeamRoundPlayers: TeamRoundPlayerSlice{o},
		}
	} else {
		related.R.TeamPlayerTeamRoundPlayers = append(related.R.TeamPlayerTeamRoundPlayers, o)
	}

	return nil
}

// RemoveTeamPlayer relationship.
// Sets o.R.TeamPlayer to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamRoundPlayer) RemoveTeamPlayer(exec boil.Executor, related *TeamPlayer) error {
	var err error

	queries.SetScanner(&o.TeamPlayerID, nil)
	if _, err = o.Update(exec, boil.Whitelist("team_player_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TeamPlayer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeamPlayerTeamRoundPlayers {
		if queries.Equal(o.TeamPlayerID, ri.TeamPlayerID) {
			continue
		}

		ln := len(related.R.TeamPlayerTeamRoundPlayers)
		if ln > 1 && i < ln-1 {
			related.R.TeamPlayerTeamRoundPlayers[i] = related.R.TeamPlayerTeamRoundPlayers[ln-1]
		}
		related.R.TeamPlayerTeamRoundPlayers = related.R.TeamPlayerTeamRoundPlayers[:ln-1]
		break
	}
	return nil
}

// SetTeamRound of the teamRoundPlayer to the related item.
// Sets o.R.TeamRound to related.
// Adds o to related.R.TeamRoundTeamRoundPlayers.
func (o *TeamRoundPlayer) SetTeamRound(exec boil.Executor, insert bool, related *TeamRound) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"TeamRoundPlayers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_round_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamRoundPlayerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TeamRoundID, related.ID)
	if o.R == nil {
		o.R = &teamRoundPlayerR{
			TeamRound: related,
		}
	} else {
		o.R.TeamRound = related
	}

	if related.R == nil {
		related.R = &teamRoundR{
			TeamRoundTeamRoundPlayers: TeamRoundPlayerSlice{o},
		}
	} else {
		related.R.TeamRoundTeamRoundPlayers = append(related.R.TeamRoundTeamRoundPlayers, o)
	}

	return nil
}

// RemoveTeamRound relationship.
// Sets o.R.TeamRound to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *TeamRoundPlayer) RemoveTeamRound(exec boil.Executor, related *TeamRound) error {
	var err error

	queries.SetScanner(&o.TeamRoundID, nil)
	if _, err = o.Update(exec, boil.Whitelist("team_round_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TeamRound = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TeamRoundTeamRoundPlayers {
		if queries.Equal(o.TeamRoundID, ri.TeamRoundID) {
			continue
		}

		ln := len(related.R.TeamRoundTeamRoundPlayers)
		if ln > 1 && i < ln-1 {
			related.R.TeamRoundTeamRoundPlayers[i] = related.R.TeamRoundTeamRoundPlayers[ln-1]
		}
		related.R.TeamRoundTeamRoundPlayers = related.R.TeamRoundTeamRoundPlayers[:ln-1]
		break
	}
	return nil
}

// TeamRoundPlayers retrieves all the records using an executor.
func TeamRoundPlayers(mods ...qm.QueryMod) teamRoundPlayerQuery {
	mods = append(mods, qm.From("\"TeamRoundPlayers\""))
	return teamRoundPlayerQuery{NewQuery(mods...)}
}

// FindTeamRoundPlayer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamRoundPlayer(exec boil.Executor, iD int, selectCols ...string) (*TeamRoundPlayer, error) {
	teamRoundPlayerObj := &TeamRoundPlayer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"TeamRoundPlayers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, teamRoundPlayerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from TeamRoundPlayers")
	}

	return teamRoundPlayerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamRoundPlayer) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TeamRoundPlayers provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamRoundPlayerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamRoundPlayerInsertCacheMut.RLock()
	cache, cached := teamRoundPlayerInsertCache[key]
	teamRoundPlayerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamRoundPlayerAllColumns,
			teamRoundPlayerColumnsWithDefault,
			teamRoundPlayerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamRoundPlayerType, teamRoundPlayerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamRoundPlayerType, teamRoundPlayerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"TeamRoundPlayers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"TeamRoundPlayers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into TeamRoundPlayers")
	}

	if !cached {
		teamRoundPlayerInsertCacheMut.Lock()
		teamRoundPlayerInsertCache[key] = cache
		teamRoundPlayerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TeamRoundPlayer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamRoundPlayer) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamRoundPlayerUpdateCacheMut.RLock()
	cache, cached := teamRoundPlayerUpdateCache[key]
	teamRoundPlayerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamRoundPlayerAllColumns,
			teamRoundPlayerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update TeamRoundPlayers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"TeamRoundPlayers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamRoundPlayerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamRoundPlayerType, teamRoundPlayerMapping, append(wl, teamRoundPlayerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update TeamRoundPlayers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for TeamRoundPlayers")
	}

	if !cached {
		teamRoundPlayerUpdateCacheMut.Lock()
		teamRoundPlayerUpdateCache[key] = cache
		teamRoundPlayerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamRoundPlayerQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for TeamRoundPlayers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for TeamRoundPlayers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamRoundPlayerSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamRoundPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"TeamRoundPlayers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamRoundPlayerPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in teamRoundPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all teamRoundPlayer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamRoundPlayer) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no TeamRoundPlayers provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamRoundPlayerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamRoundPlayerUpsertCacheMut.RLock()
	cache, cached := teamRoundPlayerUpsertCache[key]
	teamRoundPlayerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			teamRoundPlayerAllColumns,
			teamRoundPlayerColumnsWithDefault,
			teamRoundPlayerColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			teamRoundPlayerAllColumns,
			teamRoundPlayerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert TeamRoundPlayers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(teamRoundPlayerPrimaryKeyColumns))
			copy(conflict, teamRoundPlayerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"TeamRoundPlayers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(teamRoundPlayerType, teamRoundPlayerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamRoundPlayerType, teamRoundPlayerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert TeamRoundPlayers")
	}

	if !cached {
		teamRoundPlayerUpsertCacheMut.Lock()
		teamRoundPlayerUpsertCache[key] = cache
		teamRoundPlayerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TeamRoundPlayer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamRoundPlayer) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no TeamRoundPlayer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamRoundPlayerPrimaryKeyMapping)
	sql := "DELETE FROM \"TeamRoundPlayers\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from TeamRoundPlayers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for TeamRoundPlayers")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamRoundPlayerQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no teamRoundPlayerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from TeamRoundPlayers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TeamRoundPlayers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamRoundPlayerSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamRoundPlayerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamRoundPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"TeamRoundPlayers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamRoundPlayerPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from teamRoundPlayer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for TeamRoundPlayers")
	}

	if len(teamRoundPlayerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamRoundPlayer) Reload(exec boil.Executor) error {
	ret, err := FindTeamRoundPlayer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamRoundPlayerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamRoundPlayerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamRoundPlayerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"TeamRoundPlayers\".* FROM \"TeamRoundPlayers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamRoundPlayerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in TeamRoundPlayerSlice")
	}

	*o = slice

	return nil
}

// TeamRoundPlayerExists checks if the TeamRoundPlayer row exists.
func TeamRoundPlayerExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"TeamRoundPlayers\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if TeamRoundPlayers exists")
	}

	return exists, nil
}
